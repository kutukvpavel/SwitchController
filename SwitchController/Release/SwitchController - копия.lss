
SwitchController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ed2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00001ed2  00001f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000125  008000ce  008000ce  00001ff4  2**0
                  ALLOC
  3 .eeprom       000001d8  00810000  00810000  00001ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021fc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  00002238  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003477  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d60  00000000  00000000  0000579f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000195d  00000000  00000000  000064ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a8  00000000  00000000  00007e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000db6  00000000  00000000  00008304  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000078b  00000000  00000000  000090ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f0  00000000  00000000  00009845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c0       	rjmp	.+106    	; 0x6c <__ctors_end>
       2:	59 c0       	rjmp	.+178    	; 0xb6 <__bad_interrupt>
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	57 c0       	rjmp	.+174    	; 0xb6 <__bad_interrupt>
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	55 c0       	rjmp	.+170    	; 0xb6 <__bad_interrupt>
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	53 c0       	rjmp	.+166    	; 0xb6 <__bad_interrupt>
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	81 c0       	rjmp	.+258    	; 0x116 <__vector_9>
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	ec c2       	rjmp	.+1496   	; 0x5f0 <__vector_11>
      18:	c6 c2       	rjmp	.+1420   	; 0x5a6 <__vector_12>
      1a:	4d c0       	rjmp	.+154    	; 0xb6 <__bad_interrupt>
      1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
      1e:	4b c0       	rjmp	.+150    	; 0xb6 <__bad_interrupt>
      20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
      22:	49 c0       	rjmp	.+146    	; 0xb6 <__bad_interrupt>
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	0e c4       	rjmp	.+2076   	; 0x844 <_Z3cmdc+0x5e>
      28:	a3 c6       	rjmp	.+3398   	; 0xd70 <_Z3cmdc+0x58a>
      2a:	a2 c6       	rjmp	.+3396   	; 0xd70 <_Z3cmdc+0x58a>
      2c:	a1 c6       	rjmp	.+3394   	; 0xd70 <_Z3cmdc+0x58a>
      2e:	a0 c6       	rjmp	.+3392   	; 0xd70 <_Z3cmdc+0x58a>
      30:	f3 c3       	rjmp	.+2022   	; 0x818 <_Z3cmdc+0x32>
      32:	bd c4       	rjmp	.+2426   	; 0x9ae <_Z3cmdc+0x1c8>
      34:	14 c4       	rjmp	.+2088   	; 0x85e <_Z3cmdc+0x78>
      36:	44 c4       	rjmp	.+2184   	; 0x8c0 <_Z3cmdc+0xda>
      38:	9b c6       	rjmp	.+3382   	; 0xd70 <_Z3cmdc+0x58a>
      3a:	9a c6       	rjmp	.+3380   	; 0xd70 <_Z3cmdc+0x58a>
      3c:	1f c4       	rjmp	.+2110   	; 0x87c <_Z3cmdc+0x96>
      3e:	a2 c4       	rjmp	.+2372   	; 0x984 <_Z3cmdc+0x19e>
      40:	87 c4       	rjmp	.+2318   	; 0x950 <_Z3cmdc+0x16a>
      42:	f8 c4       	rjmp	.+2544   	; 0xa34 <_Z3cmdc+0x24e>
      44:	03 c4       	rjmp	.+2054   	; 0x84c <_Z3cmdc+0x66>
      46:	94 c6       	rjmp	.+3368   	; 0xd70 <_Z3cmdc+0x58a>
      48:	ca c4       	rjmp	.+2452   	; 0x9de <_Z3cmdc+0x1f8>
      4a:	92 c6       	rjmp	.+3364   	; 0xd70 <_Z3cmdc+0x58a>
      4c:	2f c5       	rjmp	.+2654   	; 0xaac <_Z3cmdc+0x2c6>
      4e:	90 c6       	rjmp	.+3360   	; 0xd70 <_Z3cmdc+0x58a>
      50:	65 c4       	rjmp	.+2250   	; 0x91c <_Z3cmdc+0x136>

00000052 <__trampolines_end>:
      52:	00 00       	nop
      54:	c8 42       	sbci	r28, 0x28	; 40
      56:	00 00       	nop
      58:	20 41       	sbci	r18, 0x10	; 16
      5a:	00 00       	nop
      5c:	80 3f       	cpi	r24, 0xF0	; 240
      5e:	cd cc       	rjmp	.-1638   	; 0xfffff9fa <__eeprom_end+0xff7ef822>
      60:	cc 3d       	cpi	r28, 0xDC	; 220
      62:	0a d7       	rcall	.+3604   	; 0xe78 <_Z8intToBitIhEvT_Pch.constprop.5+0x18>
      64:	23 3c       	cpi	r18, 0xC3	; 195
      66:	6f 12       	cpse	r6, r31
      68:	83 3a       	cpi	r24, 0xA3	; 163

0000006a <__ctors_start>:
      6a:	5e 0c       	add	r5, r14

0000006c <__ctors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf e5       	ldi	r28, 0x5F	; 95
      72:	d4 e0       	ldi	r29, 0x04	; 4
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	10 e0       	ldi	r17, 0x00	; 0
      7a:	a0 e6       	ldi	r26, 0x60	; 96
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	e2 ed       	ldi	r30, 0xD2	; 210
      80:	fe e1       	ldi	r31, 0x1E	; 30
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	ae 3c       	cpi	r26, 0xCE	; 206
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	21 e0       	ldi	r18, 0x01	; 1
      90:	ae ec       	ldi	r26, 0xCE	; 206
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a3 3f       	cpi	r26, 0xF3	; 243
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c6 e3       	ldi	r28, 0x36	; 54
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	03 c0       	rjmp	.+6      	; 0xac <__do_global_ctors+0xe>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	b5 de       	rcall	.-662    	; 0xfffffe16 <__eeprom_end+0xff7efc3e>
      ac:	c5 33       	cpi	r28, 0x35	; 53
      ae:	d1 07       	cpc	r29, r17
      b0:	d1 f7       	brne	.-12     	; 0xa6 <__do_global_ctors+0x8>
      b2:	97 d8       	rcall	.-3794   	; 0xfffff1e2 <__eeprom_end+0xff7ef00a>
      b4:	b6 ce       	rjmp	.-660    	; 0xfffffe22 <__eeprom_end+0xff7efc4a>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_Z9uart_putch>:
Input:    byte to be transmitted
Returns:  none
**************************************************************************/
void uart_putc(unsigned char data)
{
    unsigned char tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
      b8:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <_ZL11UART_TxHead>
      bc:	9f 5f       	subi	r25, 0xFF	; 255
      be:	9f 73       	andi	r25, 0x3F	; 63
    while ( tmphead == UART_TxTail );
      c0:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <_ZL11UART_TxTail>
      c4:	92 17       	cp	r25, r18
      c6:	e1 f3       	breq	.-8      	; 0xc0 <_Z9uart_putch+0x8>
    UART_TxBuf[tmphead] = data;
      c8:	e9 2f       	mov	r30, r25
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	e1 51       	subi	r30, 0x11	; 17
      ce:	ff 4f       	sbci	r31, 0xFF	; 255
      d0:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
      d2:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_ZL11UART_TxHead>
    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
      d6:	55 9a       	sbi	0x0a, 5	; 10
      d8:	08 95       	ret

000000da <_ZN5pin_t12SetDirectionEPKS_b.part.1>:
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
      da:	dc 01       	movw	r26, r24
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
      dc:	ed 91       	ld	r30, X+
      de:	fc 91       	ld	r31, X
      e0:	11 97       	sbiw	r26, 0x01	; 1
      e2:	90 81       	ld	r25, Z
      e4:	12 96       	adiw	r26, 0x02	; 2
      e6:	8c 91       	ld	r24, X
      e8:	89 2b       	or	r24, r25
      ea:	80 83       	st	Z, r24
      ec:	08 95       	ret

000000ee <_Z8OWselectPKh>:

//
// Do a ROM select
//
void OWselect(const uint8_t rom[8])
{
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	8c 01       	movw	r16, r24
	uint8_t i;

	OWwrite(0x55);           // Choose ROM
      f8:	85 e5       	ldi	r24, 0x55	; 85
      fa:	47 d6       	rcall	.+3214   	; 0xd8a <_Z7OWwritehh.constprop.21>
      fc:	e8 01       	movw	r28, r16
      fe:	08 5f       	subi	r16, 0xF8	; 248
     100:	1f 4f       	sbci	r17, 0xFF	; 255

	for (i = 0; i < 8; i++) OWwrite(rom[i]);
     102:	89 91       	ld	r24, Y+
     104:	42 d6       	rcall	.+3204   	; 0xd8a <_Z7OWwritehh.constprop.21>
     106:	c0 17       	cp	r28, r16
     108:	d1 07       	cpc	r29, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <_Z8OWselectPKh+0x14>
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	08 95       	ret

00000116 <__vector_9>:
#endif

//Interrupts

ISR(TIMER0_OVF_vect)
{
     116:	1f 92       	push	r1
     118:	0f 92       	push	r0
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	0f 92       	push	r0
     11e:	11 24       	eor	r1, r1
     120:	8f 93       	push	r24
     122:	9f 93       	push	r25
	++time_cnt;	//Increment main timer (used for PC reset)
     124:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZL8time_cnt>
     128:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_ZL8time_cnt+0x1>
     12c:	01 96       	adiw	r24, 0x01	; 1
     12e:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_ZL8time_cnt+0x1>
     132:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZL8time_cnt>
}
     136:	9f 91       	pop	r25
     138:	8f 91       	pop	r24
     13a:	0f 90       	pop	r0
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	0f 90       	pop	r0
     140:	1f 90       	pop	r1
     142:	18 95       	reti

00000144 <_ZN5pin_t5WriteEPKS_b>:
{};

#if PINS_STATIC
	#if !PINS_STATIC_INLINE
	void pin_t::Write(const pin_t* pin, bool val)
	{
     144:	dc 01       	movw	r26, r24
     146:	ed 91       	ld	r30, X+
     148:	fc 91       	ld	r31, X
     14a:	11 97       	sbiw	r26, 0x01	; 1
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	8c 91       	ld	r24, X
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
     150:	91 81       	ldd	r25, Z+1	; 0x01
     152:	66 23       	and	r22, r22
     154:	11 f0       	breq	.+4      	; 0x15a <_ZN5pin_t5WriteEPKS_b+0x16>
     156:	89 2b       	or	r24, r25
     158:	02 c0       	rjmp	.+4      	; 0x15e <_ZN5pin_t5WriteEPKS_b+0x1a>
     15a:	80 95       	com	r24
     15c:	89 23       	and	r24, r25
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	08 95       	ret

00000162 <_Z7actuatehb>:
{
	for (uint8_t i = 0; i < arraySize(output_pins); ++i) pin_t::Write(&(output_pins[i]), ((states & BVO(i)) > 0) != ((output_inv_buf & BVO(i)) > 0));
	output_compare_buf = states;
}
void actuate(uint8_t pin_index, bool state)
{
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	06 2f       	mov	r16, r22
	state = (state != ((output_inv_buf & BVO(pin_index)) > 0));
     16c:	28 2f       	mov	r18, r24
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	c1 e0       	ldi	r28, 0x01	; 1
     172:	d0 e0       	ldi	r29, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <_Z7actuatehb+0x18>
     176:	cc 0f       	add	r28, r28
     178:	dd 1f       	adc	r29, r29
     17a:	8a 95       	dec	r24
     17c:	e2 f7       	brpl	.-8      	; 0x176 <_Z7actuatehb+0x14>
     17e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZL14output_inv_buf>
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	8c 23       	and	r24, r28
     186:	9d 23       	and	r25, r29
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	18 16       	cp	r1, r24
     18c:	19 06       	cpc	r1, r25
     18e:	0c f0       	brlt	.+2      	; 0x192 <_Z7actuatehb+0x30>
     190:	10 e0       	ldi	r17, 0x00	; 0
	pin_t::Write(&(output_pins[pin_index]), state);
     192:	60 2f       	mov	r22, r16
     194:	61 27       	eor	r22, r17
     196:	46 e0       	ldi	r20, 0x06	; 6
     198:	42 9f       	mul	r20, r18
     19a:	c0 01       	movw	r24, r0
     19c:	43 9f       	mul	r20, r19
     19e:	90 0d       	add	r25, r0
     1a0:	11 24       	eor	r1, r1
     1a2:	88 55       	subi	r24, 0x58	; 88
     1a4:	9e 4f       	sbci	r25, 0xFE	; 254
     1a6:	ce df       	rcall	.-100    	; 0x144 <_ZN5pin_t5WriteEPKS_b>
     1a8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZL18output_compare_buf>
	state ? output_compare_buf |= BVO(pin_index) : output_compare_buf &= static_cast<outputs_t>(~BVO(pin_index));
     1ac:	01 17       	cp	r16, r17
     1ae:	11 f0       	breq	.+4      	; 0x1b4 <_Z7actuatehb+0x52>
     1b0:	c8 2b       	or	r28, r24
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <_Z7actuatehb+0x56>
     1b4:	c0 95       	com	r28
     1b6:	c8 23       	and	r28, r24
     1b8:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <_ZL18output_compare_buf>
}
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	08 95       	ret

000001c6 <_Z7actuateh>:
	for (i = 0; i < arraySize(input_pins); ++i) if (temp & BVI(i)) reaction(i, res & BVI(i));
	last_input_diff = res;
}

void actuate(outputs_t states)
{
     1c6:	bf 92       	push	r11
     1c8:	cf 92       	push	r12
     1ca:	df 92       	push	r13
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	b8 2e       	mov	r11, r24
     1da:	88 ea       	ldi	r24, 0xA8	; 168
     1dc:	c8 2e       	mov	r12, r24
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	d8 2e       	mov	r13, r24
     1e2:	c0 e0       	ldi	r28, 0x00	; 0
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < arraySize(output_pins); ++i) pin_t::Write(&(output_pins[i]), ((states & BVO(i)) > 0) != ((output_inv_buf & BVO(i)) > 0));
     1e6:	01 e0       	ldi	r16, 0x01	; 1
     1e8:	10 e0       	ldi	r17, 0x00	; 0
     1ea:	eb 2c       	mov	r14, r11
     1ec:	f1 2c       	mov	r15, r1
     1ee:	98 01       	movw	r18, r16
     1f0:	0c 2e       	mov	r0, r28
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <_Z7actuateh+0x32>
     1f4:	22 0f       	add	r18, r18
     1f6:	33 1f       	adc	r19, r19
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <_Z7actuateh+0x2e>
     1fc:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZL14output_inv_buf>
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	82 23       	and	r24, r18
     204:	93 23       	and	r25, r19
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	18 16       	cp	r1, r24
     20a:	19 06       	cpc	r1, r25
     20c:	0c f0       	brlt	.+2      	; 0x210 <_Z7actuateh+0x4a>
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	2e 21       	and	r18, r14
     212:	3f 21       	and	r19, r15
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	12 16       	cp	r1, r18
     218:	13 06       	cpc	r1, r19
     21a:	0c f0       	brlt	.+2      	; 0x21e <_Z7actuateh+0x58>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	68 27       	eor	r22, r24
     220:	c6 01       	movw	r24, r12
     222:	90 df       	rcall	.-224    	; 0x144 <_ZN5pin_t5WriteEPKS_b>
     224:	21 96       	adiw	r28, 0x01	; 1
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	c8 0e       	add	r12, r24
     22a:	d1 1c       	adc	r13, r1
     22c:	c5 30       	cpi	r28, 0x05	; 5
     22e:	d1 05       	cpc	r29, r1
     230:	f1 f6       	brne	.-68     	; 0x1ee <_Z7actuateh+0x28>
	output_compare_buf = states;
     232:	b0 92 82 01 	sts	0x0182, r11	; 0x800182 <_ZL18output_compare_buf>
}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	df 90       	pop	r13
     244:	cf 90       	pop	r12
     246:	bf 90       	pop	r11
     248:	08 95       	ret

0000024a <_Z10OWread_bitv>:
//
uint8_t OWread_bit(void)
{
	uint8_t r;

	cli();
     24a:	f8 94       	cli
     24c:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     250:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     254:	42 df       	rcall	.-380    	; 0xda <_ZN5pin_t12SetDirectionEPKS_b.part.1>
	pin_t::SetDirection(OWpin, pin_t::Output);
	#else
	OWpin->SetDirection(pin_t::Output);
	#endif
	#if PINS_STATIC
	pin_t::Write(OWpin, false);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     25c:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     260:	71 df       	rcall	.-286    	; 0x144 <_ZN5pin_t5WriteEPKS_b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     262:	80 e1       	ldi	r24, 0x10	; 16
     264:	8a 95       	dec	r24
     266:	f1 f7       	brne	.-4      	; 0x264 <_Z10OWread_bitv+0x1a>
	#else
	OWpin->Write(false);
	#endif
	_delay_us(3);
	#if PINS_STATIC
	pin_t::SetDirection(OWpin, pin_t::Input);
     268:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     26c:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
     270:	ed 91       	ld	r30, X+
     272:	fc 91       	ld	r31, X
     274:	11 97       	sbiw	r26, 0x01	; 1
     276:	90 81       	ld	r25, Z
     278:	12 96       	adiw	r26, 0x02	; 2
     27a:	8c 91       	ld	r24, X
     27c:	80 95       	com	r24
     27e:	89 23       	and	r24, r25
     280:	80 83       	st	Z, r24
     282:	e5 e3       	ldi	r30, 0x35	; 53
     284:	ea 95       	dec	r30
     286:	f1 f7       	brne	.-4      	; 0x284 <_Z10OWread_bitv+0x3a>
     288:	00 00       	nop
	OWpin->SetDirection(pin_t::Input);
	#endif	// let pin float, pull up will raise
	_delay_us(10);
	r = 
	#if PINS_STATIC
	pin_t::Read(OWpin);
     28a:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     28e:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
     292:	ed 91       	ld	r30, X+
     294:	fc 91       	ld	r31, X
     296:	11 97       	sbiw	r26, 0x01	; 1
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	90 81       	ld	r25, Z
     29c:	12 96       	adiw	r26, 0x02	; 2
     29e:	8c 91       	ld	r24, X
     2a0:	98 23       	and	r25, r24
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <_Z10OWread_bitv+0x5e>
     2a6:	80 e0       	ldi	r24, 0x00	; 0
	#else
	OWpin->Read();
	#endif
	sei();
     2a8:	78 94       	sei
     2aa:	e3 ed       	ldi	r30, 0xD3	; 211
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <_Z10OWread_bitv+0x64>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <_Z10OWread_bitv+0x6a>
     2b4:	00 00       	nop
	_delay_us(53);
	return r;
}
     2b6:	08 95       	ret

000002b8 <_Z11OWwrite_bith>:
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OWwrite_bit(uint8_t v)
{
	if (v & 1) {
     2b8:	80 ff       	sbrs	r24, 0
     2ba:	24 c0       	rjmp	.+72     	; 0x304 <_Z11OWwrite_bith+0x4c>
		cli();
     2bc:	f8 94       	cli
		#if PINS_STATIC
		pin_t::Write(OWpin, false);
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     2c4:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     2c8:	3d df       	rcall	.-390    	; 0x144 <_ZN5pin_t5WriteEPKS_b>
     2ca:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     2ce:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     2d2:	03 df       	rcall	.-506    	; 0xda <_ZN5pin_t12SetDirectionEPKS_b.part.1>
     2d4:	85 e3       	ldi	r24, 0x35	; 53
     2d6:	8a 95       	dec	r24
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <_Z11OWwrite_bith+0x1e>
     2da:	00 00       	nop
		#else
		OWpin->SetDirection(pin_t::Output);
		#endif	// drive output low
		_delay_us(10);
		#if PINS_STATIC
		pin_t::Write(OWpin, true);
     2dc:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     2e0:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>

#if PINS_STATIC
	#if !PINS_STATIC_INLINE
	void pin_t::Write(const pin_t* pin, bool val)
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
     2e4:	ed 91       	ld	r30, X+
     2e6:	fc 91       	ld	r31, X
     2e8:	11 97       	sbiw	r26, 0x01	; 1
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	12 96       	adiw	r26, 0x02	; 2
     2ee:	8c 91       	ld	r24, X
     2f0:	89 2b       	or	r24, r25
     2f2:	81 83       	std	Z+1, r24	; 0x01
		#else
		OWpin->Write(true);
		#endif	// drive output high
		sei();
     2f4:	78 94       	sei
     2f6:	8b ed       	ldi	r24, 0xDB	; 219
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <_Z11OWwrite_bith+0x42>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <_Z11OWwrite_bith+0x48>
     300:	00 00       	nop
     302:	08 95       	ret
		_delay_us(55);
		} else {
		cli();
     304:	f8 94       	cli
		#if PINS_STATIC
		pin_t::Write(OWpin, false);
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     30c:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     310:	19 df       	rcall	.-462    	; 0x144 <_ZN5pin_t5WriteEPKS_b>
     312:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     316:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     31a:	df de       	rcall	.-578    	; 0xda <_ZN5pin_t12SetDirectionEPKS_b.part.1>
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <_Z11OWwrite_bith+0x68>
     324:	00 c0       	rjmp	.+0      	; 0x326 <_Z11OWwrite_bith+0x6e>
     326:	00 00       	nop
		#else
		OWpin->SetDirection(pin_t::Output);
		#endif	// drive output low
		_delay_us(65);
		#if PINS_STATIC
		pin_t::Write(OWpin, true);
     328:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     32c:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     330:	ed 91       	ld	r30, X+
     332:	fc 91       	ld	r31, X
     334:	11 97       	sbiw	r26, 0x01	; 1
     336:	91 81       	ldd	r25, Z+1	; 0x01
     338:	12 96       	adiw	r26, 0x02	; 2
     33a:	8c 91       	ld	r24, X
     33c:	89 2b       	or	r24, r25
     33e:	81 83       	std	Z+1, r24	; 0x01
		#else
		OWpin->Write(true);
		#endif	// drive output high
		sei();
     340:	78 94       	sei
     342:	9a e1       	ldi	r25, 0x1A	; 26
     344:	9a 95       	dec	r25
     346:	f1 f7       	brne	.-4      	; 0x344 <_Z11OWwrite_bith+0x8c>
     348:	00 c0       	rjmp	.+0      	; 0x34a <_Z11OWwrite_bith+0x92>
     34a:	08 95       	ret

0000034c <_Z7OWresetv>:
uint8_t OWreset(void)
{
	uint8_t r;
	uint8_t retries = 125;

	cli();
     34c:	f8 94       	cli
	#if PINS_STATIC
	pin_t::SetDirection(OWpin, pin_t::Input);
     34e:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     352:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
     356:	ed 91       	ld	r30, X+
     358:	fc 91       	ld	r31, X
     35a:	11 97       	sbiw	r26, 0x01	; 1
     35c:	90 81       	ld	r25, Z
     35e:	12 96       	adiw	r26, 0x02	; 2
     360:	8c 91       	ld	r24, X
     362:	80 95       	com	r24
     364:	89 23       	and	r24, r25
     366:	80 83       	st	Z, r24
	#else
	OWpin->SetDirection(pin_t::Input);
	#endif
	sei();
     368:	78 94       	sei
     36a:	9d e7       	ldi	r25, 0x7D	; 125
     36c:	91 50       	subi	r25, 0x01	; 1
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 3;
     36e:	09 f4       	brne	.+2      	; 0x372 <_Z7OWresetv+0x26>
     370:	4f c0       	rjmp	.+158    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     372:	8a e0       	ldi	r24, 0x0A	; 10
     374:	8a 95       	dec	r24
     376:	f1 f7       	brne	.-4      	; 0x374 <_Z7OWresetv+0x28>
     378:	00 c0       	rjmp	.+0      	; 0x37a <_Z7OWresetv+0x2e>
		_delay_us(2);
	} while (!
	#if PINS_STATIC
	pin_t::Read(OWpin)
     37a:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     37e:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
     382:	ed 91       	ld	r30, X+
     384:	fc 91       	ld	r31, X
     386:	11 97       	sbiw	r26, 0x01	; 1
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	20 81       	ld	r18, Z
	#else
	OWpin->SetDirection(pin_t::Input);
	#endif
	sei();
	// wait until the wire is high... just in case
	do {
     38c:	12 96       	adiw	r26, 0x02	; 2
     38e:	8c 91       	ld	r24, X
     390:	82 23       	and	r24, r18
     392:	61 f3       	breq	.-40     	; 0x36c <_Z7OWresetv+0x20>
	#else
	OWpin->Read()
	#endif
	);

	cli();
     394:	f8 94       	cli
	#if PINS_STATIC
	pin_t::Write(OWpin, false);
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     39c:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     3a0:	d1 de       	rcall	.-606    	; 0x144 <_ZN5pin_t5WriteEPKS_b>
     3a2:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     3a6:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     3aa:	97 de       	rcall	.-722    	; 0xda <_ZN5pin_t12SetDirectionEPKS_b.part.1>
	#if PINS_STATIC
	pin_t::SetDirection(OWpin, pin_t::Output);
	#else
	OWpin->SetDirection(pin_t::Output);
	#endif	// drive output low
	sei();
     3ac:	78 94       	sei
     3ae:	ef ec       	ldi	r30, 0xCF	; 207
     3b0:	f7 e0       	ldi	r31, 0x07	; 7
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <_Z7OWresetv+0x66>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <_Z7OWresetv+0x6c>
     3b8:	00 00       	nop
	_delay_us(500);
	cli();
     3ba:	f8 94       	cli
	#if PINS_STATIC
	pin_t::SetDirection(OWpin, pin_t::Input);
     3bc:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     3c0:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
     3c4:	ed 91       	ld	r30, X+
     3c6:	fc 91       	ld	r31, X
     3c8:	11 97       	sbiw	r26, 0x01	; 1
     3ca:	90 81       	ld	r25, Z
     3cc:	12 96       	adiw	r26, 0x02	; 2
     3ce:	8c 91       	ld	r24, X
     3d0:	80 95       	com	r24
     3d2:	89 23       	and	r24, r25
     3d4:	80 83       	st	Z, r24
     3d6:	87 ec       	ldi	r24, 0xC7	; 199
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <_Z7OWresetv+0x8e>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <_Z7OWresetv+0x94>
     3e0:	00 00       	nop
	OWpin->SetDirection(pin_t::Input);
	#endif	// allow it to float
	_delay_us(50);
	r = !
	#if PINS_STATIC
	pin_t::Read(OWpin);
     3e2:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     3e6:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	11 97       	sbiw	r26, 0x01	; 1
     3f0:	31 97       	sbiw	r30, 0x01	; 1
     3f2:	90 81       	ld	r25, Z
     3f4:	12 96       	adiw	r26, 0x02	; 2
     3f6:	8c 91       	ld	r24, X
     3f8:	98 23       	and	r25, r24
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	09 f0       	breq	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
	#else
	OWpin->Read();
	#endif
	sei();
     400:	78 94       	sei
     402:	e7 e6       	ldi	r30, 0x67	; 103
     404:	f6 e0       	ldi	r31, 0x06	; 6
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	08 95       	ret
	OWpin->SetDirection(pin_t::Input);
	#endif
	sei();
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 3;
     410:	83 e0       	ldi	r24, 0x03	; 3
	OWpin->Read();
	#endif
	sei();
	_delay_us(410);
	return r;
}
     412:	08 95       	ret

00000414 <_Z14readScratchPadPKhPh>:
	OWreset();
	OWskip();
	OWwrite(STARTCONVO);
}

void readScratchPad(const uint8_t* deviceAddress, uint8_t* scratchPad) {
     414:	cf 92       	push	r12
     416:	df 92       	push	r13
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
     426:	8b 01       	movw	r16, r22
	OWreset();
     428:	91 df       	rcall	.-222    	; 0x34c <_Z7OWresetv>
	OWselect(deviceAddress);
     42a:	ce 01       	movw	r24, r28
     42c:	60 de       	rcall	.-832    	; 0xee <_Z8OWselectPKh>
	OWwrite(READSCRATCH);
     42e:	8e eb       	ldi	r24, 0xBE	; 190
     430:	ac d4       	rcall	.+2392   	; 0xd8a <_Z7OWwritehh.constprop.21>
     432:	e8 01       	movw	r28, r16
     434:	68 01       	movw	r12, r16
     436:	89 e0       	ldi	r24, 0x09	; 9
     438:	c8 0e       	add	r12, r24
     43a:	d1 1c       	adc	r13, r1
	OWreset();
	OWskip();
	OWwrite(STARTCONVO);
}

void readScratchPad(const uint8_t* deviceAddress, uint8_t* scratchPad) {
     43c:	88 e0       	ldi	r24, 0x08	; 8
     43e:	e8 2e       	mov	r14, r24
     440:	f1 2c       	mov	r15, r1
//
// Read a byte
//
uint8_t OWread() {
	uint8_t bitMask;
	uint8_t r = 0;
     442:	10 e0       	ldi	r17, 0x00	; 0

	for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     444:	01 e0       	ldi	r16, 0x01	; 1
		if ( OWread_bit()) r |= bitMask;
     446:	01 df       	rcall	.-510    	; 0x24a <_Z10OWread_bitv>
     448:	81 11       	cpse	r24, r1
     44a:	10 2b       	or	r17, r16
//
uint8_t OWread() {
	uint8_t bitMask;
	uint8_t r = 0;

	for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     44c:	00 0f       	add	r16, r16
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	e8 1a       	sub	r14, r24
     452:	f1 08       	sbc	r15, r1
     454:	c1 f7       	brne	.-16     	; 0x446 <_Z14readScratchPadPKhPh+0x32>
	OWreset();
	OWselect(deviceAddress);
	OWwrite(READSCRATCH);
	for (uint8_t i = 0; i < 9; i++) {
		scratchPad[i] = OWread();
     456:	19 93       	st	Y+, r17

void readScratchPad(const uint8_t* deviceAddress, uint8_t* scratchPad) {
	OWreset();
	OWselect(deviceAddress);
	OWwrite(READSCRATCH);
	for (uint8_t i = 0; i < 9; i++) {
     458:	cc 16       	cp	r12, r28
     45a:	dd 06       	cpc	r13, r29
     45c:	79 f7       	brne	.-34     	; 0x43c <_Z14readScratchPadPKhPh+0x28>
		scratchPad[i] = OWread();
	}
	OWreset();
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
	OWselect(deviceAddress);
	OWwrite(READSCRATCH);
	for (uint8_t i = 0; i < 9; i++) {
		scratchPad[i] = OWread();
	}
	OWreset();
     46e:	6e cf       	rjmp	.-292    	; 0x34c <_Z7OWresetv>

00000470 <_Z19requestTemperaturesv>:
	writeScratchPad(deviceAddress, scratchPad);
}

// sends command for all devices on the bus to perform a temperature conversion
void requestTemperatures() {
	OWreset();
     470:	6d df       	rcall	.-294    	; 0x34c <_Z7OWresetv>
//
// Do a ROM skip
//
void OWskip()
{
	OWwrite(0xCC);           // Skip ROM
     472:	8c ec       	ldi	r24, 0xCC	; 204
     474:	8a d4       	rcall	.+2324   	; 0xd8a <_Z7OWwritehh.constprop.21>
	OWskip();
	OWwrite(STARTCONVO);
     476:	84 e4       	ldi	r24, 0x44	; 68
     478:	88 c4       	rjmp	.+2320   	; 0xd8a <_Z7OWwritehh.constprop.21>

0000047a <_Z11uart_puts_pPKc>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	fc 01       	movw	r30, r24
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) uart_putc(c);
     480:	84 91       	lpm	r24, Z
     482:	ef 01       	movw	r28, r30
     484:	21 96       	adiw	r28, 0x01	; 1
     486:	88 23       	and	r24, r24
     488:	19 f0       	breq	.+6      	; 0x490 <_Z11uart_puts_pPKc+0x16>
     48a:	16 de       	rcall	.-980    	; 0xb8 <_Z9uart_putch>
     48c:	fe 01       	movw	r30, r28
     48e:	f8 cf       	rjmp	.-16     	; 0x480 <_Z11uart_puts_pPKc+0x6>
}/* uart_puts_p */
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <_Z9uart_putsPKc>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
    while (*s) uart_putc(*s++);
     49c:	89 91       	ld	r24, Y+
     49e:	88 23       	and	r24, r24
     4a0:	11 f0       	breq	.+4      	; 0x4a6 <_Z9uart_putsPKc+0x10>
     4a2:	0a de       	rcall	.-1004   	; 0xb8 <_Z9uart_putch>
     4a4:	fb cf       	rjmp	.-10     	; 0x49c <_Z9uart_putsPKc+0x6>
}/* uart_puts */
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <_Z11uart_puts_EPKhh>:
#if ENABLE_UART_EXTENSIONS
/************************************************************************/
/*  Takes EEPROM chunk (pointer + size) and spits it out into serial    */
/************************************************************************/
void uart_puts_E(const uint8_t* e, uint8_t sz)
{
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	char buf[sz + 1];
	buf[sz] = '\0';
	eeprom_read_block((void*)buf, (const void*)e, sz);
	uart_puts(buf);
}
     4bc:	ed b6       	in	r14, 0x3d	; 61
     4be:	fe b6       	in	r15, 0x3e	; 62
/************************************************************************/
/*  Takes EEPROM chunk (pointer + size) and spits it out into serial    */
/************************************************************************/
void uart_puts_E(const uint8_t* e, uint8_t sz)
{
	char buf[sz + 1];
     4c0:	46 2f       	mov	r20, r22
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	9a 01       	movw	r18, r20
     4c6:	2f 5f       	subi	r18, 0xFF	; 255
     4c8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ca:	6d b7       	in	r22, 0x3d	; 61
     4cc:	7e b7       	in	r23, 0x3e	; 62
     4ce:	62 1b       	sub	r22, r18
     4d0:	73 0b       	sbc	r23, r19
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	7e bf       	out	0x3e, r23	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	6d bf       	out	0x3d, r22	; 61
     4dc:	0d b7       	in	r16, 0x3d	; 61
     4de:	1e b7       	in	r17, 0x3e	; 62
     4e0:	0f 5f       	subi	r16, 0xFF	; 255
     4e2:	1f 4f       	sbci	r17, 0xFF	; 255
	buf[sz] = '\0';
     4e4:	f8 01       	movw	r30, r16
     4e6:	e4 0f       	add	r30, r20
     4e8:	f5 1f       	adc	r31, r21
     4ea:	10 82       	st	Z, r1
	eeprom_read_block((void*)buf, (const void*)e, sz);
     4ec:	bc 01       	movw	r22, r24
     4ee:	c8 01       	movw	r24, r16
     4f0:	93 da       	rcall	.-2778   	; 0xfffffa18 <__eeprom_end+0xff7ef840>
	uart_puts(buf);
     4f2:	c8 01       	movw	r24, r16
     4f4:	d0 df       	rcall	.-96     	; 0x496 <_Z9uart_putsPKc>
}
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	fe be       	out	0x3e, r15	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	ed be       	out	0x3d, r14	; 61
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	08 95       	ret

0000050e <_Z9uart_peekv>:
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_peek(void)
{
    if ( UART_RxHead == UART_RxTail ) return UART_NO_DATA;
     50e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZL11UART_RxHead.lto_priv.30>
     512:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
     516:	98 17       	cp	r25, r24
     518:	89 f0       	breq	.+34     	; 0x53c <_Z9uart_peekv+0x2e>
    return (UART_LastRxError << 8) + UART_RxBuf[(UART_RxTail + 1) & UART_RX_BUFFER_MASK];
     51a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <_ZL16UART_LastRxError>
     51e:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	31 96       	adiw	r30, 0x01	; 1
     526:	ef 71       	andi	r30, 0x1F	; 31
     528:	ff 27       	eor	r31, r31
     52a:	e2 53       	subi	r30, 0x32	; 50
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	20 81       	ld	r18, Z
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	98 2f       	mov	r25, r24
     534:	88 27       	eor	r24, r24
     536:	82 0f       	add	r24, r18
     538:	91 1d       	adc	r25, r1
     53a:	08 95       	ret
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_peek(void)
{
    if ( UART_RxHead == UART_RxTail ) return UART_NO_DATA;
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	91 e0       	ldi	r25, 0x01	; 1
    return (UART_LastRxError << 8) + UART_RxBuf[(UART_RxTail + 1) & UART_RX_BUFFER_MASK];
}
     540:	08 95       	ret

00000542 <_Z9uart_getcv>:
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{
    unsigned char lastRxError;
    if ( UART_RxHead == UART_RxTail ) return UART_NO_DATA;
     542:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZL11UART_RxHead.lto_priv.30>
     546:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
     54a:	98 17       	cp	r25, r24
     54c:	b1 f0       	breq	.+44     	; 0x57a <_Z9uart_getcv+0x38>
    lastRxError = UART_LastRxError;
     54e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <_ZL16UART_LastRxError>
    UART_LastRxError = 0;
     552:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <_ZL16UART_LastRxError>
    UART_RxTail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     556:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
     55a:	9f 5f       	subi	r25, 0xFF	; 255
     55c:	9f 71       	andi	r25, 0x1F	; 31
     55e:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
    return (lastRxError << 8) + UART_RxBuf[UART_RxTail];
     562:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	e2 53       	subi	r30, 0x32	; 50
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	20 81       	ld	r18, Z
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	98 2f       	mov	r25, r24
     572:	88 27       	eor	r24, r24
     574:	82 0f       	add	r24, r18
     576:	91 1d       	adc	r25, r1
     578:	08 95       	ret
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{
    unsigned char lastRxError;
    if ( UART_RxHead == UART_RxTail ) return UART_NO_DATA;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	91 e0       	ldi	r25, 0x01	; 1
    lastRxError = UART_LastRxError;
    UART_LastRxError = 0;
    UART_RxTail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    return (lastRxError << 8) + UART_RxBuf[UART_RxTail];
}/* uart_getc */
     57e:	08 95       	ret

00000580 <_Z10soft_resetv>:
/************************************************************************/
/* Sending complete                                                     */
/************************************************************************/
bool uart_ready(void)
{
	return UART_TxHead == UART_TxTail;
     580:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <_ZL11UART_TxHead>
     584:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_ZL11UART_TxTail>

//Main

void soft_reset()
{
	while (!uart_ready()) _delay_ms(10);	//Make sure everything is sent
     588:	98 17       	cp	r25, r24
     58a:	39 f0       	breq	.+14     	; 0x59a <_Z10soft_resetv+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58c:	8f e3       	ldi	r24, 0x3F	; 63
     58e:	9c e9       	ldi	r25, 0x9C	; 156
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <_Z10soft_resetv+0x10>
     594:	00 c0       	rjmp	.+0      	; 0x596 <_Z10soft_resetv+0x16>
     596:	00 00       	nop
     598:	f3 cf       	rjmp	.-26     	; 0x580 <_Z10soft_resetv>
	cli();	//Disable interrupts, thus UART won't be able to receive commands before reset
     59a:	f8 94       	cli
	while (uart_getc() != UART_NO_DATA);	//Make sure we won't receive some partial commands once restarted (no delay needed due to previous line)
     59c:	d2 df       	rcall	.-92     	; 0x542 <_Z9uart_getcv>
     59e:	81 15       	cp	r24, r1
     5a0:	91 40       	sbci	r25, 0x01	; 1
     5a2:	e1 f7       	brne	.-8      	; 0x59c <_Z10soft_resetv+0x1c>
     5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <_Z10soft_resetv+0x24>

000005a6 <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	8f 93       	push	r24
     5b2:	9f 93       	push	r25
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
    unsigned char tmptail;


    if ( UART_TxHead != UART_TxTail) {
     5b8:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <_ZL11UART_TxHead>
     5bc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_ZL11UART_TxTail>
     5c0:	98 17       	cp	r25, r24
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     5c4:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <_ZL11UART_TxTail>
     5c8:	ef 5f       	subi	r30, 0xFF	; 255
     5ca:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
     5cc:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <_ZL11UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	e1 51       	subi	r30, 0x11	; 17
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	80 81       	ld	r24, Z
     5d8:	8c b9       	out	0x0c, r24	; 12
     5da:	01 c0       	rjmp	.+2      	; 0x5de <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     5dc:	55 98       	cbi	0x0a, 5	; 10
    }
}
     5de:	ff 91       	pop	r31
     5e0:	ef 91       	pop	r30
     5e2:	9f 91       	pop	r25
     5e4:	8f 91       	pop	r24
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	2f 93       	push	r18
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
     604:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
     606:	9c b1       	in	r25, 0x0c	; 12
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
#elif defined(FE1) && defined(DOR1) && defined(UPE1)
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
     608:	88 71       	andi	r24, 0x18	; 24
#endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     60a:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <_ZL11UART_RxHead.lto_priv.30>
     60e:	ef 5f       	subi	r30, 0xFF	; 255
     610:	ef 71       	andi	r30, 0x1F	; 31

    if ( tmphead == UART_RxTail ) {
     612:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
     616:	e2 17       	cp	r30, r18
     618:	39 f0       	breq	.+14     	; 0x628 <__vector_11+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     61a:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <_ZL11UART_RxHead.lto_priv.30>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	e2 53       	subi	r30, 0x32	; 50
     622:	ff 4f       	sbci	r31, 0xFF	; 255
     624:	90 83       	st	Z, r25
     626:	01 c0       	rjmp	.+2      	; 0x62a <__vector_11+0x3a>
    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     628:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
     62a:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <_ZL16UART_LastRxError>
     62e:	89 2b       	or	r24, r25
     630:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <_ZL16UART_LastRxError>
}
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <_Z11decodeFloatPKchh.part.0.lto_priv.22>:

float decodeFloat(const char* str, uint8_t max_len)
{
	return decodeFloat(str, 0, strnlen(str, max_len));
}
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
     648:	6f 92       	push	r6
     64a:	7f 92       	push	r7
     64c:	8f 92       	push	r8
     64e:	9f 92       	push	r9
     650:	af 92       	push	r10
     652:	bf 92       	push	r11
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	a4 2e       	mov	r10, r20
{
	if (len == 0) return NAN;
	static const float mult[] PROGMEM = { 100, 10, 1, 0.1, 0.01, 0.001 };
	str += start;
     666:	ec 01       	movw	r28, r24
     668:	c6 0f       	add	r28, r22
     66a:	d1 1d       	adc	r29, r1
	bool neg = false;
	if (str[0] == '-') { neg = true; str++; } //Get rid of signs
     66c:	88 81       	ld	r24, Y
     66e:	8d 32       	cpi	r24, 0x2D	; 45
     670:	21 f4       	brne	.+8      	; 0x67a <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x32>
     672:	21 96       	adiw	r28, 0x01	; 1
     674:	77 24       	eor	r7, r7
     676:	73 94       	inc	r7
     678:	04 c0       	rjmp	.+8      	; 0x682 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x3a>
	else { if (str[0] == '+') str++; };
     67a:	8b 32       	cpi	r24, 0x2B	; 43
     67c:	09 f4       	brne	.+2      	; 0x680 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x38>
     67e:	21 96       	adiw	r28, 0x01	; 1
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
{
	if (len == 0) return NAN;
	static const float mult[] PROGMEM = { 100, 10, 1, 0.1, 0.01, 0.001 };
	str += start;
	bool neg = false;
     680:	71 2c       	mov	r7, r1
     682:	fe 01       	movw	r30, r28
	if (str[0] == '-') { neg = true; str++; } //Get rid of signs
	else { if (str[0] == '+') str++; };
	uint8_t p, i;
	for (p = 0; p < len; p++) if (str[p] == '.') break; //Find decimal point (if present)
     684:	b1 2c       	mov	r11, r1
     686:	ba 14       	cp	r11, r10
     688:	29 f0       	breq	.+10     	; 0x694 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x4c>
     68a:	81 91       	ld	r24, Z+
     68c:	8e 32       	cpi	r24, 0x2E	; 46
     68e:	11 f0       	breq	.+4      	; 0x694 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x4c>
     690:	b3 94       	inc	r11
     692:	f9 cf       	rjmp	.-14     	; 0x686 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x3e>
	for (; p > 3; p--) str++; //Truncate string front
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	8b 15       	cp	r24, r11
     698:	18 f4       	brcc	.+6      	; 0x6a0 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x58>
     69a:	21 96       	adiw	r28, 0x01	; 1
     69c:	ba 94       	dec	r11
     69e:	fa cf       	rjmp	.-12     	; 0x694 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x4c>
	if (len - p > 4) len = p + 4; //Truncate string end
     6a0:	8b 2c       	mov	r8, r11
     6a2:	91 2c       	mov	r9, r1
     6a4:	8a 2d       	mov	r24, r10
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	88 19       	sub	r24, r8
     6aa:	99 09       	sbc	r25, r9
     6ac:	05 97       	sbiw	r24, 0x05	; 5
     6ae:	1c f0       	brlt	.+6      	; 0x6b6 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x6e>
     6b0:	34 e0       	ldi	r19, 0x04	; 4
     6b2:	a3 2e       	mov	r10, r19
     6b4:	ab 0c       	add	r10, r11
	str += start;
	bool neg = false;
	if (str[0] == '-') { neg = true; str++; } //Get rid of signs
	else { if (str[0] == '+') str++; };
	uint8_t p, i;
	for (p = 0; p < len; p++) if (str[p] == '.') break; //Find decimal point (if present)
     6b6:	00 e0       	ldi	r16, 0x00	; 0
     6b8:	10 e0       	ldi	r17, 0x00	; 0
	for (; p > 3; p--) str++; //Truncate string front
	if (len - p > 4) len = p + 4; //Truncate string end
	float b = 0;
     6ba:	c1 2c       	mov	r12, r1
     6bc:	d1 2c       	mov	r13, r1
     6be:	76 01       	movw	r14, r12
	for (i = 0; i < len; i++) { //Iterate through each digit and build the number using multipliers
     6c0:	0a 15       	cp	r16, r10
     6c2:	60 f5       	brcc	.+88     	; 0x71c <_Z11decodeFloatPKchh.part.0.lto_priv.22+0xd4>
		if (i == p) continue; //Skip point
     6c4:	b0 16       	cp	r11, r16
     6c6:	31 f1       	breq	.+76     	; 0x714 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0xcc>
		b += (str[i] - '0') * pgm_read_float(&(mult[((i < p) ? 3 : 2) + i - p]));
     6c8:	68 81       	ld	r22, Y
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	60 53       	subi	r22, 0x30	; 48
     6ce:	71 09       	sbc	r23, r1
     6d0:	07 2e       	mov	r0, r23
     6d2:	00 0c       	add	r0, r0
     6d4:	88 0b       	sbc	r24, r24
     6d6:	99 0b       	sbc	r25, r25
     6d8:	7c da       	rcall	.-2824   	; 0xfffffbd2 <__eeprom_end+0xff7ef9fa>
     6da:	0b 15       	cp	r16, r11
     6dc:	18 f0       	brcs	.+6      	; 0x6e4 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x9c>
     6de:	e2 e0       	ldi	r30, 0x02	; 2
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0xa0>
     6e4:	e3 e0       	ldi	r30, 0x03	; 3
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	e0 0f       	add	r30, r16
     6ea:	f1 1f       	adc	r31, r17
     6ec:	e8 19       	sub	r30, r8
     6ee:	f9 09       	sbc	r31, r9
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	ee 5a       	subi	r30, 0xAE	; 174
     6fa:	ff 4f       	sbci	r31, 0xFF	; 255
     6fc:	25 91       	lpm	r18, Z+
     6fe:	35 91       	lpm	r19, Z+
     700:	45 91       	lpm	r20, Z+
     702:	54 91       	lpm	r21, Z
     704:	f2 da       	rcall	.-2588   	; 0xfffffcea <__eeprom_end+0xff7efb12>
     706:	9b 01       	movw	r18, r22
     708:	ac 01       	movw	r20, r24
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	ca d9       	rcall	.-3180   	; 0xfffffaa4 <__eeprom_end+0xff7ef8cc>
     710:	6b 01       	movw	r12, r22
     712:	7c 01       	movw	r14, r24
     714:	0f 5f       	subi	r16, 0xFF	; 255
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	21 96       	adiw	r28, 0x01	; 1
     71a:	d2 cf       	rjmp	.-92     	; 0x6c0 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x78>
	}
	if (neg) b *= -1;
     71c:	c7 01       	movw	r24, r14
     71e:	b6 01       	movw	r22, r12
     720:	71 10       	cpse	r7, r1
     722:	90 58       	subi	r25, 0x80	; 128
	return b;
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	08 95       	ret

00000742 <_Z15l_decode_helperPcRh>:
	*p++ = ',';
}

//Returns true if I/O index is missing. Parses index into passed integer variable. Messes with string buffer!
bool l_decode_helper(char* p, uint8_t &i)
{
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24
     74c:	8b 01       	movw	r16, r22
     74e:	8f e9       	ldi	r24, 0x9F	; 159
     750:	9f e0       	ldi	r25, 0x0F	; 15
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <_Z15l_decode_helperPcRh+0x10>
     756:	00 c0       	rjmp	.+0      	; 0x758 <_Z15l_decode_helperPcRh+0x16>
     758:	00 00       	nop
	_delay_ms(1);
	p[0] = static_cast<char>(uart_getc());
     75a:	f3 de       	rcall	.-538    	; 0x542 <_Z9uart_getcv>
     75c:	88 83       	st	Y, r24
     75e:	ef e9       	ldi	r30, 0x9F	; 159
     760:	ff e0       	ldi	r31, 0x0F	; 15
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <_Z15l_decode_helperPcRh+0x20>
     766:	00 c0       	rjmp	.+0      	; 0x768 <_Z15l_decode_helperPcRh+0x26>
     768:	00 00       	nop
	_delay_ms(1);
	p[1] = static_cast<char>(uart_getc());
     76a:	eb de       	rcall	.-554    	; 0x542 <_Z9uart_getcv>
     76c:	89 83       	std	Y+1, r24	; 0x01
	if ((p[1] == ':') || (p[1] == '\r'))
     76e:	8a 33       	cpi	r24, 0x3A	; 58
     770:	11 f0       	breq	.+4      	; 0x776 <_Z15l_decode_helperPcRh+0x34>
     772:	8d 30       	cpi	r24, 0x0D	; 13
     774:	29 f4       	brne	.+10     	; 0x780 <_Z15l_decode_helperPcRh+0x3e>
	{
		i = ASCIIToNum(p[0]);
     776:	88 81       	ld	r24, Y
     778:	80 53       	subi	r24, 0x30	; 48
     77a:	f8 01       	movw	r30, r16
     77c:	80 83       	st	Z, r24
     77e:	1c c0       	rjmp	.+56     	; 0x7b8 <_Z15l_decode_helperPcRh+0x76>
     780:	8f e9       	ldi	r24, 0x9F	; 159
     782:	9f e0       	ldi	r25, 0x0F	; 15
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <_Z15l_decode_helperPcRh+0x42>
     788:	00 c0       	rjmp	.+0      	; 0x78a <_Z15l_decode_helperPcRh+0x48>
     78a:	00 00       	nop
	}
	else
	{
		_delay_ms(1);
		if (arg_check_helper(uart_getc())) return true;
     78c:	da de       	rcall	.-588    	; 0x542 <_Z9uart_getcv>
}

//Returns true if parameter c is not an argument separator character
bool arg_check_helper(unsigned int c)
{
	if (static_cast<char>(c) != ':')
     78e:	8a 33       	cpi	r24, 0x3A	; 58
     790:	29 f0       	breq	.+10     	; 0x79c <_Z15l_decode_helperPcRh+0x5a>
	{
		reportError(PSTR_L("Missing argument"));
     792:	8b e2       	ldi	r24, 0x2B	; 43
     794:	9e e1       	ldi	r25, 0x1E	; 30
     796:	93 d3       	rcall	.+1830   	; 0xebe <_Z11reportErrorPKc>
		i = ASCIIToNum(p[0]);
	}
	else
	{
		_delay_ms(1);
		if (arg_check_helper(uart_getc())) return true;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	15 c0       	rjmp	.+42     	; 0x7c6 <_Z15l_decode_helperPcRh+0x84>
		p[2] = '\0';
     79c:	1a 82       	std	Y+2, r1	; 0x02
	delete[] Data;
}

float decodeFloat(const char* str, uint8_t max_len)
{
	return decodeFloat(str, 0, strnlen(str, max_len));
     79e:	60 e2       	ldi	r22, 0x20	; 32
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	ce 01       	movw	r24, r28
     7a4:	fb d8       	rcall	.-3594   	; 0xfffff99c <__eeprom_end+0xff7ef7c4>
}
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
{
	if (len == 0) return NAN;
     7a6:	88 23       	and	r24, r24
     7a8:	49 f0       	breq	.+18     	; 0x7bc <_Z15l_decode_helperPcRh+0x7a>
     7aa:	48 2f       	mov	r20, r24
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	ce 01       	movw	r24, r28
     7b0:	4b df       	rcall	.-362    	; 0x648 <_Z11decodeFloatPKchh.part.0.lto_priv.22>
		i = decodeInt(p);
     7b2:	dc d9       	rcall	.-3144   	; 0xfffffb6c <__eeprom_end+0xff7ef994>
     7b4:	f8 01       	movw	r30, r16
     7b6:	60 83       	st	Z, r22
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <_Z15l_decode_helperPcRh+0x84>
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	80 ec       	ldi	r24, 0xC0	; 192
     7c2:	9f e7       	ldi	r25, 0x7F	; 127
     7c4:	f6 cf       	rjmp	.-20     	; 0x7b2 <_Z15l_decode_helperPcRh+0x70>
	}
	return false;
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <_Z9decodeIntPKchh>:
     7d0:	44 23       	and	r20, r20
     7d2:	11 f0       	breq	.+4      	; 0x7d8 <_Z9decodeIntPKchh+0x8>
     7d4:	39 df       	rcall	.-398    	; 0x648 <_Z11decodeFloatPKchh.part.0.lto_priv.22>
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <_Z9decodeIntPKchh+0x10>
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	80 ec       	ldi	r24, 0xC0	; 192
     7de:	9f e7       	ldi	r25, 0x7F	; 127
{
	return static_cast<int8_t>(decodeFloat(str));
}
int8_t decodeInt(const char* str, uint8_t start, uint8_t len)
{
	return static_cast<int8_t>(decodeFloat(str, start, len));
     7e0:	c5 d9       	rcall	.-3190   	; 0xfffffb6c <__eeprom_end+0xff7ef994>
     7e2:	86 2f       	mov	r24, r22
} // DECODE NUMBER
     7e4:	08 95       	ret

000007e6 <_Z3cmdc>:
{
	uart_putc('a');
}

void cmd(char first_letter)
{
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	a1 97       	sbiw	r28, 0x21	; 33
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
	char buf[32];
	switch (first_letter)
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	fc 01       	movw	r30, r24
     806:	e1 54       	subi	r30, 0x41	; 65
     808:	f1 09       	sbc	r31, r1
     80a:	e6 31       	cpi	r30, 0x16	; 22
     80c:	f1 05       	cpc	r31, r1
     80e:	08 f0       	brcs	.+2      	; 0x812 <_Z3cmdc+0x2c>
     810:	af c2       	rjmp	.+1374   	; 0xd70 <_Z3cmdc+0x58a>
     812:	ed 5e       	subi	r30, 0xED	; 237
     814:	ff 4f       	sbci	r31, 0xFF	; 255
     816:	09 94       	ijmp
	{
		case 'F':
			uart_puts("F:");
     818:	86 e9       	ldi	r24, 0x96	; 150
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	3c de       	rcall	.-904    	; 0x496 <_Z9uart_putsPKc>
			if (static_cast<char>(cmd_helper(buf, arraySize(buf))) == '1')	//cmd_helper returns UART_NO_DATA == 0x0100 --> 0x00 == '\0' only
     81e:	ce 01       	movw	r24, r28
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	5b d3       	rcall	.+1718   	; 0xeda <_Z10cmd_helperPch.constprop.6>
     824:	81 33       	cpi	r24, 0x31	; 49
     826:	59 f4       	brne	.+22     	; 0x83e <_Z3cmdc+0x58>
			{
				eeprom_write_byte(&is_first_run, 0);
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	86 e0       	ldi	r24, 0x06	; 6
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	2c d9       	rcall	.-3496   	; 0xfffffa88 <__eeprom_end+0xff7ef8b0>
				uart_puts(ok);
     830:	80 e9       	ldi	r24, 0x90	; 144
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	30 de       	rcall	.-928    	; 0x496 <_Z9uart_putsPKc>
				uart_puts(line_feed);
     836:	83 e9       	ldi	r24, 0x93	; 147
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	2d de       	rcall	.-934    	; 0x496 <_Z9uart_putsPKc>
     83c:	06 c0       	rjmp	.+12     	; 0x84a <_Z3cmdc+0x64>
				soft_reset();	//Makes all the code below unreachable without else
				__builtin_unreachable();
			}
			uart_puts("False");
     83e:	89 e9       	ldi	r24, 0x99	; 153
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	56 c1       	rjmp	.+684    	; 0xaf0 <_Z3cmdc+0x30a>
			break;
		case 'A':
			uart_puts_P("A:Resetting...\r\n");
     844:	8c e6       	ldi	r24, 0x6C	; 108
     846:	9e e1       	ldi	r25, 0x1E	; 30
     848:	18 de       	rcall	.-976    	; 0x47a <_Z11uart_puts_pPKc>
			soft_reset();
     84a:	9a de       	rcall	.-716    	; 0x580 <_Z10soft_resetv>
			__builtin_unreachable();
			break;
		case 'P': //Show presence
			uart_puts("P:");
     84c:	8f e9       	ldi	r24, 0x9F	; 159
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	22 de       	rcall	.-956    	; 0x496 <_Z9uart_putsPKc>
			//dummy();
			flushSerial();
     852:	21 d3       	rcall	.+1602   	; 0xe96 <_Z11flushSerialv>
			uart_puts_E(dev_name, arraySize(dev_name));
     854:	61 e1       	ldi	r22, 0x11	; 17
     856:	85 ef       	ldi	r24, 0xF5	; 245
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	28 de       	rcall	.-944    	; 0x4ac <_Z11uart_puts_EPKhh>
     85c:	4a c1       	rjmp	.+660    	; 0xaf2 <_Z3cmdc+0x30c>
			break;
		case 'H':
		{
			uart_puts("H:");
     85e:	82 ea       	ldi	r24, 0xA2	; 162
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	19 de       	rcall	.-974    	; 0x496 <_Z9uart_putsPKc>
     864:	05 e8       	ldi	r16, 0x85	; 133
     866:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i = 0; i < sizeof(DEVICE_DESC); i += sizeof(txt_in1)) uart_puts_E(dev_desc + i, sizeof(txt_in1));
     868:	60 e1       	ldi	r22, 0x10	; 16
     86a:	c8 01       	movw	r24, r16
     86c:	1f de       	rcall	.-962    	; 0x4ac <_Z11uart_puts_EPKhh>
     86e:	00 5f       	subi	r16, 0xF0	; 240
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	05 3f       	cpi	r16, 0xF5	; 245
     876:	12 07       	cpc	r17, r18
     878:	b9 f7       	brne	.-18     	; 0x868 <_Z3cmdc+0x82>
     87a:	3b c1       	rjmp	.+630    	; 0xaf2 <_Z3cmdc+0x30c>
			break;
		}
		case 'L':	//Signal label. L:{I/O/T}:#[#]:"<=16"\r[\n]; L:{A=E}[:{I/O/T}:#[#]][\r[\n]]
		{
			uart_puts("L:");
     87c:	85 ea       	ldi	r24, 0xA5	; 165
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0a de       	rcall	.-1004   	; 0x496 <_Z9uart_putsPKc>
     882:	8f e9       	ldi	r24, 0x9F	; 159
     884:	9f e0       	ldi	r25, 0x0F	; 15
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <_Z3cmdc+0xa0>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <_Z3cmdc+0xa6>
     88c:	00 00       	nop
			_delay_ms(1);
			if (arg_check_helper(uart_getc())) break;
     88e:	59 de       	rcall	.-846    	; 0x542 <_Z9uart_getcv>
}

//Returns true if parameter c is not an argument separator character
bool arg_check_helper(unsigned int c)
{
	if (static_cast<char>(c) != ':')
     890:	8a 33       	cpi	r24, 0x3A	; 58
     892:	99 f4       	brne	.+38     	; 0x8ba <_Z3cmdc+0xd4>
     894:	32 c1       	rjmp	.+612    	; 0xafa <_Z3cmdc+0x314>
     896:	ef e9       	ldi	r30, 0x9F	; 159
     898:	ff e0       	ldi	r31, 0x0F	; 15
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <_Z3cmdc+0xb4>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <_Z3cmdc+0xba>
     8a0:	00 00       	nop
					*p = '\0';
					uart_puts(buf);
					break;
				}
				_delay_ms(1);
				a = static_cast<char>(uart_getc());		//Get name of specified signal
     8a2:	4f de       	rcall	.-866    	; 0x542 <_Z9uart_getcv>
     8a4:	18 2f       	mov	r17, r24
     8a6:	8f e9       	ldi	r24, 0x9F	; 159
     8a8:	9f e0       	ldi	r25, 0x0F	; 15
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <_Z3cmdc+0xc4>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <_Z3cmdc+0xca>
     8b0:	00 00       	nop
				_delay_ms(1);
				if (arg_check_helper(uart_getc())) break;
     8b2:	47 de       	rcall	.-882    	; 0x542 <_Z9uart_getcv>
}

//Returns true if parameter c is not an argument separator character
bool arg_check_helper(unsigned int c)
{
	if (static_cast<char>(c) != ':')
     8b4:	8a 33       	cpi	r24, 0x3A	; 58
     8b6:	09 f4       	brne	.+2      	; 0x8ba <_Z3cmdc+0xd4>
     8b8:	47 c1       	rjmp	.+654    	; 0xb48 <_Z3cmdc+0x362>
	{
		reportError(PSTR_L("Missing argument"));
     8ba:	8b e2       	ldi	r24, 0x2B	; 43
     8bc:	9e e1       	ldi	r25, 0x1E	; 30
     8be:	f4 c0       	rjmp	.+488    	; 0xaa8 <_Z3cmdc+0x2c2>
			uart_puts(ok);
			break;
		}
		case 'I': //Input inversion
		{
			uart_puts("I:");
     8c0:	88 ea       	ldi	r24, 0xA8	; 168
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	e8 dd       	rcall	.-1072   	; 0x496 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	07 d3       	rcall	.+1550   	; 0xeda <_Z10cmd_helperPch.constprop.6>
			if (c == UART_NO_DATA) break;
     8cc:	81 15       	cp	r24, r1
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	9f 07       	cpc	r25, r31
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <_Z3cmdc+0xf0>
     8d4:	0e c1       	rjmp	.+540    	; 0xaf2 <_Z3cmdc+0x30c>
			char a = (*buf == ':') ? *(buf + 1) : *buf;
     8d6:	49 81       	ldd	r20, Y+1	; 0x01
     8d8:	4a 33       	cpi	r20, 0x3A	; 58
     8da:	09 f4       	brne	.+2      	; 0x8de <_Z3cmdc+0xf8>
     8dc:	4a 81       	ldd	r20, Y+2	; 0x02
     8de:	50 e0       	ldi	r21, 0x00	; 0
			if (static_cast<char>(c) == 'O')
     8e0:	8f 34       	cpi	r24, 0x4F	; 79
     8e2:	71 f4       	brne	.+28     	; 0x900 <_Z3cmdc+0x11a>
			{
				if (cmd_helper_2(&output_inv_buf, buf, arraySize(buf), a, arraySize(output_pins))) break;
     8e4:	25 e0       	ldi	r18, 0x05	; 5
     8e6:	be 01       	movw	r22, r28
     8e8:	6f 5f       	subi	r22, 0xFF	; 255
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	8e e9       	ldi	r24, 0x9E	; 158
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	fb d3       	rcall	.+2038   	; 0x10e8 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>
     8f2:	81 11       	cpse	r24, r1
     8f4:	fe c0       	rjmp	.+508    	; 0xaf2 <_Z3cmdc+0x30c>
				EEPROM_WRITE_INPUTS(outputs_inverted, output_inv_buf); //Buffer is never changed outside of this routine
     8f6:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <_ZL14output_inv_buf>
     8fa:	84 e8       	ldi	r24, 0x84	; 132
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	f5 c0       	rjmp	.+490    	; 0xaea <_Z3cmdc+0x304>
			}
			else
			{
				if (cmd_helper_2(&input_inv_buf, buf, arraySize(buf), a, arraySize(input_pins))) break;
     900:	27 e0       	ldi	r18, 0x07	; 7
     902:	be 01       	movw	r22, r28
     904:	6f 5f       	subi	r22, 0xFF	; 255
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	8d e9       	ldi	r24, 0x9D	; 157
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	ed d3       	rcall	.+2010   	; 0x10e8 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>
     90e:	81 11       	cpse	r24, r1
     910:	f0 c0       	rjmp	.+480    	; 0xaf2 <_Z3cmdc+0x30c>
				EEPROM_WRITE_INPUTS(inputs_inverted, input_inv_buf); //Buffer is never changed outside of this routine
     912:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <_ZL13input_inv_buf>
     916:	83 e8       	ldi	r24, 0x83	; 131
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	e7 c0       	rjmp	.+462    	; 0xaea <_Z3cmdc+0x304>
			uart_puts(ok);
			break;
		}
		case 'V': //Manual output override
		{
			uart_puts("V:");
     91c:	8b ea       	ldi	r24, 0xAB	; 171
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	ba dd       	rcall	.-1164   	; 0x496 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	d9 d2       	rcall	.+1458   	; 0xeda <_Z10cmd_helperPch.constprop.6>
			if (c == UART_NO_DATA) break;
     928:	81 15       	cp	r24, r1
     92a:	21 e0       	ldi	r18, 0x01	; 1
     92c:	92 07       	cpc	r25, r18
     92e:	09 f4       	brne	.+2      	; 0x932 <_Z3cmdc+0x14c>
     930:	e0 c0       	rjmp	.+448    	; 0xaf2 <_Z3cmdc+0x30c>
			if (cmd_helper_2(&override_comapre_buf, buf, arraySize(buf), c, arraySize(output_pins))) break;
     932:	25 e0       	ldi	r18, 0x05	; 5
     934:	ac 01       	movw	r20, r24
     936:	be 01       	movw	r22, r28
     938:	6f 5f       	subi	r22, 0xFF	; 255
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	8c e9       	ldi	r24, 0x9C	; 156
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	d3 d3       	rcall	.+1958   	; 0x10e8 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>
     942:	81 11       	cpse	r24, r1
     944:	d6 c0       	rjmp	.+428    	; 0xaf2 <_Z3cmdc+0x30c>
			EEPROM_WRITE_OUTPUTS(manual_override, override_comapre_buf); //Buffer is never changed outside of this routine
     946:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <_ZL20override_comapre_buf>
     94a:	82 e8       	ldi	r24, 0x82	; 130
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	cd c0       	rjmp	.+410    	; 0xaea <_Z3cmdc+0x304>
			uart_puts(ok);
			break;
		}
		case 'N': //Normal input state
		{
			uart_puts("N:");
     950:	8e ea       	ldi	r24, 0xAE	; 174
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	a0 dd       	rcall	.-1216   	; 0x496 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	bf d2       	rcall	.+1406   	; 0xeda <_Z10cmd_helperPch.constprop.6>
			if (c == UART_NO_DATA) break;
     95c:	81 15       	cp	r24, r1
     95e:	31 e0       	ldi	r19, 0x01	; 1
     960:	93 07       	cpc	r25, r19
     962:	09 f4       	brne	.+2      	; 0x966 <_Z3cmdc+0x180>
     964:	c6 c0       	rjmp	.+396    	; 0xaf2 <_Z3cmdc+0x30c>
			if (cmd_helper_2(&input_compare_buf, buf, arraySize(buf), c, arraySize(input_pins))) break;
     966:	27 e0       	ldi	r18, 0x07	; 7
     968:	ac 01       	movw	r20, r24
     96a:	be 01       	movw	r22, r28
     96c:	6f 5f       	subi	r22, 0xFF	; 255
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	8b e9       	ldi	r24, 0x9B	; 155
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	b9 d3       	rcall	.+1906   	; 0x10e8 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>
     976:	81 11       	cpse	r24, r1
     978:	bc c0       	rjmp	.+376    	; 0xaf2 <_Z3cmdc+0x30c>
			EEPROM_WRITE_INPUTS(input_normal, input_compare_buf); //Buffer is never changed outside of this routine
     97a:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <_ZL17input_compare_buf>
     97e:	81 e8       	ldi	r24, 0x81	; 129
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	b3 c0       	rjmp	.+358    	; 0xaea <_Z3cmdc+0x304>
			uart_puts(ok);
			break;
		}
		case 'M': //Map output to input
		{
			uart_puts("M:");
     984:	81 eb       	ldi	r24, 0xB1	; 177
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	86 dd       	rcall	.-1268   	; 0x496 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
     98a:	ce 01       	movw	r24, r28
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	a5 d2       	rcall	.+1354   	; 0xeda <_Z10cmd_helperPch.constprop.6>
			if (c == UART_NO_DATA) break;
     990:	81 15       	cp	r24, r1
     992:	e1 e0       	ldi	r30, 0x01	; 1
     994:	9e 07       	cpc	r25, r30
     996:	09 f4       	brne	.+2      	; 0x99a <_Z3cmdc+0x1b4>
     998:	ac c0       	rjmp	.+344    	; 0xaf2 <_Z3cmdc+0x30c>
			if (cmd_helper_3(mapping_compare_buf, arraySize(mapping_compare_buf), buf, arraySize(buf), c, auto_on_mapping)) break;
     99a:	0a e7       	ldi	r16, 0x7A	; 122
     99c:	10 e0       	ldi	r17, 0x00	; 0
     99e:	9c 01       	movw	r18, r24
     9a0:	ae 01       	movw	r20, r28
     9a2:	4f 5f       	subi	r20, 0xFF	; 255
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
     9a6:	67 e0       	ldi	r22, 0x07	; 7
     9a8:	84 e9       	ldi	r24, 0x94	; 148
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	14 c0       	rjmp	.+40     	; 0x9d6 <_Z3cmdc+0x1f0>
			uart_puts(ok);
			break;
		}
		case 'G':
		{
			uart_puts("G:");
     9ae:	84 eb       	ldi	r24, 0xB4	; 180
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	71 dd       	rcall	.-1310   	; 0x496 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
     9b4:	ce 01       	movw	r24, r28
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	90 d2       	rcall	.+1312   	; 0xeda <_Z10cmd_helperPch.constprop.6>
			if (c == UART_NO_DATA) break;
     9ba:	81 15       	cp	r24, r1
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	9f 07       	cpc	r25, r31
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <_Z3cmdc+0x1de>
     9c2:	97 c0       	rjmp	.+302    	; 0xaf2 <_Z3cmdc+0x30c>
			if (cmd_helper_3(temp_mapping_buf, arraySize(temp_mapping_buf), buf, arraySize(buf), c, temp_auto_mapping)) break;
     9c4:	02 e7       	ldi	r16, 0x72	; 114
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	9c 01       	movw	r18, r24
     9ca:	ae 01       	movw	r20, r28
     9cc:	4f 5f       	subi	r20, 0xFF	; 255
     9ce:	5f 4f       	sbci	r21, 0xFF	; 255
     9d0:	68 e0       	ldi	r22, 0x08	; 8
     9d2:	8c e8       	ldi	r24, 0x8C	; 140
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	d8 d2       	rcall	.+1456   	; 0xf88 <_Z12cmd_helper_3PahPchjPh.constprop.2>
     9d8:	81 11       	cpse	r24, r1
     9da:	8b c0       	rjmp	.+278    	; 0xaf2 <_Z3cmdc+0x30c>
     9dc:	87 c0       	rjmp	.+270    	; 0xaec <_Z3cmdc+0x306>
			uart_puts(ok);
			break;
		}
		case 'R': //Read
		{
			uart_puts("R:"); //Header is common for all modes
     9de:	87 eb       	ldi	r24, 0xB7	; 183
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	59 dd       	rcall	.-1358   	; 0x496 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
     9e4:	ce 01       	movw	r24, r28
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	78 d2       	rcall	.+1264   	; 0xeda <_Z10cmd_helperPch.constprop.6>
     9ea:	8c 01       	movw	r16, r24
			if (c == UART_NO_DATA) break;
     9ec:	81 15       	cp	r24, r1
     9ee:	91 40       	sbci	r25, 0x01	; 1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <_Z3cmdc+0x20e>
     9f2:	7f c0       	rjmp	.+254    	; 0xaf2 <_Z3cmdc+0x30c>
			if (*buf == ':') strrmv(buf, 1);
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	8a 33       	cpi	r24, 0x3A	; 58
     9f8:	19 f4       	brne	.+6      	; 0xa00 <_Z3cmdc+0x21a>
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	06 d2       	rcall	.+1036   	; 0xe0c <_Z6strrmvPch.constprop.14>
	while (str < end) if (!isNumeric(*str++)) return false;
	return true;
}
bool isNumeric(const char* str, uint8_t max_len)
{
	return isNumeric(str, 0_ui8, strnlen(str, max_len));
     a00:	60 e2       	ldi	r22, 0x20	; 32
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	ce 01       	movw	r24, r28
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	c9 d7       	rcall	.+3986   	; 0x199c <strnlen>
#include <stdlib.h>

bool isNumeric(const char* str, uint8_t start, uint8_t len)
{
	str += start;
	const char* end = str + len;
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	4c 0f       	add	r20, r28
     a10:	5d 1f       	adc	r21, r29
     a12:	48 0f       	add	r20, r24
     a14:	51 1d       	adc	r21, r1
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	fc 01       	movw	r30, r24
	while (str < end) if (!isNumeric(*str++)) return false;
     a1c:	84 17       	cp	r24, r20
     a1e:	95 07       	cpc	r25, r21
     a20:	08 f0       	brcs	.+2      	; 0xa24 <_Z3cmdc+0x23e>
     a22:	37 c1       	rjmp	.+622    	; 0xc92 <_Z3cmdc+0x4ac>
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	20 81       	ld	r18, Z
     a28:	20 53       	subi	r18, 0x30	; 48
     a2a:	2a 30       	cpi	r18, 0x0A	; 10
     a2c:	b0 f3       	brcs	.-20     	; 0xa1a <_Z3cmdc+0x234>
			if (!isNumeric(buf, arraySize(buf)))
			{
				reportError(PSTR_L("Out of range"));
     a2e:	8d e4       	ldi	r24, 0x4D	; 77
     a30:	9e e1       	ldi	r25, 0x1E	; 30
     a32:	3a c0       	rjmp	.+116    	; 0xaa8 <_Z3cmdc+0x2c2>
			break;
		}
		case 'O': //Turn output on
		{
			//Detect explicit on/off flag
			uart_puts("O:");
     a34:	8a eb       	ldi	r24, 0xBA	; 186
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	2e dd       	rcall	.-1444   	; 0x496 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	4d d2       	rcall	.+1178   	; 0xeda <_Z10cmd_helperPch.constprop.6>
			if (c == UART_NO_DATA) break; //Error-handling is inside of the helper routine
     a40:	81 15       	cp	r24, r1
     a42:	31 e0       	ldi	r19, 0x01	; 1
     a44:	93 07       	cpc	r25, r19
     a46:	09 f4       	brne	.+2      	; 0xa4a <_Z3cmdc+0x264>
     a48:	54 c0       	rjmp	.+168    	; 0xaf2 <_Z3cmdc+0x30c>
			if (static_cast<char>(c) == 'E')
     a4a:	85 34       	cpi	r24, 0x45	; 69
     a4c:	51 f4       	brne	.+20     	; 0xa62 <_Z3cmdc+0x27c>
			{
				intToBit(EEPROM_READ_OUTPUTS(output_last), buf);
     a4e:	81 e7       	ldi	r24, 0x71	; 113
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	f2 d7       	rcall	.+4068   	; 0x1a38 <eeprom_read_byte>
     a54:	be 01       	movw	r22, r28
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
			else
			{
				intToBit(input_state_buf, buf);
				uart_puts(buf);
				uart_putc(':');
				intToBit(output_compare_buf, buf);
     a5a:	02 d2       	rcall	.+1028   	; 0xe60 <_Z8intToBitIhEvT_Pch.constprop.5>
				uart_puts(buf);
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	47 c0       	rjmp	.+142    	; 0xaf0 <_Z3cmdc+0x30a>
			{
				intToBit(EEPROM_READ_OUTPUTS(output_last), buf);
				uart_puts(buf);
				break;
			}
			if (*buf == ':') strrmv(buf, 1);
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	8a 33       	cpi	r24, 0x3A	; 58
     a66:	19 f4       	brne	.+6      	; 0xa6e <_Z3cmdc+0x288>
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	cf d1       	rcall	.+926    	; 0xe0c <_Z6strrmvPch.constprop.14>
			//Parse index:state
			uint8_t l = strnlen(buf, sizeof(buf));
     a6e:	60 e2       	ldi	r22, 0x20	; 32
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	92 d7       	rcall	.+3876   	; 0x199c <strnlen>
     a78:	fe 01       	movw	r30, r28
     a7a:	31 96       	adiw	r30, 0x01	; 1
{
	return arraySearch(arr, val, len, 0);
} // arraySearch
template<typename T> uint8_t arraySearch(const T* arr, T val, uint8_t len, uint8_t start)
{
	for (uint8_t i = start; i < len; ++i) if (arr[i] == val) return i;
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	08 17       	cp	r16, r24
     a80:	88 f4       	brcc	.+34     	; 0xaa4 <_Z3cmdc+0x2be>
     a82:	91 91       	ld	r25, Z+
     a84:	9a 33       	cpi	r25, 0x3A	; 58
     a86:	11 f0       	breq	.+4      	; 0xa8c <_Z3cmdc+0x2a6>
     a88:	0f 5f       	subi	r16, 0xFF	; 255
     a8a:	f9 cf       	rjmp	.-14     	; 0xa7e <_Z3cmdc+0x298>
			uint8_t i = arraySearch(buf, ':', l);
			if (i < l)
			{
				l = decodeInt(buf, 0, i);	//index goes first
     a8c:	40 2f       	mov	r20, r16
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	9d de       	rcall	.-710    	; 0x7d0 <_Z9decodeIntPKchh>
     a96:	18 2f       	mov	r17, r24
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
     a98:	85 30       	cpi	r24, 0x05	; 5
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <_Z3cmdc+0x2b8>
     a9c:	29 c1       	rjmp	.+594    	; 0xcf0 <_Z3cmdc+0x50a>
	{
		if (msg) reportError(PSTR_L("Illegal index"));
     a9e:	8d e7       	ldi	r24, 0x7D	; 125
     aa0:	9e e1       	ldi	r25, 0x1E	; 30
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <_Z3cmdc+0x2c2>
				l = decodeInt(buf, 0, i);	//index goes first
				if (check_index_helper(l, arraySize(output_pins))) break;
			}
			else
			{
				reportError(PSTR_L("Missing argument"));
     aa4:	8c e3       	ldi	r24, 0x3C	; 60
     aa6:	9e e1       	ldi	r25, 0x1E	; 30
     aa8:	0a d2       	rcall	.+1044   	; 0xebe <_Z11reportErrorPKc>
     aaa:	23 c0       	rjmp	.+70     	; 0xaf2 <_Z3cmdc+0x30c>
			uart_puts(ok);
			break;
		}
		case 'T':
		{
			uart_puts("T:");
     aac:	8d eb       	ldi	r24, 0xBD	; 189
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	f2 dc       	rcall	.-1564   	; 0x496 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, sizeof(buf));
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	11 d2       	rcall	.+1058   	; 0xeda <_Z10cmd_helperPch.constprop.6>
			if (c == UART_NO_DATA) break;
     ab8:	81 15       	cp	r24, r1
     aba:	e1 e0       	ldi	r30, 0x01	; 1
     abc:	9e 07       	cpc	r25, r30
     abe:	c9 f0       	breq	.+50     	; 0xaf2 <_Z3cmdc+0x30c>
			if (static_cast<char>(c) == 'A')
     ac0:	81 34       	cpi	r24, 0x41	; 65
     ac2:	59 f4       	brne	.+22     	; 0xada <_Z3cmdc+0x2f4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     ac4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <_ZL13temp_high_buf>
     ac8:	4a e0       	ldi	r20, 0x0A	; 10
     aca:	be 01       	movw	r22, r28
     acc:	6f 5f       	subi	r22, 0xFF	; 255
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	08 2e       	mov	r0, r24
     ad2:	00 0c       	add	r0, r0
     ad4:	99 0b       	sbc	r25, r25
     ad6:	6d d7       	rcall	.+3802   	; 0x19b2 <__itoa_ncheck>
     ad8:	c1 cf       	rjmp	.-126    	; 0xa5c <_Z3cmdc+0x276>
				itoa(temp_high_buf, buf, 10);
				uart_puts(buf);
			}
			else
			{
				temp_high_buf = decodeInt(buf);
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	80 d1       	rcall	.+768    	; 0xde0 <_Z9decodeIntPKch.constprop.15>
     ae0:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <_ZL13temp_high_buf>
				eeprom_update_byte(&temp_high, *reinterpret_cast<uint8_t*>(&temp_high_buf));
     ae4:	68 2f       	mov	r22, r24
     ae6:	80 e7       	ldi	r24, 0x70	; 112
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	bd d7       	rcall	.+3962   	; 0x1a66 <eeprom_update_byte>
				uart_puts(ok);
     aec:	80 e9       	ldi	r24, 0x90	; 144
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	d2 dc       	rcall	.-1628   	; 0x496 <_Z9uart_putsPKc>
			break;
		}
		default:
		return;
	}
	uart_puts(line_feed);
     af2:	83 e9       	ldi	r24, 0x93	; 147
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	cf dc       	rcall	.-1634   	; 0x496 <_Z9uart_putsPKc>
     af8:	3b c1       	rjmp	.+630    	; 0xd70 <_Z3cmdc+0x58a>
     afa:	8f e9       	ldi	r24, 0x9F	; 159
     afc:	9f e0       	ldi	r25, 0x0F	; 15
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <_Z3cmdc+0x318>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <_Z3cmdc+0x31e>
     b04:	00 00       	nop
		{
			uart_puts("L:");
			_delay_ms(1);
			if (arg_check_helper(uart_getc())) break;
			_delay_ms(1);
			char a = static_cast<char>(uart_getc());
     b06:	1d dd       	rcall	.-1478   	; 0x542 <_Z9uart_getcv>
     b08:	08 2f       	mov	r16, r24
     b0a:	ef e9       	ldi	r30, 0x9F	; 159
     b0c:	ff e0       	ldi	r31, 0x0F	; 15
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <_Z3cmdc+0x328>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <_Z3cmdc+0x32e>
     b14:	00 00       	nop
			_delay_ms(1);
			if (a == 'A')	//A: reading mode (EEPROM)
     b16:	81 34       	cpi	r24, 0x41	; 65
     b18:	91 f4       	brne	.+36     	; 0xb3e <_Z3cmdc+0x358>
			{
				if (static_cast<char>(uart_getc()) != ':')	//No arguments but E: get number of signals monitored
     b1a:	13 dd       	rcall	.-1498   	; 0x542 <_Z9uart_getcv>
     b1c:	8a 33       	cpi	r24, 0x3A	; 58
     b1e:	09 f4       	brne	.+2      	; 0xb22 <_Z3cmdc+0x33c>
     b20:	ba ce       	rjmp	.-652    	; 0x896 <_Z3cmdc+0xb0>
				{
					flushSerial();
     b22:	b9 d1       	rcall	.+882    	; 0xe96 <_Z11flushSerialv>

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
	*p++ = NumToASCII(n % 10_ui8);
     b24:	87 e3       	ldi	r24, 0x37	; 55
     b26:	89 83       	std	Y+1, r24	; 0x01
	*p++ = ',';
     b28:	8c e2       	ldi	r24, 0x2C	; 44
     b2a:	8a 83       	std	Y+2, r24	; 0x02

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
	*p++ = NumToASCII(n % 10_ui8);
     b2c:	95 e3       	ldi	r25, 0x35	; 53
     b2e:	9b 83       	std	Y+3, r25	; 0x03
	*p++ = ',';
     b30:	8c 83       	std	Y+4, r24	; 0x04
				{
					flushSerial();
					char* p = buf;
					l_helper(p, arraySize(input_pins));
					l_helper(p, arraySize(output_pins));
					*p++ = NumToASCII(ow_count);
     b32:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_ZL8ow_count>
     b36:	80 5d       	subi	r24, 0xD0	; 208
     b38:	8d 83       	std	Y+5, r24	; 0x05
					*p = '\0';
     b3a:	1e 82       	std	Y+6, r1	; 0x06
     b3c:	8f cf       	rjmp	.-226    	; 0xa5c <_Z3cmdc+0x276>
				if (static_cast<char>(uart_peek()) == '\n') uart_getc();
				eeprom_read_block((void*)buf, (void*)l_switch_helper(a, i), sizeof(txt_in1));
				uart_puts(buf);
				break;
			}
			if (arg_check_helper(uart_getc())) break;
     b3e:	01 dd       	rcall	.-1534   	; 0x542 <_Z9uart_getcv>
}

//Returns true if parameter c is not an argument separator character
bool arg_check_helper(unsigned int c)
{
	if (static_cast<char>(c) != ':')
     b40:	8a 33       	cpi	r24, 0x3A	; 58
     b42:	09 f0       	breq	.+2      	; 0xb46 <_Z3cmdc+0x360>
     b44:	ba ce       	rjmp	.-652    	; 0x8ba <_Z3cmdc+0xd4>
     b46:	3b c0       	rjmp	.+118    	; 0xbbe <_Z3cmdc+0x3d8>
				_delay_ms(1);
				a = static_cast<char>(uart_getc());		//Get name of specified signal
				_delay_ms(1);
				if (arg_check_helper(uart_getc())) break;
				uint8_t i;
				if (l_decode_helper(buf, i)) break;
     b48:	be 01       	movw	r22, r28
     b4a:	6f 5d       	subi	r22, 0xDF	; 223
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	f7 dd       	rcall	.-1042   	; 0x742 <_Z15l_decode_helperPcRh>
     b54:	81 11       	cpse	r24, r1
     b56:	cd cf       	rjmp	.-102    	; 0xaf2 <_Z3cmdc+0x30c>
     b58:	ef e9       	ldi	r30, 0x9F	; 159
     b5a:	ff e0       	ldi	r31, 0x0F	; 15
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <_Z3cmdc+0x376>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <_Z3cmdc+0x37c>
     b62:	00 00       	nop
				_delay_ms(1);
				if (static_cast<char>(uart_peek()) == '\n') uart_getc();
     b64:	d4 dc       	rcall	.-1624   	; 0x50e <_Z9uart_peekv>
     b66:	8a 30       	cpi	r24, 0x0A	; 10
     b68:	09 f4       	brne	.+2      	; 0xb6c <_Z3cmdc+0x386>
     b6a:	eb dc       	rcall	.-1578   	; 0x542 <_Z9uart_getcv>
				eeprom_read_block((void*)buf, (void*)l_switch_helper(a, i), sizeof(txt_in1));
     b6c:	e9 a1       	ldd	r30, Y+33	; 0x21
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
}

//Returns EEPROM pointers to the name of specified (type + index) I/O-entity
uint8_t* l_switch_helper(char a, uint8_t i)
{
	switch (a)
     b70:	1f 34       	cpi	r17, 0x4F	; 79
     b72:	51 f0       	breq	.+20     	; 0xb88 <_Z3cmdc+0x3a2>
     b74:	14 35       	cpi	r17, 0x54	; 84
     b76:	91 f4       	brne	.+36     	; 0xb9c <_Z3cmdc+0x3b6>
	{
		case 'T':
		return pgm_read_EEM_P(ds_names[i]);
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	e2 54       	subi	r30, 0x42	; 66
     b7e:	f1 4e       	sbci	r31, 0xE1	; 225
     b80:	85 91       	lpm	r24, Z+
     b82:	94 91       	lpm	r25, Z
     b84:	bc 01       	movw	r22, r24
     b86:	15 c0       	rjmp	.+42     	; 0xbb2 <_Z3cmdc+0x3cc>
		case 'O':
		return output_pins[i].Text;
     b88:	26 e0       	ldi	r18, 0x06	; 6
     b8a:	2e 9f       	mul	r18, r30
     b8c:	c0 01       	movw	r24, r0
     b8e:	2f 9f       	mul	r18, r31
     b90:	90 0d       	add	r25, r0
     b92:	11 24       	eor	r1, r1
     b94:	fc 01       	movw	r30, r24
     b96:	e8 55       	subi	r30, 0x58	; 88
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	09 c0       	rjmp	.+18     	; 0xbae <_Z3cmdc+0x3c8>
		case 'I':
		default:
		return input_pins[i].Text;
     b9c:	26 e0       	ldi	r18, 0x06	; 6
     b9e:	2e 9f       	mul	r18, r30
     ba0:	c0 01       	movw	r24, r0
     ba2:	2f 9f       	mul	r18, r31
     ba4:	90 0d       	add	r25, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	fc 01       	movw	r30, r24
     baa:	ea 53       	subi	r30, 0x3A	; 58
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	63 81       	ldd	r22, Z+3	; 0x03
     bb0:	74 81       	ldd	r23, Z+4	; 0x04
				if (arg_check_helper(uart_getc())) break;
				uint8_t i;
				if (l_decode_helper(buf, i)) break;
				_delay_ms(1);
				if (static_cast<char>(uart_peek()) == '\n') uart_getc();
				eeprom_read_block((void*)buf, (void*)l_switch_helper(a, i), sizeof(txt_in1));
     bb2:	40 e1       	ldi	r20, 0x10	; 16
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	ce 01       	movw	r24, r28
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	2e d7       	rcall	.+3676   	; 0x1a18 <eeprom_read_block>
     bbc:	4f cf       	rjmp	.-354    	; 0xa5c <_Z3cmdc+0x276>
				uart_puts(buf);
				break;
			}
			if (arg_check_helper(uart_getc())) break;
			uint8_t i;
			if (l_decode_helper(buf, i)) break;
     bbe:	be 01       	movw	r22, r28
     bc0:	6f 5d       	subi	r22, 0xDF	; 223
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	bc dd       	rcall	.-1160   	; 0x742 <_Z15l_decode_helperPcRh>
     bca:	81 11       	cpse	r24, r1
     bcc:	92 cf       	rjmp	.-220    	; 0xaf2 <_Z3cmdc+0x30c>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
     bce:	89 a1       	ldd	r24, Y+33	; 0x21
     bd0:	80 31       	cpi	r24, 0x10	; 16
     bd2:	08 f0       	brcs	.+2      	; 0xbd6 <_Z3cmdc+0x3f0>
     bd4:	64 cf       	rjmp	.-312    	; 0xa9e <_Z3cmdc+0x2b8>
     bd6:	8f e9       	ldi	r24, 0x9F	; 159
     bd8:	9f e0       	ldi	r25, 0x0F	; 15
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <_Z3cmdc+0x3f4>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <_Z3cmdc+0x3fa>
     be0:	00 00       	nop
			if (arg_check_helper(uart_getc())) break;
			uint8_t i;
			if (l_decode_helper(buf, i)) break;
			if (check_index_helper(i, sizeof(txt_in1))) break;
			_delay_ms(1);
			unsigned int c = uart_getc();
     be2:	af dc       	rcall	.-1698   	; 0x542 <_Z9uart_getcv>
     be4:	fe 01       	movw	r30, r28
     be6:	31 96       	adiw	r30, 0x01	; 1
     be8:	7f 01       	movw	r14, r30
			uint8_t j = 0;
     bea:	10 e0       	ldi	r17, 0x00	; 0
			while ((static_cast<char>(c) != '\r') && (c != UART_NO_DATA))
     bec:	8d 30       	cpi	r24, 0x0D	; 13
     bee:	b1 f0       	breq	.+44     	; 0xc1c <_Z3cmdc+0x436>
     bf0:	81 15       	cp	r24, r1
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	9f 07       	cpc	r25, r31
     bf6:	91 f0       	breq	.+36     	; 0xc1c <_Z3cmdc+0x436>
			{
				buf[j++] = static_cast<char>(c);
     bf8:	1f 5f       	subi	r17, 0xFF	; 255
     bfa:	f7 01       	movw	r30, r14
     bfc:	81 93       	st	Z+, r24
     bfe:	7f 01       	movw	r14, r30
				if (j == sizeof(txt_in1))
     c00:	10 31       	cpi	r17, 0x10	; 16
     c02:	21 f4       	brne	.+8      	; 0xc0c <_Z3cmdc+0x426>
				{
					reportError(PSTR_L("Too long argument"));
     c04:	8a e5       	ldi	r24, 0x5A	; 90
     c06:	9e e1       	ldi	r25, 0x1E	; 30
     c08:	5a d1       	rcall	.+692    	; 0xebe <_Z11reportErrorPKc>
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <_Z3cmdc+0x436>
     c0c:	8f e9       	ldi	r24, 0x9F	; 159
     c0e:	9f e0       	ldi	r25, 0x0F	; 15
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <_Z3cmdc+0x42a>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <_Z3cmdc+0x430>
     c16:	00 00       	nop
					break;
				}
				_delay_ms(1);
				c = uart_getc();
     c18:	94 dc       	rcall	.-1752   	; 0x542 <_Z9uart_getcv>
     c1a:	e8 cf       	rjmp	.-48     	; 0xbec <_Z3cmdc+0x406>
     c1c:	ef e9       	ldi	r30, 0x9F	; 159
     c1e:	ff e0       	ldi	r31, 0x0F	; 15
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <_Z3cmdc+0x43a>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <_Z3cmdc+0x440>
     c26:	00 00       	nop
			}
			_delay_ms(1);
			if (static_cast<char>(uart_peek()) == '\n') uart_getc();
     c28:	72 dc       	rcall	.-1820   	; 0x50e <_Z9uart_peekv>
     c2a:	8a 30       	cpi	r24, 0x0A	; 10
     c2c:	09 f4       	brne	.+2      	; 0xc30 <_Z3cmdc+0x44a>
     c2e:	89 dc       	rcall	.-1774   	; 0x542 <_Z9uart_getcv>
			buf[j++] = '\0';
     c30:	e1 e0       	ldi	r30, 0x01	; 1
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	ec 0f       	add	r30, r28
     c36:	fd 1f       	adc	r31, r29
     c38:	e1 0f       	add	r30, r17
     c3a:	f1 1d       	adc	r31, r1
     c3c:	10 82       	st	Z, r1
			eeprom_update_block((void*)buf, (void*)l_switch_helper(a, i), j);
     c3e:	1f 5f       	subi	r17, 0xFF	; 255
     c40:	41 2f       	mov	r20, r17
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	e9 a1       	ldd	r30, Y+33	; 0x21
     c46:	f0 e0       	ldi	r31, 0x00	; 0
}

//Returns EEPROM pointers to the name of specified (type + index) I/O-entity
uint8_t* l_switch_helper(char a, uint8_t i)
{
	switch (a)
     c48:	0f 34       	cpi	r16, 0x4F	; 79
     c4a:	51 f0       	breq	.+20     	; 0xc60 <_Z3cmdc+0x47a>
     c4c:	04 35       	cpi	r16, 0x54	; 84
     c4e:	91 f4       	brne	.+36     	; 0xc74 <_Z3cmdc+0x48e>
	{
		case 'T':
		return pgm_read_EEM_P(ds_names[i]);
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	e2 54       	subi	r30, 0x42	; 66
     c56:	f1 4e       	sbci	r31, 0xE1	; 225
     c58:	85 91       	lpm	r24, Z+
     c5a:	94 91       	lpm	r25, Z
     c5c:	bc 01       	movw	r22, r24
     c5e:	15 c0       	rjmp	.+42     	; 0xc8a <_Z3cmdc+0x4a4>
		case 'O':
		return output_pins[i].Text;
     c60:	26 e0       	ldi	r18, 0x06	; 6
     c62:	2e 9f       	mul	r18, r30
     c64:	c0 01       	movw	r24, r0
     c66:	2f 9f       	mul	r18, r31
     c68:	90 0d       	add	r25, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	fc 01       	movw	r30, r24
     c6e:	e8 55       	subi	r30, 0x58	; 88
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	09 c0       	rjmp	.+18     	; 0xc86 <_Z3cmdc+0x4a0>
		case 'I':
		default:
		return input_pins[i].Text;
     c74:	26 e0       	ldi	r18, 0x06	; 6
     c76:	2e 9f       	mul	r18, r30
     c78:	c0 01       	movw	r24, r0
     c7a:	2f 9f       	mul	r18, r31
     c7c:	90 0d       	add	r25, r0
     c7e:	11 24       	eor	r1, r1
     c80:	fc 01       	movw	r30, r24
     c82:	ea 53       	subi	r30, 0x3A	; 58
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	63 81       	ldd	r22, Z+3	; 0x03
     c88:	74 81       	ldd	r23, Z+4	; 0x04
				c = uart_getc();
			}
			_delay_ms(1);
			if (static_cast<char>(uart_peek()) == '\n') uart_getc();
			buf[j++] = '\0';
			eeprom_update_block((void*)buf, (void*)l_switch_helper(a, i), j);
     c8a:	ce 01       	movw	r24, r28
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	dc d6       	rcall	.+3512   	; 0x1a48 <eeprom_update_block>
     c90:	2d cf       	rjmp	.-422    	; 0xaec <_Z3cmdc+0x306>
			if (!isNumeric(buf, arraySize(buf)))
			{
				reportError(PSTR_L("Out of range"));
				break;
			}
			if (static_cast<char>(c) == 'T')
     c92:	04 35       	cpi	r16, 0x54	; 84
     c94:	e1 f4       	brne	.+56     	; 0xcce <_Z3cmdc+0x4e8>
			{
				int8_t n = decodeInt(buf);
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	a2 d0       	rcall	.+324    	; 0xde0 <_Z9decodeIntPKch.constprop.15>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
     c9c:	87 fd       	sbrc	r24, 7
     c9e:	ff ce       	rjmp	.-514    	; 0xa9e <_Z3cmdc+0x2b8>
     ca0:	08 2e       	mov	r0, r24
     ca2:	00 0c       	add	r0, r0
     ca4:	99 0b       	sbc	r25, r25
     ca6:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <_ZL8ow_count>
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	0c f0       	brlt	.+2      	; 0xcb4 <_Z3cmdc+0x4ce>
     cb2:	f5 ce       	rjmp	.-534    	; 0xa9e <_Z3cmdc+0x2b8>
			}
			if (static_cast<char>(c) == 'T')
			{
				int8_t n = decodeInt(buf);
				if (check_index_helper(n, ow_count)) break;
				uart_puts(itoa(temperatures[n], buf, 10));
     cb4:	fc 01       	movw	r30, r24
     cb6:	ec 57       	subi	r30, 0x7C	; 124
     cb8:	fe 4f       	sbci	r31, 0xFE	; 254
     cba:	80 81       	ld	r24, Z
     cbc:	4a e0       	ldi	r20, 0x0A	; 10
     cbe:	be 01       	movw	r22, r28
     cc0:	6f 5f       	subi	r22, 0xFF	; 255
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	08 2e       	mov	r0, r24
     cc6:	00 0c       	add	r0, r0
     cc8:	99 0b       	sbc	r25, r25
     cca:	73 d6       	rcall	.+3302   	; 0x19b2 <__itoa_ncheck>
     ccc:	11 cf       	rjmp	.-478    	; 0xaf0 <_Z3cmdc+0x30a>
			}
			else
			{
				intToBit(input_state_buf, buf);
     cce:	be 01       	movw	r22, r28
     cd0:	6f 5f       	subi	r22, 0xFF	; 255
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <_ZL15input_state_buf>
     cd8:	c3 d0       	rcall	.+390    	; 0xe60 <_Z8intToBitIhEvT_Pch.constprop.5>
				uart_puts(buf);
     cda:	ce 01       	movw	r24, r28
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	db db       	rcall	.-2122   	; 0x496 <_Z9uart_putsPKc>
				uart_putc(':');
     ce0:	8a e3       	ldi	r24, 0x3A	; 58
     ce2:	ea d9       	rcall	.-3116   	; 0xb8 <_Z9uart_putch>
				intToBit(output_compare_buf, buf);
     ce4:	be 01       	movw	r22, r28
     ce6:	6f 5f       	subi	r22, 0xFF	; 255
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZL18output_compare_buf>
     cee:	b5 ce       	rjmp	.-662    	; 0xa5a <_Z3cmdc+0x274>
			{
				reportError(PSTR_L("Missing argument"));
				break;
			}
			bool eep = false;
			switch (buf[i + 1])
     cf0:	fe 01       	movw	r30, r28
     cf2:	e0 0f       	add	r30, r16
     cf4:	f1 1d       	adc	r31, r1
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	81 33       	cpi	r24, 0x31	; 49
     cfa:	b1 f1       	breq	.+108    	; 0xd68 <_Z3cmdc+0x582>
     cfc:	68 f4       	brcc	.+26     	; 0xd18 <_Z3cmdc+0x532>
     cfe:	80 33       	cpi	r24, 0x30	; 48
     d00:	a9 f1       	breq	.+106    	; 0xd6c <_Z3cmdc+0x586>
					eep = true;
				case '0':
					actuate(l, false); //Set determined state
				break;
				default:
					actuate(output_compare_buf ^ BVO(l)); //Toggle
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <_Z3cmdc+0x524>
     d08:	88 0f       	add	r24, r24
     d0a:	1a 95       	dec	r17
     d0c:	ea f7       	brpl	.-6      	; 0xd08 <_Z3cmdc+0x522>
     d0e:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <_ZL18output_compare_buf>
     d12:	89 27       	eor	r24, r25
     d14:	58 da       	rcall	.-2896   	; 0x1c6 <_Z7actuateh>
     d16:	ea ce       	rjmp	.-556    	; 0xaec <_Z3cmdc+0x306>
			{
				reportError(PSTR_L("Missing argument"));
				break;
			}
			bool eep = false;
			switch (buf[i + 1])
     d18:	86 34       	cpi	r24, 0x46	; 70
     d1a:	09 f5       	brne	.+66     	; 0xd5e <_Z3cmdc+0x578>
					eep = true;
				case '1':
					actuate(l, true); //Set determined state
				break;
				case 'F':
					eep = true;
     d1c:	01 e0       	ldi	r16, 0x01	; 1
				case '0':
					actuate(l, false); //Set determined state
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	81 2f       	mov	r24, r17
     d22:	1f da       	rcall	.-3010   	; 0x162 <_Z7actuatehb>
				break;
				default:
					actuate(output_compare_buf ^ BVO(l)); //Toggle
				break;
			}
			if (eep)
     d24:	00 23       	and	r16, r16
     d26:	09 f4       	brne	.+2      	; 0xd2a <_Z3cmdc+0x544>
     d28:	e1 ce       	rjmp	.-574    	; 0xaec <_Z3cmdc+0x306>
			{
				outputs_t temp = EEPROM_READ_OUTPUTS(output_last);
     d2a:	81 e7       	ldi	r24, 0x71	; 113
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	84 d6       	rcall	.+3336   	; 0x1a38 <eeprom_read_byte>
				if (output_compare_buf & BVO(l))
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <_Z3cmdc+0x554>
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	1a 95       	dec	r17
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <_Z3cmdc+0x550>
     d3e:	40 91 82 01 	lds	r20, 0x0182	; 0x800182 <_ZL18output_compare_buf>
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	42 23       	and	r20, r18
     d46:	53 23       	and	r21, r19
     d48:	45 2b       	or	r20, r21
     d4a:	19 f0       	breq	.+6      	; 0xd52 <_Z3cmdc+0x56c>
				{
					temp |= BVO(l);
     d4c:	68 2f       	mov	r22, r24
     d4e:	62 2b       	or	r22, r18
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <_Z3cmdc+0x572>
				}
				else
				{
					temp &= static_cast<outputs_t>(~BVO(l));
     d52:	20 95       	com	r18
     d54:	62 2f       	mov	r22, r18
     d56:	68 23       	and	r22, r24
				}
				EEPROM_WRITE_OUTPUTS(output_last, temp); //Save (only user-initiated output control is saved)
     d58:	81 e7       	ldi	r24, 0x71	; 113
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	c6 ce       	rjmp	.-628    	; 0xaea <_Z3cmdc+0x304>
			{
				reportError(PSTR_L("Missing argument"));
				break;
			}
			bool eep = false;
			switch (buf[i + 1])
     d5e:	8e 34       	cpi	r24, 0x4E	; 78
     d60:	81 f6       	brne	.-96     	; 0xd02 <_Z3cmdc+0x51c>
			{
				case 'N':
					eep = true;
     d62:	01 e0       	ldi	r16, 0x01	; 1
				case '1':
					actuate(l, true); //Set determined state
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	dc cf       	rjmp	.-72     	; 0xd20 <_Z3cmdc+0x53a>
			else
			{
				reportError(PSTR_L("Missing argument"));
				break;
			}
			bool eep = false;
     d68:	00 e0       	ldi	r16, 0x00	; 0
     d6a:	fc cf       	rjmp	.-8      	; 0xd64 <_Z3cmdc+0x57e>
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	d7 cf       	rjmp	.-82     	; 0xd1e <_Z3cmdc+0x538>
		}
		default:
		return;
	}
	uart_puts(line_feed);
}
     d70:	a1 96       	adiw	r28, 0x21	; 33
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	08 95       	ret

00000d8a <_Z7OWwritehh.constprop.21>:
// pin high, if you need power after the OWwrite (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the OWwrite to avoid heating in a short or
// other mishap.
//
void OWwrite(uint8_t v, uint8_t power /* = 0 */) {
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	08 2f       	mov	r16, r24
     d94:	c8 e0       	ldi	r28, 0x08	; 8
     d96:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t bitMask;

	for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     d98:	11 e0       	ldi	r17, 0x01	; 1
		OWwrite_bit( (bitMask & v)?1:0);
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 2f       	mov	r25, r16
     d9e:	91 23       	and	r25, r17
     da0:	09 f4       	brne	.+2      	; 0xda4 <_Z7OWwritehh.constprop.21+0x1a>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	89 da       	rcall	.-2798   	; 0x2b8 <_Z11OWwrite_bith>
// other mishap.
//
void OWwrite(uint8_t v, uint8_t power /* = 0 */) {
	uint8_t bitMask;

	for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     da6:	11 0f       	add	r17, r17
     da8:	21 97       	sbiw	r28, 0x01	; 1
     daa:	b9 f7       	brne	.-18     	; 0xd9a <_Z7OWwritehh.constprop.21+0x10>
		OWwrite_bit( (bitMask & v)?1:0);
	}
	if ( !power) {
		cli();
     dac:	f8 94       	cli
		#if PINS_STATIC
		pin_t::SetDirection(OWpin, pin_t::Input);
     dae:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     db2:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
     db6:	ed 91       	ld	r30, X+
     db8:	fc 91       	ld	r31, X
     dba:	11 97       	sbiw	r26, 0x01	; 1
     dbc:	90 81       	ld	r25, Z
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	8c 91       	ld	r24, X
     dc2:	80 95       	com	r24
     dc4:	89 23       	and	r24, r25
     dc6:	80 83       	st	Z, r24
		#else
		OWpin->SetDirection(pin_t::Input);
		#endif
		#if PINS_STATIC
		pin_t::Write(OWpin, false);
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
     dce:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
     dd2:	b8 d9       	rcall	.-3216   	; 0x144 <_ZN5pin_t5WriteEPKS_b>
		#else
		OWpin->Write(false);
		#endif
		sei();
     dd4:	78 94       	sei
	}
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <_Z9decodeIntPKch.constprop.15>:
		b += (str[i] - '0') * pgm_read_float(&(mult[((i < p) ? 3 : 2) + i - p]));
	}
	if (neg) b *= -1;
	return b;
}
int8_t decodeInt(const char* str, uint8_t max_len)
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ec 01       	movw	r28, r24
	delete[] Data;
}

float decodeFloat(const char* str, uint8_t max_len)
{
	return decodeFloat(str, 0, strnlen(str, max_len));
     de6:	60 e2       	ldi	r22, 0x20	; 32
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	d8 d5       	rcall	.+2992   	; 0x199c <strnlen>
}
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
{
	if (len == 0) return NAN;
     dec:	88 23       	and	r24, r24
     dee:	29 f0       	breq	.+10     	; 0xdfa <_Z9decodeIntPKch.constprop.15+0x1a>
     df0:	48 2f       	mov	r20, r24
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	ce 01       	movw	r24, r28
     df6:	28 dc       	rcall	.-1968   	; 0x648 <_Z11decodeFloatPKchh.part.0.lto_priv.22>
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <_Z9decodeIntPKch.constprop.15+0x22>
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	80 ec       	ldi	r24, 0xC0	; 192
     e00:	9f e7       	ldi	r25, 0x7F	; 127
	if (neg) b *= -1;
	return b;
}
int8_t decodeInt(const char* str, uint8_t max_len)
{
	return static_cast<int8_t>(decodeFloat(str));
     e02:	b4 d6       	rcall	.+3432   	; 0x1b6c <__fixsfsi>
     e04:	86 2f       	mov	r24, r22
}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <_Z6strrmvPch.constprop.14>:
{
	end -= start;
	str += start;
	return start + strrmv(str, end);
}
uint8_t strrmv(char* str, uint8_t len)
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
{
	uint8_t e = strlen(str);
     e10:	fc 01       	movw	r30, r24
     e12:	01 90       	ld	r0, Z+
     e14:	00 20       	and	r0, r0
     e16:	e9 f7       	brne	.-6      	; 0xe12 <_Z6strrmvPch.constprop.14+0x6>
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	9f 01       	movw	r18, r30
     e1c:	28 1b       	sub	r18, r24
     e1e:	39 0b       	sbc	r19, r25
     e20:	62 2f       	mov	r22, r18
     e22:	dc 01       	movw	r26, r24
     e24:	11 96       	adiw	r26, 0x01	; 1
     e26:	fc 01       	movw	r30, r24
     e28:	a9 01       	movw	r20, r18
     e2a:	55 27       	eor	r21, r21
	for (uint8_t i = 0; i < e; i++) {
     e2c:	7e 2f       	mov	r23, r30
     e2e:	78 1b       	sub	r23, r24
     e30:	76 17       	cp	r23, r22
     e32:	68 f4       	brcc	.+26     	; 0xe4e <_Z6strrmvPch.constprop.14+0x42>
		if ((i + len) < e) { *str = str[len]; str++; }
     e34:	ed 01       	movw	r28, r26
     e36:	c8 1b       	sub	r28, r24
     e38:	d9 0b       	sbc	r29, r25
     e3a:	c4 17       	cp	r28, r20
     e3c:	d5 07       	cpc	r29, r21
     e3e:	1c f4       	brge	.+6      	; 0xe46 <_Z6strrmvPch.constprop.14+0x3a>
     e40:	7c 91       	ld	r23, X
     e42:	70 83       	st	Z, r23
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <_Z6strrmvPch.constprop.14+0x3c>
		else { *str++ = '\0'; };
     e46:	10 82       	st	Z, r1
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	31 96       	adiw	r30, 0x01	; 1
     e4c:	ef cf       	rjmp	.-34     	; 0xe2c <_Z6strrmvPch.constprop.14+0x20>
	}
	*str = '\0';
     e4e:	fc 01       	movw	r30, r24
     e50:	e4 0f       	add	r30, r20
     e52:	f5 1f       	adc	r31, r21
     e54:	10 82       	st	Z, r1
	return e - len;
}
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	82 0f       	add	r24, r18
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <_Z8intToBitIhEvT_Pch.constprop.5>:
	--bits;
	for (uint8_t i = 0; i <= bits; ++i) *val |= static_cast<T>((*str++ - '0') > 0) << (bits - i);
}

template <typename T> void intToBit(const T val, char* str, uint8_t bits = sizeof(T) * 8);
template <typename T> void intToBit(const T val, char* str, uint8_t bits /*= sizeof(T) * 8*/)
     e60:	fb 01       	movw	r30, r22
     e62:	27 e0       	ldi	r18, 0x07	; 7
     e64:	30 e0       	ldi	r19, 0x00	; 0
{
	--bits;
	for (uint8_t i = 0; i <= bits; ++i) *str++ = val & static_cast<T>(static_cast<T>(1U) << (bits - i)) ? '1' : '0';
     e66:	a1 e0       	ldi	r26, 0x01	; 1
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	ad 01       	movw	r20, r26
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <_Z8intToBitIhEvT_Pch.constprop.5+0x16>
     e72:	44 0f       	add	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <_Z8intToBitIhEvT_Pch.constprop.5+0x12>
     e7a:	48 23       	and	r20, r24
     e7c:	59 23       	and	r21, r25
     e7e:	45 2b       	or	r20, r21
     e80:	11 f4       	brne	.+4      	; 0xe86 <_Z8intToBitIhEvT_Pch.constprop.5+0x26>
     e82:	40 e3       	ldi	r20, 0x30	; 48
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <_Z8intToBitIhEvT_Pch.constprop.5+0x28>
     e86:	41 e3       	ldi	r20, 0x31	; 49
     e88:	41 93       	st	Z+, r20
     e8a:	21 50       	subi	r18, 0x01	; 1
     e8c:	31 09       	sbc	r19, r1
     e8e:	70 f7       	brcc	.-36     	; 0xe6c <_Z8intToBitIhEvT_Pch.constprop.5+0xc>
	*str = '\0';
     e90:	fb 01       	movw	r30, r22
     e92:	10 86       	std	Z+8, r1	; 0x08
     e94:	08 95       	ret

00000e96 <_Z11flushSerialv>:
     e96:	8f ed       	ldi	r24, 0xDF	; 223
     e98:	9b ea       	ldi	r25, 0xAB	; 171
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <_Z11flushSerialv+0x4>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <_Z11flushSerialv+0xa>
     ea0:	00 00       	nop
     ea2:	35 db       	rcall	.-2454   	; 0x50e <_Z9uart_peekv>
     ea4:	81 15       	cp	r24, r1
     ea6:	91 40       	sbci	r25, 0x01	; 1
     ea8:	49 f0       	breq	.+18     	; 0xebc <_Z11flushSerialv+0x26>
}
#endif

void uart_flush()
{
	UART_RxTail = UART_RxHead;
     eaa:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <_ZL11UART_RxHead.lto_priv.30>
     eae:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
     eb2:	8f e3       	ldi	r24, 0x3F	; 63
     eb4:	9f e1       	ldi	r25, 0x1F	; 31
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <_Z11flushSerialv+0x20>
     eba:	f1 cf       	rjmp	.-30     	; 0xe9e <_Z11flushSerialv+0x8>
     ebc:	08 95       	ret

00000ebe <_Z11reportErrorPKc>:
		_delay_ms(2);
	}
}

void reportError(PGM_P desc)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24
	uart_puts("E:");
     ec4:	8a ec       	ldi	r24, 0xCA	; 202
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	e6 da       	rcall	.-2612   	; 0x496 <_Z9uart_putsPKc>
	uart_puts_p(desc);
     eca:	ce 01       	movw	r24, r28
     ecc:	d6 da       	rcall	.-2644   	; 0x47a <_Z11uart_puts_pPKc>
	uart_puts(line_feed);
     ece:	83 e9       	ldi	r24, 0x93	; 147
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	e1 da       	rcall	.-2622   	; 0x496 <_Z9uart_putsPKc>
	flushSerial();
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
void reportError(PGM_P desc)
{
	uart_puts("E:");
	uart_puts_p(desc);
	uart_puts(line_feed);
	flushSerial();
     ed8:	de cf       	rjmp	.-68     	; 0xe96 <_Z11flushSerialv>

00000eda <_Z10cmd_helperPch.constprop.6>:
}

#pragma region Helpers

//Populates the buffer with characters (including - and ., until \r or \0 or N/A) and returns argument letter
unsigned int cmd_helper(char* b, uint8_t size)
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	7c 01       	movw	r14, r24
{
	uint8_t i = 0;
	unsigned int c = uart_getc();
     ee6:	2d db       	rcall	.-2470   	; 0x542 <_Z9uart_getcv>
     ee8:	ec 01       	movw	r28, r24
     eea:	8f e9       	ldi	r24, 0x9F	; 159
     eec:	9f e0       	ldi	r25, 0x0F	; 15
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <_Z10cmd_helperPch.constprop.6+0x14>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <_Z10cmd_helperPch.constprop.6+0x1a>
     ef4:	00 00       	nop
	_delay_ms(1);
	if (static_cast<char>(c) == ':') c = uart_getc(); //Just a meaningless part of a header
     ef6:	ca 33       	cpi	r28, 0x3A	; 58
     ef8:	11 f4       	brne	.+4      	; 0xefe <_Z10cmd_helperPch.constprop.6+0x24>
     efa:	23 db       	rcall	.-2490   	; 0x542 <_Z9uart_getcv>
     efc:	ec 01       	movw	r28, r24
	if (c == UART_NO_DATA)
     efe:	c1 15       	cp	r28, r1
     f00:	e1 e0       	ldi	r30, 0x01	; 1
     f02:	de 07       	cpc	r29, r30
     f04:	19 f4       	brne	.+6      	; 0xf0c <_Z10cmd_helperPch.constprop.6+0x32>
	{
		reportError(PSTR_L("No data"));
     f06:	86 eb       	ldi	r24, 0xB6	; 182
     f08:	9e e1       	ldi	r25, 0x1E	; 30
     f0a:	32 c0       	rjmp	.+100    	; 0xf70 <_Z10cmd_helperPch.constprop.6+0x96>
		return UART_NO_DATA;
	}
	char read = static_cast<char>(c);
     f0c:	8c 2f       	mov	r24, r28
	if (isNumeric(read) || (read == '-') || (read == '.')) b[i++] = read;
     f0e:	9c 2f       	mov	r25, r28
     f10:	90 53       	subi	r25, 0x30	; 48
     f12:	9a 30       	cpi	r25, 0x0A	; 10
     f14:	18 f0       	brcs	.+6      	; 0xf1c <_Z10cmd_helperPch.constprop.6+0x42>
     f16:	9d 5f       	subi	r25, 0xFD	; 253
     f18:	92 30       	cpi	r25, 0x02	; 2
     f1a:	20 f4       	brcc	.+8      	; 0xf24 <_Z10cmd_helperPch.constprop.6+0x4a>
     f1c:	f7 01       	movw	r30, r14
     f1e:	80 83       	st	Z, r24
     f20:	11 e0       	ldi	r17, 0x01	; 1
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <_Z10cmd_helperPch.constprop.6+0x4c>
#pragma region Helpers

//Populates the buffer with characters (including - and ., until \r or \0 or N/A) and returns argument letter
unsigned int cmd_helper(char* b, uint8_t size)
{
	uint8_t i = 0;
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	8f e3       	ldi	r24, 0x3F	; 63
     f28:	9f e1       	ldi	r25, 0x1F	; 31
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <_Z10cmd_helperPch.constprop.6+0x50>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <_Z10cmd_helperPch.constprop.6+0x56>
     f30:	00 00       	nop
	char read = static_cast<char>(c);
	if (isNumeric(read) || (read == '-') || (read == '.')) b[i++] = read;
	for (; i < size; i++)
	{
		_delay_ms(2);
		c = uart_getc();
     f32:	07 db       	rcall	.-2546   	; 0x542 <_Z9uart_getcv>
		if (c != UART_NO_DATA)
     f34:	81 15       	cp	r24, r1
     f36:	e1 e0       	ldi	r30, 0x01	; 1
     f38:	9e 07       	cpc	r25, r30
     f3a:	69 f0       	breq	.+26     	; 0xf56 <_Z10cmd_helperPch.constprop.6+0x7c>
		{
			b[i] = static_cast<char>(c);
     f3c:	f7 01       	movw	r30, r14
     f3e:	e1 0f       	add	r30, r17
     f40:	f1 1d       	adc	r31, r1
     f42:	80 83       	st	Z, r24
			if ((b[i] == '\r') || (b[i] == '\n'))
     f44:	8d 30       	cpi	r24, 0x0D	; 13
     f46:	11 f4       	brne	.+4      	; 0xf4c <_Z10cmd_helperPch.constprop.6+0x72>
			{
				b[i] = '\0';
     f48:	10 82       	st	Z, r1
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <_Z10cmd_helperPch.constprop.6+0x7c>
		_delay_ms(2);
		c = uart_getc();
		if (c != UART_NO_DATA)
		{
			b[i] = static_cast<char>(c);
			if ((b[i] == '\r') || (b[i] == '\n'))
     f4c:	8a 30       	cpi	r24, 0x0A	; 10
     f4e:	e1 f3       	breq	.-8      	; 0xf48 <_Z10cmd_helperPch.constprop.6+0x6e>
		reportError(PSTR_L("No data"));
		return UART_NO_DATA;
	}
	char read = static_cast<char>(c);
	if (isNumeric(read) || (read == '-') || (read == '.')) b[i++] = read;
	for (; i < size; i++)
     f50:	1f 5f       	subi	r17, 0xFF	; 255
     f52:	10 32       	cpi	r17, 0x20	; 32
     f54:	41 f7       	brne	.-48     	; 0xf26 <_Z10cmd_helperPch.constprop.6+0x4c>
				break;
			}
		}
		else { break; };
	}
	if (b[i] != '\0') //If no line ending mark or null character itself
     f56:	f7 01       	movw	r30, r14
     f58:	e1 0f       	add	r30, r17
     f5a:	f1 1d       	adc	r31, r1
     f5c:	80 81       	ld	r24, Z
     f5e:	88 23       	and	r24, r24
     f60:	59 f0       	breq	.+22     	; 0xf78 <_Z10cmd_helperPch.constprop.6+0x9e>
	{
		reportError((i == size) ? PSTR_L("Input too long") : PSTR_L("No CRLF or NULL"));
     f62:	10 32       	cpi	r17, 0x20	; 32
     f64:	19 f0       	breq	.+6      	; 0xf6c <_Z10cmd_helperPch.constprop.6+0x92>
     f66:	87 e9       	ldi	r24, 0x97	; 151
     f68:	9e e1       	ldi	r25, 0x1E	; 30
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <_Z10cmd_helperPch.constprop.6+0x96>
     f6c:	87 ea       	ldi	r24, 0xA7	; 167
     f6e:	9e e1       	ldi	r25, 0x1E	; 30
     f70:	a6 df       	rcall	.-180    	; 0xebe <_Z11reportErrorPKc>
		return UART_NO_DATA; //Abort transaction
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <_Z10cmd_helperPch.constprop.6+0xa2>
     f78:	ce 01       	movw	r24, r28
     f7a:	99 27       	eor	r25, r25
	}
	return read;
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	08 95       	ret

00000f88 <_Z12cmd_helper_3PahPchjPh.constprop.2>:
	}
	return false;
}

//For Mappings. Any Mapping command with 'C' argument refers to PC reset.
bool cmd_helper_3(int8_t* data, uint8_t size, char* buf, uint8_t s, unsigned int c, uint8_t* eep)
     f88:	9f 92       	push	r9
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	7c 01       	movw	r14, r24
     fa0:	96 2e       	mov	r9, r22
     fa2:	ea 01       	movw	r28, r20
     fa4:	68 01       	movw	r12, r16
{
	if (static_cast<char>(c) == 'A')	//Read values
     fa6:	59 01       	movw	r10, r18
     fa8:	bb 24       	eor	r11, r11
     faa:	81 e4       	ldi	r24, 0x41	; 65
     fac:	a8 16       	cp	r10, r24
     fae:	b1 04       	cpc	r11, r1
     fb0:	f9 f4       	brne	.+62     	; 0xff0 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x68>
     fb2:	3e 2d       	mov	r19, r14
     fb4:	d7 01       	movw	r26, r14
     fb6:	fa 01       	movw	r30, r20

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
	*p++ = NumToASCII(n % 10_ui8);
     fb8:	4a e0       	ldi	r20, 0x0A	; 10
	*p++ = ',';
     fba:	2c e2       	ldi	r18, 0x2C	; 44
}

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
     fbc:	51 e3       	ldi	r21, 0x31	; 49
		char* p = buf;
		for (uint8_t i = 0; i < size; ++i)
		{
			if (data[i] < 0_ui8)
			{
				*p++ = '-';
     fbe:	1d e2       	ldi	r17, 0x2D	; 45
bool cmd_helper_3(int8_t* data, uint8_t size, char* buf, uint8_t s, unsigned int c, uint8_t* eep)
{
	if (static_cast<char>(c) == 'A')	//Read values
	{
		char* p = buf;
		for (uint8_t i = 0; i < size; ++i)
     fc0:	8a 2f       	mov	r24, r26
     fc2:	83 1b       	sub	r24, r19
     fc4:	89 15       	cp	r24, r9
     fc6:	90 f4       	brcc	.+36     	; 0xfec <_Z12cmd_helper_3PahPchjPh.constprop.2+0x64>
		{
			if (data[i] < 0_ui8)
     fc8:	8d 91       	ld	r24, X+
     fca:	87 ff       	sbrs	r24, 7
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x4a>
			{
				*p++ = '-';
     fce:	10 83       	st	Z, r17
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x5a>
}

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
     fd2:	8a 30       	cpi	r24, 0x0A	; 10
     fd4:	14 f0       	brlt	.+4      	; 0xfda <_Z12cmd_helper_3PahPchjPh.constprop.2+0x52>
     fd6:	50 83       	st	Z, r21
     fd8:	31 96       	adiw	r30, 0x01	; 1
	*p++ = NumToASCII(n % 10_ui8);
     fda:	64 2f       	mov	r22, r20
     fdc:	e9 d6       	rcall	.+3538   	; 0x1db0 <__udivmodqi4>
     fde:	90 5d       	subi	r25, 0xD0	; 208
     fe0:	90 83       	st	Z, r25
	*p++ = ',';
     fe2:	cf 01       	movw	r24, r30
     fe4:	02 96       	adiw	r24, 0x02	; 2
     fe6:	21 83       	std	Z+1, r18	; 0x01
}

//For Mappings. Any Mapping command with 'C' argument refers to PC reset.
bool cmd_helper_3(int8_t* data, uint8_t size, char* buf, uint8_t s, unsigned int c, uint8_t* eep)
{
	if (static_cast<char>(c) == 'A')	//Read values
     fe8:	fc 01       	movw	r30, r24
     fea:	ea cf       	rjmp	.-44     	; 0xfc0 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x38>
			else
			{
				l_helper(p, data[i]);
			}
		}
		*(--p) = '\0';
     fec:	31 97       	sbiw	r30, 0x01	; 1
     fee:	39 c0       	rjmp	.+114    	; 0x1062 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xda>
		uart_puts(buf);
		return true;
	}
	uint8_t l = strnlen(buf, s);	//Check arguments
     ff0:	60 e2       	ldi	r22, 0x20	; 32
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	ca 01       	movw	r24, r20
     ff6:	d2 d4       	rcall	.+2468   	; 0x199c <strnlen>
     ff8:	08 2f       	mov	r16, r24
     ffa:	fe 01       	movw	r30, r28
{
	return arraySearch(arr, val, len, 0);
} // arraySearch
template<typename T> uint8_t arraySearch(const T* arr, T val, uint8_t len, uint8_t start)
{
	for (uint8_t i = start; i < len; ++i) if (arr[i] == val) return i;
     ffc:	10 e0       	ldi	r17, 0x00	; 0
     ffe:	10 17       	cp	r17, r16
    1000:	28 f4       	brcc	.+10     	; 0x100c <_Z12cmd_helper_3PahPchjPh.constprop.2+0x84>
    1002:	81 91       	ld	r24, Z+
    1004:	8a 33       	cpi	r24, 0x3A	; 58
    1006:	29 f0       	breq	.+10     	; 0x1012 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x8a>
    1008:	1f 5f       	subi	r17, 0xFF	; 255
    100a:	f9 cf       	rjmp	.-14     	; 0xffe <_Z12cmd_helper_3PahPchjPh.constprop.2+0x76>
	uint8_t i = arraySearch(buf, ':', l);
	if (i == l)
	{
		reportError(PSTR_L("No argument"));
    100c:	8b e8       	ldi	r24, 0x8B	; 139
    100e:	9e e1       	ldi	r25, 0x1E	; 30
    1010:	49 c0       	rjmp	.+146    	; 0x10a4 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x11c>
		return true;
	}
	if (static_cast<char>(c) == 'C')	//Process PC reset
    1012:	e3 e4       	ldi	r30, 0x43	; 67
    1014:	ae 16       	cp	r10, r30
    1016:	b1 04       	cpc	r11, r1
    1018:	a9 f5       	brne	.+106    	; 0x1084 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xfc>
	{
		++i;
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	61 0f       	add	r22, r17
		if (buf[i] == 'A')
    101e:	fe 01       	movw	r30, r28
    1020:	e6 0f       	add	r30, r22
    1022:	f1 1d       	adc	r31, r1
    1024:	80 81       	ld	r24, Z
    1026:	81 34       	cpi	r24, 0x41	; 65
    1028:	01 f5       	brne	.+64     	; 0x106a <_Z12cmd_helper_3PahPchjPh.constprop.2+0xe2>
		{
			char* p = buf;
			if (pc_reset_buf < 0_ui8)
    102a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZL12pc_reset_buf.lto_priv.28>
    102e:	87 ff       	sbrs	r24, 7
    1030:	06 c0       	rjmp	.+12     	; 0x103e <_Z12cmd_helper_3PahPchjPh.constprop.2+0xb6>
			{
				*p++ = '-';
    1032:	9e 01       	movw	r18, r28
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	8d e2       	ldi	r24, 0x2D	; 45
    103a:	88 83       	st	Y, r24
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xd8>
			}
			else
			{
				if (pc_reset_buf > 9_ui8) *p++ = '1';
    103e:	fe 01       	movw	r30, r28
    1040:	8a 30       	cpi	r24, 0x0A	; 10
    1042:	1c f0       	brlt	.+6      	; 0x104a <_Z12cmd_helper_3PahPchjPh.constprop.2+0xc2>
    1044:	31 96       	adiw	r30, 0x01	; 1
    1046:	91 e3       	ldi	r25, 0x31	; 49
    1048:	98 83       	st	Y, r25
				*p++ = NumToASCII(pc_reset_buf % 10_ui8);
    104a:	9f 01       	movw	r18, r30
    104c:	2f 5f       	subi	r18, 0xFF	; 255
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	08 2e       	mov	r0, r24
    1052:	00 0c       	add	r0, r0
    1054:	99 0b       	sbc	r25, r25
    1056:	6a e0       	ldi	r22, 0x0A	; 10
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	b6 d6       	rcall	.+3436   	; 0x1dc8 <__divmodhi4>
    105c:	80 5d       	subi	r24, 0xD0	; 208
    105e:	80 83       	st	Z, r24
			}
			*p = '\0';
    1060:	f9 01       	movw	r30, r18
    1062:	10 82       	st	Z, r1
			uart_puts(buf);
    1064:	ce 01       	movw	r24, r28
    1066:	17 da       	rcall	.-3026   	; 0x496 <_Z9uart_putsPKc>
    1068:	1e c0       	rjmp	.+60     	; 0x10a6 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x11e>
			return true;
		}
		int8_t o = decodeInt(buf, i, l - i); //Process output number to be binded
    106a:	40 2f       	mov	r20, r16
    106c:	46 1b       	sub	r20, r22
    106e:	ce 01       	movw	r24, r28
    1070:	af db       	rcall	.-2210   	; 0x7d0 <_Z9decodeIntPKchh>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    1072:	85 30       	cpi	r24, 0x05	; 5
    1074:	08 f0       	brcs	.+2      	; 0x1078 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xf0>
			*p = '\0';
			uart_puts(buf);
			return true;
		}
		int8_t o = decodeInt(buf, i, l - i); //Process output number to be binded
		if (check_index_helper(o, arraySize(output_pins), false)) o = -1;
    1076:	8f ef       	ldi	r24, 0xFF	; 255
		pc_reset_buf = o;
    1078:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_ZL12pc_reset_buf.lto_priv.28>
		eeprom_update_byte(&pc_reset_mapping, *reinterpret_cast<uint8_t*>(&o));
    107c:	68 2f       	mov	r22, r24
    107e:	87 ed       	ldi	r24, 0xD7	; 215
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	24 c0       	rjmp	.+72     	; 0x10cc <_Z12cmd_helper_3PahPchjPh.constprop.2+0x144>
		return false;
	}
	//Actually process mapping data
	int8_t n = decodeInt(buf, 0, i++); //Process input number
    1084:	41 2f       	mov	r20, r17
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	ce 01       	movw	r24, r28
    108a:	a2 db       	rcall	.-2236   	; 0x7d0 <_Z9decodeIntPKchh>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    108c:	87 fd       	sbrc	r24, 7
    108e:	08 c0       	rjmp	.+16     	; 0x10a0 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x118>
    1090:	a8 2e       	mov	r10, r24
    1092:	88 0f       	add	r24, r24
    1094:	bb 08       	sbc	r11, r11
    1096:	69 2d       	mov	r22, r9
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	a6 16       	cp	r10, r22
    109c:	b7 06       	cpc	r11, r23
    109e:	2c f0       	brlt	.+10     	; 0x10aa <_Z12cmd_helper_3PahPchjPh.constprop.2+0x122>
	{
		if (msg) reportError(PSTR_L("Illegal index"));
    10a0:	8d e7       	ldi	r24, 0x7D	; 125
    10a2:	9e e1       	ldi	r25, 0x1E	; 30
    10a4:	0c df       	rcall	.-488    	; 0xebe <_Z11reportErrorPKc>
		eeprom_update_byte(&pc_reset_mapping, *reinterpret_cast<uint8_t*>(&o));
		return false;
	}
	//Actually process mapping data
	int8_t n = decodeInt(buf, 0, i++); //Process input number
	if (check_index_helper(n, size)) return true;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	13 c0       	rjmp	.+38     	; 0x10d0 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x148>
		pc_reset_buf = o;
		eeprom_update_byte(&pc_reset_mapping, *reinterpret_cast<uint8_t*>(&o));
		return false;
	}
	//Actually process mapping data
	int8_t n = decodeInt(buf, 0, i++); //Process input number
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	61 0f       	add	r22, r17
	if (check_index_helper(n, size)) return true;
	int8_t o = decodeInt(buf, i, l - i); //Process output number to be binded
    10ae:	40 2f       	mov	r20, r16
    10b0:	46 1b       	sub	r20, r22
    10b2:	ce 01       	movw	r24, r28
    10b4:	8d db       	rcall	.-2278   	; 0x7d0 <_Z9decodeIntPKchh>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    10b6:	85 30       	cpi	r24, 0x05	; 5
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <_Z12cmd_helper_3PahPchjPh.constprop.2+0x134>
	}
	//Actually process mapping data
	int8_t n = decodeInt(buf, 0, i++); //Process input number
	if (check_index_helper(n, size)) return true;
	int8_t o = decodeInt(buf, i, l - i); //Process output number to be binded
	if (check_index_helper(o, arraySize(output_pins), false)) o = -1;
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
	data[n] = o;
    10bc:	f7 01       	movw	r30, r14
    10be:	ea 0d       	add	r30, r10
    10c0:	fb 1d       	adc	r31, r11
    10c2:	80 83       	st	Z, r24
	eeprom_update_byte(eep + n, *reinterpret_cast<uint8_t*>(&o)); //Save
    10c4:	68 2f       	mov	r22, r24
    10c6:	c6 01       	movw	r24, r12
    10c8:	8a 0d       	add	r24, r10
    10ca:	9b 1d       	adc	r25, r11
    10cc:	cc d4       	rcall	.+2456   	; 0x1a66 <eeprom_update_byte>
	return false;
    10ce:	80 e0       	ldi	r24, 0x00	; 0
}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	08 95       	ret

000010e8 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>:
	}
	return false;
}

//For R/W virtual registers
template<typename T> bool cmd_helper_2(T* var, char* buf, uint8_t size, unsigned int c, uint8_t arr_size)
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	7c 01       	movw	r14, r24
    10f6:	eb 01       	movw	r28, r22
    10f8:	02 2f       	mov	r16, r18
{
	if (static_cast<char>(c) == 'A')
    10fa:	41 34       	cpi	r20, 0x41	; 65
    10fc:	31 f4       	brne	.+12     	; 0x110a <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x22>
	{
		intToBit(*var, buf);
    10fe:	dc 01       	movw	r26, r24
    1100:	8c 91       	ld	r24, X
    1102:	ae de       	rcall	.-676    	; 0xe60 <_Z8intToBitIhEvT_Pch.constprop.5>
		uart_puts(buf);
    1104:	ce 01       	movw	r24, r28
    1106:	c7 d9       	rcall	.-3186   	; 0x496 <_Z9uart_putsPKc>
    1108:	2a c0       	rjmp	.+84     	; 0x115e <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x76>
		return true;
	}
	if (*buf == ':') ++buf;
    110a:	88 81       	ld	r24, Y
    110c:	8a 33       	cpi	r24, 0x3A	; 58
    110e:	09 f4       	brne	.+2      	; 0x1112 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x2a>
    1110:	21 96       	adiw	r28, 0x01	; 1
	uint8_t l = strnlen(buf, size);	//Argument letter has already been parsed out, only index:value left
    1112:	60 e2       	ldi	r22, 0x20	; 32
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	ce 01       	movw	r24, r28
    1118:	41 d4       	rcall	.+2178   	; 0x199c <strnlen>
    111a:	98 2f       	mov	r25, r24
    111c:	fe 01       	movw	r30, r28
    111e:	de 01       	movw	r26, r28
    1120:	10 e0       	ldi	r17, 0x00	; 0
    1122:	19 17       	cp	r17, r25
    1124:	b8 f4       	brcc	.+46     	; 0x1154 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x6c>
    1126:	2d 91       	ld	r18, X+
    1128:	2a 33       	cpi	r18, 0x3A	; 58
    112a:	11 f0       	breq	.+4      	; 0x1130 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x48>
    112c:	1f 5f       	subi	r17, 0xFF	; 255
    112e:	f9 cf       	rjmp	.-14     	; 0x1122 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x3a>
	uint8_t i = arraySearch(buf, ':', l);
	int8_t n;
	if (i < l)
	{
		n = decodeInt(buf, 0, i);	//index goes first
    1130:	41 2f       	mov	r20, r17
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	ce 01       	movw	r24, r28
    1136:	4c db       	rcall	.-2408   	; 0x7d0 <_Z9decodeIntPKchh>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    1138:	87 fd       	sbrc	r24, 7
    113a:	09 c0       	rjmp	.+18     	; 0x114e <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x66>
    113c:	20 2f       	mov	r18, r16
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	48 2f       	mov	r20, r24
    1142:	08 2e       	mov	r0, r24
    1144:	00 0c       	add	r0, r0
    1146:	55 0b       	sbc	r21, r21
    1148:	42 17       	cp	r20, r18
    114a:	53 07       	cpc	r21, r19
    114c:	1c f1       	brlt	.+70     	; 0x1194 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xac>
	{
		if (msg) reportError(PSTR_L("Illegal index"));
    114e:	8d e7       	ldi	r24, 0x7D	; 125
    1150:	9e e1       	ldi	r25, 0x1E	; 30
    1152:	04 c0       	rjmp	.+8      	; 0x115c <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x74>
		if (buf[++i] == '0') { *var &= static_cast<T>(~(static_cast<T>(1U) << n)); }
		else { *var |= static_cast<T>(static_cast<T>(1U) << n); };
	}
	else
	{
		if (l < (sizeof(T) * CHAR_BIT))
    1154:	88 30       	cpi	r24, 0x08	; 8
    1156:	28 f4       	brcc	.+10     	; 0x1162 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x7a>
		{
			reportError(PSTR_L("Too short input"));
    1158:	80 e6       	ldi	r24, 0x60	; 96
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	b0 de       	rcall	.-672    	; 0xebe <_Z11reportErrorPKc>
			return true;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	39 c0       	rjmp	.+114    	; 0x11d4 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xec>
		if (buf[++i] == '0') { *var &= static_cast<T>(~(static_cast<T>(1U) << n)); }
		else { *var |= static_cast<T>(static_cast<T>(1U) << n); };
	}
	else
	{
		if (l < (sizeof(T) * CHAR_BIT))
    1162:	27 e0       	ldi	r18, 0x07	; 7
    1164:	30 e0       	ldi	r19, 0x00	; 0

template <typename T> void bitToInt(T* val, const char* str, uint8_t bits = sizeof(T) * 8);
template <typename T> void bitToInt(T* val, const char* str, uint8_t bits/* = sizeof(T) * 8*/)
{
	--bits;
	for (uint8_t i = 0; i <= bits; ++i) *val |= static_cast<T>((*str++ - '0') > 0) << (bits - i);
    1166:	41 91       	ld	r20, Z+
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	41 33       	cpi	r20, 0x31	; 49
    1170:	51 05       	cpc	r21, r1
    1172:	14 f4       	brge	.+4      	; 0x1178 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x90>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	01 c0       	rjmp	.+2      	; 0x117e <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x96>
    117c:	88 0f       	add	r24, r24
    117e:	0a 94       	dec	r0
    1180:	ea f7       	brpl	.-6      	; 0x117c <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x94>
    1182:	d7 01       	movw	r26, r14
    1184:	9c 91       	ld	r25, X
    1186:	89 2b       	or	r24, r25
    1188:	8c 93       	st	X, r24
    118a:	21 50       	subi	r18, 0x01	; 1
    118c:	31 09       	sbc	r19, r1
    118e:	58 f7       	brcc	.-42     	; 0x1166 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x7e>
			reportError(PSTR_L("Too short input"));
			return true;
		}
		else { bitToInt(var, buf); };
	}
	return false;
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	20 c0       	rjmp	.+64     	; 0x11d4 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xec>
	int8_t n;
	if (i < l)
	{
		n = decodeInt(buf, 0, i);	//index goes first
		if (check_index_helper(n, arr_size)) return true;
		if (buf[++i] == '0') { *var &= static_cast<T>(~(static_cast<T>(1U) << n)); }
    1194:	1f 5f       	subi	r17, 0xFF	; 255
    1196:	c1 0f       	add	r28, r17
    1198:	d1 1d       	adc	r29, r1
    119a:	98 81       	ld	r25, Y
    119c:	f7 01       	movw	r30, r14
    119e:	40 81       	ld	r20, Z
    11a0:	90 33       	cpi	r25, 0x30	; 48
    11a2:	71 f4       	brne	.+28     	; 0x11c0 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xd8>
    11a4:	21 e0       	ldi	r18, 0x01	; 1
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	f9 01       	movw	r30, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xc8>
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	8a 95       	dec	r24
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xc4>
    11b4:	cf 01       	movw	r24, r30
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	d7 01       	movw	r26, r14
    11bc:	8c 93       	st	X, r24
    11be:	e8 cf       	rjmp	.-48     	; 0x1190 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xa8>
		else { *var |= static_cast<T>(static_cast<T>(1U) << n); };
    11c0:	21 e0       	ldi	r18, 0x01	; 1
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xe0>
    11c6:	22 0f       	add	r18, r18
    11c8:	8a 95       	dec	r24
    11ca:	ea f7       	brpl	.-6      	; 0x11c6 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xde>
    11cc:	24 2b       	or	r18, r20
    11ce:	f7 01       	movw	r30, r14
    11d0:	20 83       	st	Z, r18
    11d2:	de cf       	rjmp	.-68     	; 0x1190 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0xa8>
			return true;
		}
		else { bitToInt(var, buf); };
	}
	return false;
}
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	08 95       	ret

000011e2 <main>:
		loadEEPROM();
	}
}

int main(void)
{
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	69 97       	sbiw	r28, 0x19	; 25
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
	static_assert(!((sizeof(inputs_t) * CHAR_BIT) < arraySize(input_pins) || (sizeof(outputs_t) * CHAR_BIT) < arraySize(output_pins)),
		"Too many inputs/outputs for current types of the variables.");
	//Setup watchdog
	wdt_reset();
    11f6:	a8 95       	wdr
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    11f8:	9e e0       	ldi	r25, 0x0E	; 14
    11fa:	88 e1       	ldi	r24, 0x18	; 24
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	a8 95       	wdr
    1202:	81 bd       	out	0x21, r24	; 33
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_1S);
	//Setup timer
	// Clock source: System Clock
	// Clock value: 15,625 kHz
	TCCR0 = 0x05;
    1208:	85 e0       	ldi	r24, 0x05	; 5
    120a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
    120c:	12 be       	out	0x32, r1	; 50
	TIMSK = 0x01;	//Overflow interrupt
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	89 bf       	out	0x39, r24	; 57
    1212:	aa e7       	ldi	r26, 0x7A	; 122
    1214:	ea 2e       	mov	r14, r26
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	fa 2e       	mov	r15, r26
	__builtin_unreachable();
}

void loadEEPROM()
{
	uint8_t ifr = eeprom_read_byte(&is_first_run);	//Read first run indicator byte
    121a:	86 e0       	ldi	r24, 0x06	; 6
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	0c d4       	rcall	.+2072   	; 0x1a38 <eeprom_read_byte>
	if (ifr == 1_ui8)	//If not first (or factory-reset) run actually read EEPROM
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	09 f0       	breq	.+2      	; 0x1226 <main+0x44>
    1224:	49 c0       	rjmp	.+146    	; 0x12b8 <main+0xd6>
	{
		input_compare_buf = EEPROM_READ_INPUTS(input_normal);
    1226:	81 e8       	ldi	r24, 0x81	; 129
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	06 d4       	rcall	.+2060   	; 0x1a38 <eeprom_read_byte>
    122c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <_ZL17input_compare_buf>
		override_comapre_buf = EEPROM_READ_OUTPUTS(manual_override);
    1230:	82 e8       	ldi	r24, 0x82	; 130
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	01 d4       	rcall	.+2050   	; 0x1a38 <eeprom_read_byte>
    1236:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZL20override_comapre_buf>
		actuate(EEPROM_READ_OUTPUTS(output_last));
    123a:	81 e7       	ldi	r24, 0x71	; 113
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	fc d3       	rcall	.+2040   	; 0x1a38 <eeprom_read_byte>
    1240:	c2 d7       	rcall	.+3972   	; 0x21c6 <__TEXT_REGION_LENGTH__+0x1c6>
		input_inv_buf = EEPROM_READ_INPUTS(inputs_inverted);
    1242:	83 e8       	ldi	r24, 0x83	; 131
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	f8 d3       	rcall	.+2032   	; 0x1a38 <eeprom_read_byte>
    1248:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_ZL13input_inv_buf>
		output_inv_buf = EEPROM_READ_OUTPUTS(outputs_inverted);
    124c:	84 e8       	ldi	r24, 0x84	; 132
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	f3 d3       	rcall	.+2022   	; 0x1a38 <eeprom_read_byte>
    1252:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_ZL14output_inv_buf>
    1256:	fa e7       	ldi	r31, 0x7A	; 122
    1258:	ef 2e       	mov	r14, r31
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	ff 2e       	mov	r15, r31
    125e:	04 e9       	ldi	r16, 0x94	; 148
    1260:	11 e0       	ldi	r17, 0x01	; 1
		uint8_t temp;
		for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
		{
			temp = eeprom_read_byte(&(auto_on_mapping[i]));
    1262:	c7 01       	movw	r24, r14
    1264:	e9 d3       	rcall	.+2002   	; 0x1a38 <eeprom_read_byte>
			mapping_compare_buf[i] = *reinterpret_cast<int8_t*>(&temp);
    1266:	d8 01       	movw	r26, r16
    1268:	8d 93       	st	X+, r24
    126a:	8d 01       	movw	r16, r26
    126c:	bf ef       	ldi	r27, 0xFF	; 255
    126e:	eb 1a       	sub	r14, r27
    1270:	fb 0a       	sbc	r15, r27
		override_comapre_buf = EEPROM_READ_OUTPUTS(manual_override);
		actuate(EEPROM_READ_OUTPUTS(output_last));
		input_inv_buf = EEPROM_READ_INPUTS(inputs_inverted);
		output_inv_buf = EEPROM_READ_OUTPUTS(outputs_inverted);
		uint8_t temp;
		for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
    1272:	e1 e0       	ldi	r30, 0x01	; 1
    1274:	0b 39       	cpi	r16, 0x9B	; 155
    1276:	1e 07       	cpc	r17, r30
    1278:	a1 f7       	brne	.-24     	; 0x1262 <main+0x80>
    127a:	e2 e7       	ldi	r30, 0x72	; 114
    127c:	ee 2e       	mov	r14, r30
    127e:	e0 e0       	ldi	r30, 0x00	; 0
    1280:	fe 2e       	mov	r15, r30
    1282:	0c e8       	ldi	r16, 0x8C	; 140
    1284:	11 e0       	ldi	r17, 0x01	; 1
			temp = eeprom_read_byte(&(auto_on_mapping[i]));
			mapping_compare_buf[i] = *reinterpret_cast<int8_t*>(&temp);
		}
		for (uint8_t i = 0; i < arraySize(temp_mapping_buf); ++i)
		{
			temp = eeprom_read_byte(&(temp_auto_mapping[i]));
    1286:	c7 01       	movw	r24, r14
    1288:	d7 d3       	rcall	.+1966   	; 0x1a38 <eeprom_read_byte>
			temp_mapping_buf[i] = *reinterpret_cast<int8_t*>(&temp);
    128a:	d8 01       	movw	r26, r16
    128c:	8d 93       	st	X+, r24
    128e:	8d 01       	movw	r16, r26
    1290:	bf ef       	ldi	r27, 0xFF	; 255
    1292:	eb 1a       	sub	r14, r27
    1294:	fb 0a       	sbc	r15, r27
		for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
		{
			temp = eeprom_read_byte(&(auto_on_mapping[i]));
			mapping_compare_buf[i] = *reinterpret_cast<int8_t*>(&temp);
		}
		for (uint8_t i = 0; i < arraySize(temp_mapping_buf); ++i)
    1296:	e1 e0       	ldi	r30, 0x01	; 1
    1298:	04 39       	cpi	r16, 0x94	; 148
    129a:	1e 07       	cpc	r17, r30
    129c:	a1 f7       	brne	.-24     	; 0x1286 <main+0xa4>
		{
			temp = eeprom_read_byte(&(temp_auto_mapping[i]));
			temp_mapping_buf[i] = *reinterpret_cast<int8_t*>(&temp);
		}
		temp = eeprom_read_byte(&temp_high);
    129e:	80 e7       	ldi	r24, 0x70	; 112
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	ca d3       	rcall	.+1940   	; 0x1a38 <eeprom_read_byte>
		temp_high_buf = *reinterpret_cast<int8_t*>(&temp);
    12a4:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <_ZL13temp_high_buf>
		temp = eeprom_read_byte(&pc_reset_mapping);
    12a8:	87 ed       	ldi	r24, 0xD7	; 215
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	c5 d3       	rcall	.+1930   	; 0x1a38 <eeprom_read_byte>
		pc_reset_buf = *reinterpret_cast<int8_t*>(&temp);
    12ae:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_ZL12pc_reset_buf.lto_priv.28>
    12b2:	08 ea       	ldi	r16, 0xA8	; 168
    12b4:	11 e0       	ldi	r17, 0x01	; 1
    12b6:	36 c0       	rjmp	.+108    	; 0x1324 <main+0x142>
	}
	else //If it is first run populate EEPROM with defaults
	{
		//Regular variables
		EEPROM_WRITE_INPUTS(input_normal, 0xFF);
    12b8:	6f ef       	ldi	r22, 0xFF	; 255
    12ba:	81 e8       	ldi	r24, 0x81	; 129
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	d3 d3       	rcall	.+1958   	; 0x1a66 <eeprom_update_byte>
		EEPROM_WRITE_OUTPUTS(manual_override, 0x00);
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	82 e8       	ldi	r24, 0x82	; 130
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	cf d3       	rcall	.+1950   	; 0x1a66 <eeprom_update_byte>
		EEPROM_WRITE_OUTPUTS(output_last, 0x00);
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	81 e7       	ldi	r24, 0x71	; 113
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	cb d3       	rcall	.+1942   	; 0x1a66 <eeprom_update_byte>
		EEPROM_WRITE_INPUTS(inputs_inverted, 0x00);
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	83 e8       	ldi	r24, 0x83	; 131
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	c7 d3       	rcall	.+1934   	; 0x1a66 <eeprom_update_byte>
		EEPROM_WRITE_OUTPUTS(outputs_inverted, 0x00);
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	84 e8       	ldi	r24, 0x84	; 132
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	c3 d3       	rcall	.+1926   	; 0x1a66 <eeprom_update_byte>
    12e0:	0a e7       	ldi	r16, 0x7A	; 122
    12e2:	10 e0       	ldi	r17, 0x00	; 0
		//Those, which require reinterpret casts
		int8_t negative_one = -1;
		for (uint8_t i = 0; i < arraySize(auto_on_mapping); ++i) eeprom_update_byte(&(auto_on_mapping[i]), *reinterpret_cast<uint8_t*>(&negative_one));
    12e4:	6f ef       	ldi	r22, 0xFF	; 255
    12e6:	c8 01       	movw	r24, r16
    12e8:	be d3       	rcall	.+1916   	; 0x1a66 <eeprom_update_byte>
    12ea:	0f 5f       	subi	r16, 0xFF	; 255
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	01 38       	cpi	r16, 0x81	; 129
    12f2:	1f 07       	cpc	r17, r31
    12f4:	b9 f7       	brne	.-18     	; 0x12e4 <main+0x102>
    12f6:	02 e7       	ldi	r16, 0x72	; 114
    12f8:	10 e0       	ldi	r17, 0x00	; 0
		for (uint8_t i = 0; i < arraySize(temp_auto_mapping); ++i) eeprom_update_byte(&(temp_auto_mapping[i]), *reinterpret_cast<uint8_t*>(&negative_one));
    12fa:	6f ef       	ldi	r22, 0xFF	; 255
    12fc:	c8 01       	movw	r24, r16
    12fe:	b3 d3       	rcall	.+1894   	; 0x1a66 <eeprom_update_byte>
    1300:	0f 5f       	subi	r16, 0xFF	; 255
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
    1304:	e0 16       	cp	r14, r16
    1306:	f1 06       	cpc	r15, r17
    1308:	c1 f7       	brne	.-16     	; 0x12fa <main+0x118>
		eeprom_update_byte(&pc_reset_mapping, *reinterpret_cast<uint8_t*>(&negative_one));
    130a:	6f ef       	ldi	r22, 0xFF	; 255
    130c:	87 ed       	ldi	r24, 0xD7	; 215
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	aa d3       	rcall	.+1876   	; 0x1a66 <eeprom_update_byte>
		eeprom_update_byte(&temp_high, 0x28);
    1312:	68 e2       	ldi	r22, 0x28	; 40
    1314:	80 e7       	ldi	r24, 0x70	; 112
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a6 d3       	rcall	.+1868   	; 0x1a66 <eeprom_update_byte>
		//Set the flag and
		eeprom_write_byte(&is_first_run, 1_ui8);
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	86 e0       	ldi	r24, 0x06	; 6
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	b3 d3       	rcall	.+1894   	; 0x1a88 <eeprom_write_byte>
    1322:	7b cf       	rjmp	.-266    	; 0x121a <main+0x38>
    1324:	c8 01       	movw	r24, r16
    1326:	d9 d6       	rcall	.+3506   	; 0x20da <__TEXT_REGION_LENGTH__+0xda>
    1328:	0a 5f       	subi	r16, 0xFA	; 250
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
	TCCR0 = 0x05;
	TCNT0 = 0x00;
	TIMSK = 0x01;	//Overflow interrupt
	//Setup pins
	loadEEPROM();
	for (uint8_t i = 0; i < arraySize(output_pins); ++i) pin_t::SetDirection(&(output_pins[i]), pin_t::Output);
    132c:	21 e0       	ldi	r18, 0x01	; 1
    132e:	06 3c       	cpi	r16, 0xC6	; 198
    1330:	12 07       	cpc	r17, r18
    1332:	c1 f7       	brne	.-16     	; 0x1324 <main+0x142>
	//Setup serial interface
	sei();
    1334:	78 94       	sei
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1336:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZL11UART_TxHead>
    UART_TxTail = 0;
    133a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_ZL11UART_TxTail>
    UART_RxHead = 0;
    133e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <_ZL11UART_RxHead.lto_priv.30>
    UART_RxTail = 0;
    1342:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <_ZL11UART_RxTail.lto_priv.31>
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1346:	10 bc       	out	0x20, r1	; 32
    #endif
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    1348:	87 e6       	ldi	r24, 0x67	; 103
    134a:	89 b9       	out	0x09, r24	; 9

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    134c:	88 e9       	ldi	r24, 0x98	; 152
    134e:	8a b9       	out	0x0a, r24	; 10

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    1350:	86 e8       	ldi	r24, 0x86	; 134
    1352:	80 bd       	out	0x20, r24	; 32
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
	//Discover 1-wire devices
	wdt_reset();
    1354:	a8 95       	wdr
static uint8_t LastFamilyDiscrepancy;
static bool LastDeviceFlag;

void OWbegin(pin_t* pin)
{
	OWpin = pin;
    1356:	82 ea       	ldi	r24, 0xA2	; 162
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <_ZL5OWpin.lto_priv.29+0x1>
    135e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <_ZL5OWpin.lto_priv.29>
    1362:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <_ZL6ow_pin.lto_priv.27>
    1366:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <_ZL6ow_pin.lto_priv.27+0x1>
    136a:	90 81       	ld	r25, Z
    136c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZL6ow_pin.lto_priv.27+0x2>
    1370:	80 95       	com	r24
    1372:	89 23       	and	r24, r25
    1374:	80 83       	st	Z, r24
// You do not need to do it for the first search, though you could.
//
void OWreset_search()
{
	// OWreset the search state
	LastDiscrepancy = 0;
    1376:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <_ZL15LastDiscrepancy>
	LastDeviceFlag = false;
    137a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <_ZL14LastDeviceFlag>
    137e:	79 e3       	ldi	r23, 0x39	; 57
    1380:	a7 2e       	mov	r10, r23
    1382:	71 e0       	ldi	r23, 0x01	; 1
    1384:	b7 2e       	mov	r11, r23
    1386:	81 e3       	ldi	r24, 0x31	; 49
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	f5 01       	movw	r30, r10
	LastFamilyDiscrepancy = 0;
	for(int i = 7; ; i--) {
		ROM_NO[i] = 0;
    138c:	12 92       	st	-Z, r1
		if ( i == 0) break;
    138e:	8e 17       	cp	r24, r30
    1390:	9f 07       	cpc	r25, r31
    1392:	e1 f7       	brne	.-8      	; 0x138c <main+0x1aa>
    1394:	91 2c       	mov	r9, r1
    1396:	61 e4       	ldi	r22, 0x41	; 65
    1398:	c6 2e       	mov	r12, r22
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	d6 2e       	mov	r13, r22
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1)
				ROM_NO[rom_byte_number] |= rom_byte_mask;
    139e:	77 24       	eor	r7, r7
    13a0:	73 94       	inc	r7
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = false;

	// if the last call was not the last one
	if (!LastDeviceFlag) {
    13a2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <_ZL14LastDeviceFlag>
    13a6:	81 11       	cpse	r24, r1
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <main+0x1ce>
		// 1-Wire OWreset
		if (!OWreset()) {
    13aa:	d0 d7       	rcall	.+4000   	; 0x234c <__TEXT_REGION_LENGTH__+0x34c>
    13ac:	81 11       	cpse	r24, r1
    13ae:	0a c0       	rjmp	.+20     	; 0x13c4 <main+0x1e2>
			// OWreset the search
			LastDiscrepancy = 0;
    13b0:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <_ZL15LastDiscrepancy>
			LastDeviceFlag = false;
    13b4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <_ZL14LastDeviceFlag>
	OWbegin(&ow_pin);
	ow_count = searchForDevices(ow_devices);
    13b8:	90 92 9f 01 	sts	0x019F, r9	; 0x80019f <_ZL8ow_count>
	for (uint8_t i = 0; i < ow_count; ++i) setResolution(ow_devices + i * 8_ui8);
    13bc:	f1 2c       	mov	r15, r1
}

void setResolution(const uint8_t* deviceAddress) {
	ScratchPad scratchPad;
	readScratchPad(deviceAddress, scratchPad);
	scratchPad[CONFIGURATION] = TEMP_9_BIT;
    13be:	5f e1       	ldi	r21, 0x1F	; 31
    13c0:	e5 2e       	mov	r14, r21
    13c2:	48 c0       	rjmp	.+144    	; 0x1454 <main+0x272>
			return false;
		}

		// issue the search command
		if (search_mode == true) {
			OWwrite(0xF0);   // NORMAL SEARCH
    13c4:	80 ef       	ldi	r24, 0xF0	; 240
    13c6:	e1 dc       	rcall	.-1598   	; 0xd8a <_Z7OWwritehh.constprop.21>
    13c8:	11 e0       	ldi	r17, 0x01	; 1
    13ca:	e1 2c       	mov	r14, r1
    13cc:	81 2c       	mov	r8, r1
    13ce:	01 e0       	ldi	r16, 0x01	; 1

		// loop to do the search
		do
		{
			// OWread a bit and its complement
			id_bit = OWread_bit();
    13d0:	3c d7       	rcall	.+3704   	; 0x224a <__TEXT_REGION_LENGTH__+0x24a>
    13d2:	f8 2e       	mov	r15, r24
			cmp_id_bit = OWread_bit();
    13d4:	3a d7       	rcall	.+3700   	; 0x224a <__TEXT_REGION_LENGTH__+0x24a>

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
    13d6:	31 e0       	ldi	r19, 0x01	; 1
    13d8:	f3 12       	cpse	r15, r19
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <main+0x200>
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	a9 f4       	brne	.+42     	; 0x140a <main+0x228>
    13e0:	2f c0       	rjmp	.+94     	; 0x1440 <main+0x25e>
    13e2:	ee 2d       	mov	r30, r14
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
				break;
				} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
    13e6:	f8 12       	cpse	r15, r24
    13e8:	1a c0       	rjmp	.+52     	; 0x141e <main+0x23c>
					search_direction = id_bit;  // bit OWwrite value for search
					} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < LastDiscrepancy) {
    13ea:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <_ZL15LastDiscrepancy>
    13ee:	08 17       	cp	r16, r24
    13f0:	38 f4       	brcc	.+14     	; 0x1400 <main+0x21e>
						search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    13f2:	df 01       	movw	r26, r30
    13f4:	af 5c       	subi	r26, 0xCF	; 207
    13f6:	be 4f       	sbci	r27, 0xFE	; 254
    13f8:	8c 91       	ld	r24, X
    13fa:	81 23       	and	r24, r17
    13fc:	31 f4       	brne	.+12     	; 0x140a <main+0x228>
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <main+0x222>
						} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == LastDiscrepancy);
    1400:	80 17       	cp	r24, r16
    1402:	19 f0       	breq	.+6      	; 0x140a <main+0x228>
    1404:	f1 2c       	mov	r15, r1
					}
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
    1406:	80 2e       	mov	r8, r16
    1408:	0a c0       	rjmp	.+20     	; 0x141e <main+0x23c>
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1)
				ROM_NO[rom_byte_number] |= rom_byte_mask;
    140a:	ee 2d       	mov	r30, r14
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	ef 5c       	subi	r30, 0xCF	; 207
    1410:	fe 4f       	sbci	r31, 0xFE	; 254
    1412:	80 81       	ld	r24, Z
    1414:	81 2b       	or	r24, r17
    1416:	80 83       	st	Z, r24
    1418:	ff 24       	eor	r15, r15
    141a:	f3 94       	inc	r15
    141c:	07 c0       	rjmp	.+14     	; 0x142c <main+0x24a>
				else
				ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    141e:	ef 5c       	subi	r30, 0xCF	; 207
    1420:	fe 4f       	sbci	r31, 0xFE	; 254
    1422:	90 81       	ld	r25, Z
    1424:	81 2f       	mov	r24, r17
    1426:	80 95       	com	r24
    1428:	89 23       	and	r24, r25
    142a:	80 83       	st	Z, r24

				// serial number search direction OWwrite bit
				OWwrite_bit(search_direction);
    142c:	8f 2d       	mov	r24, r15
    142e:	44 d7       	rcall	.+3720   	; 0x22b8 <__TEXT_REGION_LENGTH__+0x2b8>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
    1430:	0f 5f       	subi	r16, 0xFF	; 255
				rom_byte_mask <<= 1;
    1432:	11 0f       	add	r17, r17

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and OWreset mask
				if (rom_byte_mask == 0) {
    1434:	11 f4       	brne	.+4      	; 0x143a <main+0x258>
					rom_byte_number++;
    1436:	e3 94       	inc	r14
					rom_byte_mask = 1;
    1438:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}
		while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    143a:	87 e0       	ldi	r24, 0x07	; 7
    143c:	8e 15       	cp	r24, r14
    143e:	40 f6       	brcc	.-112    	; 0x13d0 <main+0x1ee>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
    1440:	01 34       	cpi	r16, 0x41	; 65
    1442:	08 f4       	brcc	.+2      	; 0x1446 <main+0x264>
    1444:	b5 cf       	rjmp	.-150    	; 0x13b0 <main+0x1ce>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			LastDiscrepancy = last_zero;
    1446:	80 92 3a 01 	sts	0x013A, r8	; 0x80013a <_ZL15LastDiscrepancy>

			// check for last device
			if (LastDiscrepancy == 0) {
    144a:	81 10       	cpse	r8, r1
    144c:	ea c1       	rjmp	.+980    	; 0x1822 <main+0x640>
				LastDeviceFlag = true;
    144e:	70 92 39 01 	sts	0x0139, r7	; 0x800139 <_ZL14LastDeviceFlag>
    1452:	e7 c1       	rjmp	.+974    	; 0x1822 <main+0x640>
    1454:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_ZL8ow_count>
    1458:	f8 16       	cp	r15, r24
    145a:	40 f5       	brcc	.+80     	; 0x14ac <main+0x2ca>
    145c:	98 e0       	ldi	r25, 0x08	; 8
    145e:	f9 9e       	mul	r15, r25
    1460:	80 01       	movw	r16, r0
    1462:	11 24       	eor	r1, r1
    1464:	0f 5b       	subi	r16, 0xBF	; 191
    1466:	1e 4f       	sbci	r17, 0xFE	; 254
	OWreset();
}

void setResolution(const uint8_t* deviceAddress) {
	ScratchPad scratchPad;
	readScratchPad(deviceAddress, scratchPad);
    1468:	be 01       	movw	r22, r28
    146a:	6f 5f       	subi	r22, 0xFF	; 255
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	c8 01       	movw	r24, r16
    1470:	d1 d7       	rcall	.+4002   	; 0x2414 <__TEXT_REGION_LENGTH__+0x414>
	scratchPad[CONFIGURATION] = TEMP_9_BIT;
    1472:	ed 82       	std	Y+5, r14	; 0x05
	return cnt;
}

void writeScratchPad(const uint8_t* deviceAddress,
		const uint8_t* scratchPad) {
	OWreset();
    1474:	6b d7       	rcall	.+3798   	; 0x234c <__TEXT_REGION_LENGTH__+0x34c>
	OWselect(deviceAddress);
    1476:	c8 01       	movw	r24, r16
    1478:	3a d6       	rcall	.+3188   	; 0x20ee <__TEXT_REGION_LENGTH__+0xee>
	OWwrite(WRITESCRATCH);
    147a:	8e e4       	ldi	r24, 0x4E	; 78
    147c:	86 dc       	rcall	.-1780   	; 0xd8a <_Z7OWwritehh.constprop.21>
	OWwrite(scratchPad[HIGH_ALARM_TEMP]); // high alarm temp
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	84 dc       	rcall	.-1784   	; 0xd8a <_Z7OWwritehh.constprop.21>
	OWwrite(scratchPad[LOW_ALARM_TEMP]); // low alarm temp
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	82 dc       	rcall	.-1788   	; 0xd8a <_Z7OWwritehh.constprop.21>
	OWwrite(scratchPad[CONFIGURATION]);
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	80 dc       	rcall	.-1792   	; 0xd8a <_Z7OWwritehh.constprop.21>
	OWreset();
    148a:	60 d7       	rcall	.+3776   	; 0x234c <__TEXT_REGION_LENGTH__+0x34c>
	OWselect(deviceAddress);
    148c:	c8 01       	movw	r24, r16
    148e:	2f d6       	rcall	.+3166   	; 0x20ee <__TEXT_REGION_LENGTH__+0xee>
	OWwrite(COPYSCRATCH);
    1490:	88 e4       	ldi	r24, 0x48	; 72
    1492:	7b dc       	rcall	.-1802   	; 0xd8a <_Z7OWwritehh.constprop.21>
    1494:	af ef       	ldi	r26, 0xFF	; 255
    1496:	b9 ef       	ldi	r27, 0xF9	; 249
    1498:	e0 e0       	ldi	r30, 0x00	; 0
    149a:	a1 50       	subi	r26, 0x01	; 1
    149c:	b0 40       	sbci	r27, 0x00	; 0
    149e:	e0 40       	sbci	r30, 0x00	; 0
    14a0:	e1 f7       	brne	.-8      	; 0x149a <main+0x2b8>
    14a2:	00 c0       	rjmp	.+0      	; 0x14a4 <main+0x2c2>
    14a4:	00 00       	nop
	_delay_ms(20); // <--- added 20ms delay to allow 10ms long EEPROM write operation (as specified by datasheet)
	OWreset();
    14a6:	52 d7       	rcall	.+3748   	; 0x234c <__TEXT_REGION_LENGTH__+0x34c>
    14a8:	f3 94       	inc	r15
    14aa:	d4 cf       	rjmp	.-88     	; 0x1454 <main+0x272>
	//Request temperature conversions
	wdt_reset();
    14ac:	a8 95       	wdr
	requestTemperatures();
    14ae:	e0 d7       	rcall	.+4032   	; 0x2470 <__TEXT_REGION_LENGTH__+0x470>
    14b0:	ff ef       	ldi	r31, 0xFF	; 255
    14b2:	21 ee       	ldi	r18, 0xE1	; 225
    14b4:	34 e0       	ldi	r19, 0x04	; 4
    14b6:	f1 50       	subi	r31, 0x01	; 1
    14b8:	20 40       	sbci	r18, 0x00	; 0
    14ba:	30 40       	sbci	r19, 0x00	; 0
    14bc:	e1 f7       	brne	.-8      	; 0x14b6 <main+0x2d4>
    14be:	00 c0       	rjmp	.+0      	; 0x14c0 <main+0x2de>
    14c0:	00 00       	nop
	_delay_ms(100);
	//Ready
	wdt_reset();
    14c2:	a8 95       	wdr
	cmd('P');
    14c4:	80 e5       	ldi	r24, 0x50	; 80
    14c6:	8f d9       	rcall	.-3298   	; 0x7e6 <_Z3cmdc>

void poll()
{
	uint8_t i;
	input_state_buf = 0;
	for (i = 0; i < arraySize(input_pins); ++i)	if (pin_t::Read(&(input_pins[i])) != ((input_inv_buf & BVI(i)) > 0)) input_state_buf |= BVI(i);
    14c8:	01 e0       	ldi	r16, 0x01	; 1
    14ca:	10 e0       	ldi	r17, 0x00	; 0
	cmd('P');

	unsigned int c;
	while(true)
	{
		wdt_reset();
    14cc:	a8 95       	wdr

void poll()
{
	uint8_t i;
	input_state_buf = 0;
	for (i = 0; i < arraySize(input_pins); ++i)	if (pin_t::Read(&(input_pins[i])) != ((input_inv_buf & BVI(i)) > 0)) input_state_buf |= BVI(i);
    14ce:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <_ZL13input_inv_buf>
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	e6 ec       	ldi	r30, 0xC6	; 198
    14d6:	f1 e0       	ldi	r31, 0x01	; 1
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	80 e0       	ldi	r24, 0x00	; 0
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
    14de:	a0 81       	ld	r26, Z
    14e0:	b1 81       	ldd	r27, Z+1	; 0x01
    14e2:	11 97       	sbiw	r26, 0x01	; 1
    14e4:	ac 91       	ld	r26, X
    14e6:	b8 01       	movw	r22, r16
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <main+0x30e>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <main+0x30a>
    14f4:	7a 01       	movw	r14, r20
    14f6:	e6 22       	and	r14, r22
    14f8:	f7 22       	and	r15, r23
    14fa:	b1 e0       	ldi	r27, 0x01	; 1
    14fc:	1e 14       	cp	r1, r14
    14fe:	1f 04       	cpc	r1, r15
    1500:	0c f0       	brlt	.+2      	; 0x1504 <main+0x322>
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	92 81       	ldd	r25, Z+2	; 0x02
    1506:	9a 23       	and	r25, r26
    1508:	a1 e0       	ldi	r26, 0x01	; 1
    150a:	09 f4       	brne	.+2      	; 0x150e <main+0x32c>
    150c:	a0 e0       	ldi	r26, 0x00	; 0
    150e:	ba 13       	cpse	r27, r26
    1510:	86 2b       	or	r24, r22
    1512:	2f 5f       	subi	r18, 0xFF	; 255
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	36 96       	adiw	r30, 0x06	; 6
    1518:	27 30       	cpi	r18, 0x07	; 7
    151a:	31 05       	cpc	r19, r1
    151c:	01 f7       	brne	.-64     	; 0x14de <main+0x2fc>
    151e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <_ZL15input_state_buf>
	inputs_t res = input_state_buf ^ input_compare_buf;
    1522:	50 90 9b 01 	lds	r5, 0x019B	; 0x80019b <_ZL17input_compare_buf>
    1526:	58 26       	eor	r5, r24
	inputs_t temp = res ^ last_input_diff;
    1528:	60 90 3b 01 	lds	r6, 0x013B	; 0x80013b <_ZL15last_input_diff>
    152c:	65 24       	eor	r6, r5
    152e:	44 e9       	ldi	r20, 0x94	; 148
    1530:	a4 2e       	mov	r10, r20
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	b4 2e       	mov	r11, r20
    1536:	e1 2c       	mov	r14, r1
    1538:	f1 2c       	mov	r15, r1
	for (i = 0; i < arraySize(input_pins); ++i) if (temp & BVI(i)) reaction(i, res & BVI(i));
    153a:	71 2c       	mov	r7, r1
    153c:	85 2c       	mov	r8, r5
    153e:	91 2c       	mov	r9, r1
    1540:	4e 2c       	mov	r4, r14
    1542:	17 01       	movw	r2, r14
    1544:	68 01       	movw	r12, r16
    1546:	0e 2c       	mov	r0, r14
    1548:	02 c0       	rjmp	.+4      	; 0x154e <main+0x36c>
    154a:	cc 0c       	add	r12, r12
    154c:	dd 1c       	adc	r13, r13
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <main+0x368>
    1552:	c3 01       	movw	r24, r6
    1554:	8c 21       	and	r24, r12
    1556:	9d 21       	and	r25, r13
    1558:	89 2b       	or	r24, r25
    155a:	61 f1       	breq	.+88     	; 0x15b4 <main+0x3d2>
    155c:	c8 20       	and	r12, r8
    155e:	d9 20       	and	r13, r9

void reaction(uint8_t pin_index, bool active)
{
	//Send alarm message to PC
	char buf[4];
	uart_puts(active ? "A:" : "S:");
    1560:	c1 14       	cp	r12, r1
    1562:	d1 04       	cpc	r13, r1
    1564:	19 f0       	breq	.+6      	; 0x156c <main+0x38a>
    1566:	82 ec       	ldi	r24, 0xC2	; 194
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <main+0x38e>
    156c:	87 ec       	ldi	r24, 0xC7	; 199
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	92 d7       	rcall	.+3876   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
    1572:	4a e0       	ldi	r20, 0x0A	; 10
    1574:	be 01       	movw	r22, r28
    1576:	6f 5f       	subi	r22, 0xFF	; 255
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	c1 01       	movw	r24, r2
    157c:	1a d2       	rcall	.+1076   	; 0x19b2 <__itoa_ncheck>
	uart_puts(itoa(pin_index, buf, 10));
    157e:	8b d7       	rcall	.+3862   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
	uart_puts(line_feed);
    1580:	83 e9       	ldi	r24, 0x93	; 147
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	88 d7       	rcall	.+3856   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
	//Binded outputs
	if (!check_index_helper(mapping_compare_buf[pin_index], arraySize(output_pins), false))
    1586:	d5 01       	movw	r26, r10
    1588:	8c 91       	ld	r24, X
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    158a:	85 30       	cpi	r24, 0x05	; 5
    158c:	98 f4       	brcc	.+38     	; 0x15b4 <main+0x3d2>
	uart_puts(itoa(pin_index, buf, 10));
	uart_puts(line_feed);
	//Binded outputs
	if (!check_index_helper(mapping_compare_buf[pin_index], arraySize(output_pins), false))
	{
		if (active || !(override_comapre_buf & BVO(mapping_compare_buf[pin_index])))
    158e:	c1 14       	cp	r12, r1
    1590:	d1 04       	cpc	r13, r1
    1592:	09 f0       	breq	.+2      	; 0x1596 <main+0x3b4>
    1594:	58 c1       	rjmp	.+688    	; 0x1846 <main+0x664>
    1596:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <_ZL20override_comapre_buf>
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	a8 01       	movw	r20, r16
    159e:	08 2e       	mov	r0, r24
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <main+0x3c4>
    15a2:	44 0f       	add	r20, r20
    15a4:	55 1f       	adc	r21, r21
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <main+0x3c0>
    15aa:	24 23       	and	r18, r20
    15ac:	35 23       	and	r19, r21
    15ae:	23 2b       	or	r18, r19
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <main+0x3d2>
    15b2:	49 c1       	rjmp	.+658    	; 0x1846 <main+0x664>
    15b4:	bf ef       	ldi	r27, 0xFF	; 255
    15b6:	eb 1a       	sub	r14, r27
    15b8:	fb 0a       	sbc	r15, r27
    15ba:	ef ef       	ldi	r30, 0xFF	; 255
    15bc:	ae 1a       	sub	r10, r30
    15be:	be 0a       	sbc	r11, r30
	uint8_t i;
	input_state_buf = 0;
	for (i = 0; i < arraySize(input_pins); ++i)	if (pin_t::Read(&(input_pins[i])) != ((input_inv_buf & BVI(i)) > 0)) input_state_buf |= BVI(i);
	inputs_t res = input_state_buf ^ input_compare_buf;
	inputs_t temp = res ^ last_input_diff;
	for (i = 0; i < arraySize(input_pins); ++i) if (temp & BVI(i)) reaction(i, res & BVI(i));
    15c0:	f7 e0       	ldi	r31, 0x07	; 7
    15c2:	ef 16       	cp	r14, r31
    15c4:	f1 04       	cpc	r15, r1
    15c6:	09 f0       	breq	.+2      	; 0x15ca <main+0x3e8>
    15c8:	bb cf       	rjmp	.-138    	; 0x1540 <main+0x35e>
	last_input_diff = res;
    15ca:	50 92 3b 01 	sts	0x013B, r5	; 0x80013b <_ZL15last_input_diff>
	unsigned int c;
	while(true)
	{
		wdt_reset();
		poll();
		wdt_reset();
    15ce:	a8 95       	wdr
    15d0:	a1 2c       	mov	r10, r1
    15d2:	30 e3       	ldi	r19, 0x30	; 48
    15d4:	b3 2e       	mov	r11, r19
    15d6:	20 ed       	ldi	r18, 0xD0	; 208
    15d8:	d2 2e       	mov	r13, r18
    15da:	db 0c       	add	r13, r11
}

void processOWDevices()
{
	char buf[16];
	for (uint8_t i = 0; i < ow_count; ++i)
    15dc:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_ZL8ow_count>
    15e0:	d8 16       	cp	r13, r24
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <main+0x404>
    15e4:	d4 c0       	rjmp	.+424    	; 0x178e <main+0x5ac>
	{
		uint8_t ind = i * 8_ui8;
		if (ow_devices[ind] != 0x28) continue;	//Not a DS18B20
    15e6:	8a 2d       	mov	r24, r10
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	8f 5b       	subi	r24, 0xBF	; 191
    15ec:	9e 4f       	sbci	r25, 0xFE	; 254
    15ee:	dc 01       	movw	r26, r24
    15f0:	2c 91       	ld	r18, X
    15f2:	28 32       	cpi	r18, 0x28	; 40
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <main+0x416>
    15f6:	c7 c0       	rjmp	.+398    	; 0x1786 <main+0x5a4>
	OWreset();
}

float getTemp(const uint8_t* deviceAddress) {
	ScratchPad scratchPad;
	readScratchPad(deviceAddress, scratchPad);
    15f8:	be 01       	movw	r22, r28
    15fa:	6f 5e       	subi	r22, 0xEF	; 239
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	0a d7       	rcall	.+3604   	; 0x2414 <__TEXT_REGION_LENGTH__+0x414>
    1600:	9e 01       	movw	r18, r28
    1602:	2f 5e       	subi	r18, 0xEF	; 239
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	99 e0       	ldi	r25, 0x09	; 9

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OWcrc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;
    1608:	e0 e0       	ldi	r30, 0x00	; 0
    160a:	91 50       	subi	r25, 0x01	; 1

	while (len--) {
    160c:	99 f0       	breq	.+38     	; 0x1634 <main+0x452>
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
    160e:	d9 01       	movw	r26, r18
    1610:	8d 91       	ld	r24, X+
    1612:	9d 01       	movw	r18, r26
    1614:	e8 27       	eor	r30, r24
		crc = *(dscrc2x16_table + (crc & 0x0f)) ^ *(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
    1616:	ae 2f       	mov	r26, r30
    1618:	af 70       	andi	r26, 0x0F	; 15
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	a0 59       	subi	r26, 0x90	; 144
    161e:	bf 4f       	sbci	r27, 0xFF	; 255
    1620:	4c 91       	ld	r20, X
    1622:	e2 95       	swap	r30
    1624:	ef 70       	andi	r30, 0x0F	; 15
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	e0 58       	subi	r30, 0x80	; 128
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	e4 2f       	mov	r30, r20
    1630:	e8 27       	eor	r30, r24
    1632:	eb cf       	rjmp	.-42     	; 0x160a <main+0x428>
	if (OWcrc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC])
    1634:	89 8d       	ldd	r24, Y+25	; 0x19
    1636:	8e 13       	cpse	r24, r30
    1638:	19 c0       	rjmp	.+50     	; 0x166c <main+0x48a>
	{
		int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11) | (((int16_t) scratchPad[TEMP_LSB]) << 3);
		return (float)fpTemperature * 0.0078125;
    163a:	6a 89       	ldd	r22, Y+18	; 0x12
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	76 2f       	mov	r23, r22
    1640:	66 27       	eor	r22, r22
    1642:	77 0f       	add	r23, r23
    1644:	77 0f       	add	r23, r23
    1646:	77 0f       	add	r23, r23
    1648:	89 89       	ldd	r24, Y+17	; 0x11
    164a:	b8 e0       	ldi	r27, 0x08	; 8
    164c:	8b 9f       	mul	r24, r27
    164e:	c0 01       	movw	r24, r0
    1650:	11 24       	eor	r1, r1
    1652:	68 2b       	or	r22, r24
    1654:	79 2b       	or	r23, r25
    1656:	07 2e       	mov	r0, r23
    1658:	00 0c       	add	r0, r0
    165a:	88 0b       	sbc	r24, r24
    165c:	99 0b       	sbc	r25, r25
    165e:	b9 d2       	rcall	.+1394   	; 0x1bd2 <__floatsisf>
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	5c e3       	ldi	r21, 0x3C	; 60
    1668:	40 d3       	rcall	.+1664   	; 0x1cea <__mulsf3>
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <main+0x492>
	}
	return 200;
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	88 e4       	ldi	r24, 0x48	; 72
    1672:	93 e4       	ldi	r25, 0x43	; 67
		int16_t t = static_cast<int16_t>(getTemp(ow_devices + ind));
    1674:	7b d2       	rcall	.+1270   	; 0x1b6c <__fixsfsi>
    1676:	2b 01       	movw	r4, r22
    1678:	3c 01       	movw	r6, r24
		if (abs(t) < 127)
    167a:	cb 01       	movw	r24, r22
    167c:	82 58       	subi	r24, 0x82	; 130
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	ed 2c       	mov	r14, r13
    1682:	f1 2c       	mov	r15, r1
    1684:	8d 3f       	cpi	r24, 0xFD	; 253
    1686:	91 05       	cpc	r25, r1
    1688:	08 f0       	brcs	.+2      	; 0x168c <main+0x4aa>
    168a:	65 c0       	rjmp	.+202    	; 0x1756 <main+0x574>
		{
			temperatures[i] = static_cast<int8_t>(t);
    168c:	f7 01       	movw	r30, r14
    168e:	ec 57       	subi	r30, 0x7C	; 124
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	40 82       	st	Z, r4
			if (t > temp_high_buf)
    1694:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <_ZL13temp_high_buf>
    1698:	02 2e       	mov	r0, r18
    169a:	00 0c       	add	r0, r0
    169c:	33 0b       	sbc	r19, r19
    169e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <_ZL8ow_alarm>
    16a2:	24 15       	cp	r18, r4
    16a4:	35 05       	cpc	r19, r5
    16a6:	5c f5       	brge	.+86     	; 0x16fe <main+0x51c>
			{
				if (!(ow_alarm & BV8(i)))
    16a8:	f8 01       	movw	r30, r16
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <main+0x4ce>
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	da 94       	dec	r13
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <main+0x4ca>
    16b4:	6f 01       	movw	r12, r30
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	8e 23       	and	r24, r30
    16ba:	9f 23       	and	r25, r31
    16bc:	89 2b       	or	r24, r25
    16be:	09 f0       	breq	.+2      	; 0x16c2 <main+0x4e0>
    16c0:	62 c0       	rjmp	.+196    	; 0x1786 <main+0x5a4>
				{
					uart_puts("T:A:");
    16c2:	80 ec       	ldi	r24, 0xC0	; 192
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	e7 d6       	rcall	.+3534   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
					uart_putc(NumToASCII(i));
    16c8:	8b 2d       	mov	r24, r11
    16ca:	f6 d4       	rcall	.+2540   	; 0x20b8 <__TEXT_REGION_LENGTH__+0xb8>
					uart_putc(':');
    16cc:	8a e3       	ldi	r24, 0x3A	; 58
    16ce:	f4 d4       	rcall	.+2536   	; 0x20b8 <__TEXT_REGION_LENGTH__+0xb8>
    16d0:	4a e0       	ldi	r20, 0x0A	; 10
    16d2:	be 01       	movw	r22, r28
    16d4:	6f 5f       	subi	r22, 0xFF	; 255
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	c2 01       	movw	r24, r4
    16da:	6b d1       	rcall	.+726    	; 0x19b2 <__itoa_ncheck>
					uart_puts(itoa(t, buf, 10));
    16dc:	dc d6       	rcall	.+3512   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
					uart_puts(line_feed);
    16de:	83 e9       	ldi	r24, 0x93	; 147
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	d9 d6       	rcall	.+3506   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
					ow_alarm |= BV8(i);
    16e4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <_ZL8ow_alarm>
    16e8:	c8 2a       	or	r12, r24
    16ea:	c0 92 3c 01 	sts	0x013C, r12	; 0x80013c <_ZL8ow_alarm>
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false)) actuate(temp_mapping_buf[i], true);
    16ee:	f7 01       	movw	r30, r14
    16f0:	e4 57       	subi	r30, 0x74	; 116
    16f2:	fe 4f       	sbci	r31, 0xFE	; 254
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    16f4:	80 81       	ld	r24, Z
    16f6:	85 30       	cpi	r24, 0x05	; 5
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <main+0x51a>
    16fa:	45 c0       	rjmp	.+138    	; 0x1786 <main+0x5a4>
    16fc:	cb c0       	rjmp	.+406    	; 0x1894 <main+0x6b2>
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false)) actuate(temp_mapping_buf[i], true);
				}
			}
			else
			{
				if (ow_alarm & BV8(i))
    16fe:	98 01       	movw	r18, r16
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <main+0x524>
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	da 94       	dec	r13
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <main+0x520>
    170a:	69 01       	movw	r12, r18
    170c:	dd 24       	eor	r13, r13
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	8c 21       	and	r24, r12
    1712:	9d 21       	and	r25, r13
    1714:	89 2b       	or	r24, r25
    1716:	b9 f1       	breq	.+110    	; 0x1786 <main+0x5a4>
				{
					uart_puts("T:S:");
    1718:	85 ec       	ldi	r24, 0xC5	; 197
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	bc d6       	rcall	.+3448   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
					uart_putc(NumToASCII(i));
    171e:	8b 2d       	mov	r24, r11
    1720:	cb d4       	rcall	.+2454   	; 0x20b8 <__TEXT_REGION_LENGTH__+0xb8>
					uart_putc(':');
    1722:	8a e3       	ldi	r24, 0x3A	; 58
    1724:	c9 d4       	rcall	.+2450   	; 0x20b8 <__TEXT_REGION_LENGTH__+0xb8>
    1726:	4a e0       	ldi	r20, 0x0A	; 10
    1728:	be 01       	movw	r22, r28
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	c2 01       	movw	r24, r4
    1730:	40 d1       	rcall	.+640    	; 0x19b2 <__itoa_ncheck>
					uart_puts(itoa(t, buf, 10));
    1732:	b1 d6       	rcall	.+3426   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
					uart_puts(line_feed);
    1734:	83 e9       	ldi	r24, 0x93	; 147
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	ae d6       	rcall	.+3420   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
					ow_alarm &= ~BV8(i);
    173a:	c0 94       	com	r12
    173c:	d0 94       	com	r13
    173e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <_ZL8ow_alarm>
    1742:	c8 22       	and	r12, r24
    1744:	c0 92 3c 01 	sts	0x013C, r12	; 0x80013c <_ZL8ow_alarm>
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false))
    1748:	f7 01       	movw	r30, r14
    174a:	e4 57       	subi	r30, 0x74	; 116
    174c:	fe 4f       	sbci	r31, 0xFE	; 254
    174e:	80 81       	ld	r24, Z
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    1750:	85 30       	cpi	r24, 0x05	; 5
    1752:	c8 f4       	brcc	.+50     	; 0x1786 <main+0x5a4>
    1754:	a2 c0       	rjmp	.+324    	; 0x189a <main+0x6b8>
				}
			}
		}
		else
		{
			uart_puts_P("E:Temp. ");
    1756:	82 e2       	ldi	r24, 0x22	; 34
    1758:	9e e1       	ldi	r25, 0x1E	; 30
    175a:	8f d6       	rcall	.+3358   	; 0x247a <__TEXT_REGION_LENGTH__+0x47a>
    175c:	4a e0       	ldi	r20, 0x0A	; 10
    175e:	be 01       	movw	r22, r28
    1760:	6f 5f       	subi	r22, 0xFF	; 255
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	c2 01       	movw	r24, r4
    1766:	25 d1       	rcall	.+586    	; 0x19b2 <__itoa_ncheck>
			uart_puts(itoa(t, buf, 10));
    1768:	96 d6       	rcall	.+3372   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
			uart_putc('@');
    176a:	80 e4       	ldi	r24, 0x40	; 64
    176c:	a5 d4       	rcall	.+2378   	; 0x20b8 <__TEXT_REGION_LENGTH__+0xb8>
			uart_puts_EP(&(ds_names[i]), sizeof(txt_in1));
    176e:	f7 01       	movw	r30, r14
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	e2 54       	subi	r30, 0x42	; 66
    1776:	f1 4e       	sbci	r31, 0xE1	; 225
/************************************************************************/
/*                                                                      */
/************************************************************************/
void uart_puts_EP(const uint8_t* const* p, uint8_t sz)
{
	uart_puts_E((uint8_t*)pgm_read_word(p), sz);
    1778:	85 91       	lpm	r24, Z+
    177a:	94 91       	lpm	r25, Z
    177c:	60 e1       	ldi	r22, 0x10	; 16
    177e:	96 d6       	rcall	.+3372   	; 0x24ac <__TEXT_REGION_LENGTH__+0x4ac>
			uart_puts(line_feed);
    1780:	83 e9       	ldi	r24, 0x93	; 147
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	88 d6       	rcall	.+3344   	; 0x2496 <__TEXT_REGION_LENGTH__+0x496>
    1786:	b3 94       	inc	r11
    1788:	38 e0       	ldi	r19, 0x08	; 8
    178a:	a3 0e       	add	r10, r19
    178c:	24 cf       	rjmp	.-440    	; 0x15d6 <main+0x3f4>
		}
	}
	requestTemperatures();
    178e:	70 d6       	rcall	.+3296   	; 0x2470 <__TEXT_REGION_LENGTH__+0x470>
	{
		wdt_reset();
		poll();
		wdt_reset();
		processOWDevices();
		wdt_reset();
    1790:	a8 95       	wdr
		c = uart_getc();
    1792:	d7 d6       	rcall	.+3502   	; 0x2542 <__TEXT_REGION_LENGTH__+0x542>
		if (c != UART_NO_DATA)
    1794:	81 15       	cp	r24, r1
    1796:	a1 e0       	ldi	r26, 0x01	; 1
    1798:	9a 07       	cpc	r25, r26
    179a:	89 f0       	breq	.+34     	; 0x17be <main+0x5dc>
		{
			last_comm_time = time_cnt;
    179c:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZL8time_cnt>
    17a0:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <_ZL8time_cnt+0x1>
    17a4:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <_ZL14last_comm_time+0x1>
    17a8:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <_ZL14last_comm_time>
    17ac:	ef e3       	ldi	r30, 0x3F	; 63
    17ae:	ff e1       	ldi	r31, 0x1F	; 31
    17b0:	31 97       	sbiw	r30, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <main+0x5ce>
    17b4:	00 c0       	rjmp	.+0      	; 0x17b6 <main+0x5d4>
    17b6:	00 00       	nop
			_delay_ms(2);
			cmd(static_cast<char>(c));
    17b8:	16 d8       	rcall	.-4052   	; 0x7e6 <_Z3cmdc>
			wdt_reset();
    17ba:	a8 95       	wdr
    17bc:	28 c0       	rjmp	.+80     	; 0x180e <main+0x62c>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    17be:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZL12pc_reset_buf.lto_priv.28>
    17c2:	85 30       	cpi	r24, 0x05	; 5
    17c4:	20 f5       	brcc	.+72     	; 0x180e <main+0x62c>
}

void checkPCDowntime()
{
	if (check_index_helper(pc_reset_buf, arraySize(output_pins), false)) return;
	if ((time_cnt - last_comm_time) > PC_COMM_INTERVAL)
    17c6:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZL8time_cnt>
    17ca:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <_ZL8time_cnt+0x1>
    17ce:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <_ZL14last_comm_time>
    17d2:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <_ZL14last_comm_time+0x1>
    17d6:	24 1b       	sub	r18, r20
    17d8:	35 0b       	sbc	r19, r21
    17da:	25 39       	cpi	r18, 0x95	; 149
    17dc:	36 4d       	sbci	r19, 0xD6	; 214
    17de:	b8 f0       	brcs	.+46     	; 0x180e <main+0x62c>
	{
		last_comm_time = time_cnt;
    17e0:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZL8time_cnt>
    17e4:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <_ZL8time_cnt+0x1>
    17e8:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <_ZL14last_comm_time+0x1>
    17ec:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <_ZL14last_comm_time>
		actuate(pc_reset_buf, true);
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	b7 d4       	rcall	.+2414   	; 0x2162 <__TEXT_REGION_LENGTH__+0x162>
    17f4:	ff ef       	ldi	r31, 0xFF	; 255
    17f6:	21 ee       	ldi	r18, 0xE1	; 225
    17f8:	34 e0       	ldi	r19, 0x04	; 4
    17fa:	f1 50       	subi	r31, 0x01	; 1
    17fc:	20 40       	sbci	r18, 0x00	; 0
    17fe:	30 40       	sbci	r19, 0x00	; 0
    1800:	e1 f7       	brne	.-8      	; 0x17fa <main+0x618>
    1802:	00 c0       	rjmp	.+0      	; 0x1804 <main+0x622>
    1804:	00 00       	nop
		_delay_ms(PC_RESET_PULSE_TIME);
		actuate(pc_reset_buf, false);
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZL12pc_reset_buf.lto_priv.28>
    180c:	aa d4       	rcall	.+2388   	; 0x2162 <__TEXT_REGION_LENGTH__+0x162>
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	93 ec       	ldi	r25, 0xC3	; 195
    1812:	a9 e0       	ldi	r26, 0x09	; 9
    1814:	81 50       	subi	r24, 0x01	; 1
    1816:	90 40       	sbci	r25, 0x00	; 0
    1818:	a0 40       	sbci	r26, 0x00	; 0
    181a:	e1 f7       	brne	.-8      	; 0x1814 <main+0x632>
    181c:	00 c0       	rjmp	.+0      	; 0x181e <main+0x63c>
    181e:	00 00       	nop
    1820:	55 ce       	rjmp	.-854    	; 0x14cc <main+0x2ea>
			search_result = true;
		}
	}

	// if no device found then OWreset counters so next 'search' will be like a first
	if (!search_result || !ROM_NO[0]) {
    1822:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <_ZL6ROM_NO>
    1826:	88 23       	and	r24, r24
    1828:	09 f4       	brne	.+2      	; 0x182c <main+0x64a>
    182a:	c2 cd       	rjmp	.-1148   	; 0x13b0 <main+0x1ce>
    182c:	d6 01       	movw	r26, r12
    182e:	e1 e3       	ldi	r30, 0x31	; 49
    1830:	f1 e0       	ldi	r31, 0x01	; 1
		LastDiscrepancy = 0;
		LastDeviceFlag = false;
		LastFamilyDiscrepancy = 0;
		search_result = false;
		} else {
		for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    1832:	81 91       	ld	r24, Z+
    1834:	8d 93       	st	X+, r24
    1836:	ae 16       	cp	r10, r30
    1838:	bf 06       	cpc	r11, r31
    183a:	d9 f7       	brne	.-10     	; 0x1832 <main+0x650>
uint8_t searchForDevices(uint8_t* addressArray) {
	OWreset_search();
	uint8_t cnt = 0;
	while (OWsearch(addressArray)) 
	{
		addressArray += 8;
    183c:	b8 e0       	ldi	r27, 0x08	; 8
    183e:	cb 0e       	add	r12, r27
    1840:	d1 1c       	adc	r13, r1
		++cnt;
    1842:	93 94       	inc	r9
    1844:	ae cd       	rjmp	.-1188   	; 0x13a2 <main+0x1c0>
    1846:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <_ZL15input_state_buf>
    184a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <_ZL17input_compare_buf>
    184e:	49 27       	eor	r20, r25
    1850:	50 e0       	ldi	r21, 0x00	; 0
		if (active || !(override_comapre_buf & BVO(mapping_compare_buf[pin_index])))
		{
			for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
			{
				if (( pin_index != i ) && ( mapping_compare_buf[i] == mapping_compare_buf[pin_index] )
				&& ( (input_state_buf ^ input_compare_buf) & BVI(i) )) return;
    1852:	e4 e9       	ldi	r30, 0x94	; 148
    1854:	f1 e0       	ldi	r31, 0x01	; 1
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (active || !(override_comapre_buf & BVO(mapping_compare_buf[pin_index])))
		{
			for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
			{
				if (( pin_index != i ) && ( mapping_compare_buf[i] == mapping_compare_buf[pin_index] )
    185a:	42 16       	cp	r4, r18
    185c:	79 f0       	breq	.+30     	; 0x187c <main+0x69a>
    185e:	90 81       	ld	r25, Z
    1860:	89 13       	cpse	r24, r25
    1862:	0c c0       	rjmp	.+24     	; 0x187c <main+0x69a>
				&& ( (input_state_buf ^ input_compare_buf) & BVI(i) )) return;
    1864:	b8 01       	movw	r22, r16
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <main+0x68c>
    186a:	66 0f       	add	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <main+0x688>
    1872:	64 23       	and	r22, r20
    1874:	75 23       	and	r23, r21
    1876:	67 2b       	or	r22, r23
    1878:	09 f0       	breq	.+2      	; 0x187c <main+0x69a>
    187a:	9c ce       	rjmp	.-712    	; 0x15b4 <main+0x3d2>
    187c:	2f 5f       	subi	r18, 0xFF	; 255
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	31 96       	adiw	r30, 0x01	; 1
	//Binded outputs
	if (!check_index_helper(mapping_compare_buf[pin_index], arraySize(output_pins), false))
	{
		if (active || !(override_comapre_buf & BVO(mapping_compare_buf[pin_index])))
		{
			for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
    1882:	27 30       	cpi	r18, 0x07	; 7
    1884:	31 05       	cpc	r19, r1
    1886:	49 f7       	brne	.-46     	; 0x185a <main+0x678>
			{
				if (( pin_index != i ) && ( mapping_compare_buf[i] == mapping_compare_buf[pin_index] )
				&& ( (input_state_buf ^ input_compare_buf) & BVI(i) )) return;
			}
			actuate(mapping_compare_buf[pin_index], active);
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	cd 28       	or	r12, r13
    188c:	09 f4       	brne	.+2      	; 0x1890 <main+0x6ae>
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	68 d4       	rcall	.+2256   	; 0x2162 <__TEXT_REGION_LENGTH__+0x162>
    1892:	90 ce       	rjmp	.-736    	; 0x15b4 <main+0x3d2>
					uart_putc(NumToASCII(i));
					uart_putc(':');
					uart_puts(itoa(t, buf, 10));
					uart_puts(line_feed);
					ow_alarm |= BV8(i);
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false)) actuate(temp_mapping_buf[i], true);
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	65 d4       	rcall	.+2250   	; 0x2162 <__TEXT_REGION_LENGTH__+0x162>
    1898:	76 cf       	rjmp	.-276    	; 0x1786 <main+0x5a4>
					uart_puts(itoa(t, buf, 10));
					uart_puts(line_feed);
					ow_alarm &= ~BV8(i);
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false))
					{
						if (!(override_comapre_buf & BVO(temp_mapping_buf[i]))) actuate(temp_mapping_buf[i], false);
    189a:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <_ZL20override_comapre_buf>
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	a8 01       	movw	r20, r16
    18a2:	08 2e       	mov	r0, r24
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <main+0x6c8>
    18a6:	44 0f       	add	r20, r20
    18a8:	55 1f       	adc	r21, r21
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <main+0x6c4>
    18ae:	24 23       	and	r18, r20
    18b0:	35 23       	and	r19, r21
    18b2:	23 2b       	or	r18, r19
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <main+0x6d6>
    18b6:	67 cf       	rjmp	.-306    	; 0x1786 <main+0x5a4>
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	ed cf       	rjmp	.-38     	; 0x1896 <main+0x6b4>

000018bc <_GLOBAL__sub_I_is_first_run>:
#if ENABLE_EXTRA_FEATURES
, annot_t txt
#endif
) : ddrReg(&ddr_reg), bitMask(BV8(mask))
#if ENABLE_EXTRA_FEATURES
, Text(txt)
    18bc:	e6 ec       	ldi	r30, 0xC6	; 198
    18be:	f1 e0       	ldi	r31, 0x01	; 1
    18c0:	84 e3       	ldi	r24, 0x34	; 52
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	62 83       	std	Z+2, r22	; 0x02
    18cc:	27 ec       	ldi	r18, 0xC7	; 199
    18ce:	31 e0       	ldi	r19, 0x01	; 1
    18d0:	34 83       	std	Z+4, r19	; 0x04
    18d2:	23 83       	std	Z+3, r18	; 0x03
    18d4:	97 83       	std	Z+7, r25	; 0x07
    18d6:	86 83       	std	Z+6, r24	; 0x06
    18d8:	22 e0       	ldi	r18, 0x02	; 2
    18da:	20 87       	std	Z+8, r18	; 0x08
    18dc:	27 eb       	ldi	r18, 0xB7	; 183
    18de:	31 e0       	ldi	r19, 0x01	; 1
    18e0:	32 87       	std	Z+10, r19	; 0x0a
    18e2:	21 87       	std	Z+9, r18	; 0x09
    18e4:	95 87       	std	Z+13, r25	; 0x0d
    18e6:	84 87       	std	Z+12, r24	; 0x0c
    18e8:	54 e0       	ldi	r21, 0x04	; 4
    18ea:	56 87       	std	Z+14, r21	; 0x0e
    18ec:	27 ea       	ldi	r18, 0xA7	; 167
    18ee:	31 e0       	ldi	r19, 0x01	; 1
    18f0:	30 8b       	std	Z+16, r19	; 0x10
    18f2:	27 87       	std	Z+15, r18	; 0x0f
    18f4:	93 8b       	std	Z+19, r25	; 0x13
    18f6:	82 8b       	std	Z+18, r24	; 0x12
    18f8:	28 e0       	ldi	r18, 0x08	; 8
    18fa:	24 8b       	std	Z+20, r18	; 0x14
    18fc:	27 e9       	ldi	r18, 0x97	; 151
    18fe:	31 e0       	ldi	r19, 0x01	; 1
    1900:	36 8b       	std	Z+22, r19	; 0x16
    1902:	25 8b       	std	Z+21, r18	; 0x15
    1904:	91 8f       	std	Z+25, r25	; 0x19
    1906:	80 8f       	std	Z+24, r24	; 0x18
    1908:	40 e1       	ldi	r20, 0x10	; 16
    190a:	42 8f       	std	Z+26, r20	; 0x1a
    190c:	27 e8       	ldi	r18, 0x87	; 135
    190e:	31 e0       	ldi	r19, 0x01	; 1
    1910:	34 8f       	std	Z+28, r19	; 0x1c
    1912:	23 8f       	std	Z+27, r18	; 0x1b
    1914:	97 8f       	std	Z+31, r25	; 0x1f
    1916:	86 8f       	std	Z+30, r24	; 0x1e
    1918:	20 e2       	ldi	r18, 0x20	; 32
    191a:	20 a3       	std	Z+32, r18	; 0x20
    191c:	87 e7       	ldi	r24, 0x77	; 119
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	92 a3       	std	Z+34, r25	; 0x22
    1922:	81 a3       	std	Z+33, r24	; 0x21
    1924:	81 e3       	ldi	r24, 0x31	; 49
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	95 a3       	std	Z+37, r25	; 0x25
    192a:	84 a3       	std	Z+36, r24	; 0x24
    192c:	26 a3       	std	Z+38, r18	; 0x26
    192e:	27 e6       	ldi	r18, 0x67	; 103
    1930:	31 e0       	ldi	r19, 0x01	; 1
    1932:	30 a7       	std	Z+40, r19	; 0x28
    1934:	27 a3       	std	Z+39, r18	; 0x27
    1936:	e8 ea       	ldi	r30, 0xA8	; 168
    1938:	f1 e0       	ldi	r31, 0x01	; 1
    193a:	27 e3       	ldi	r18, 0x37	; 55
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	31 83       	std	Z+1, r19	; 0x01
    1940:	20 83       	st	Z, r18
    1942:	42 83       	std	Z+2, r20	; 0x02
    1944:	a7 e5       	ldi	r26, 0x57	; 87
    1946:	b1 e0       	ldi	r27, 0x01	; 1
    1948:	b4 83       	std	Z+4, r27	; 0x04
    194a:	a3 83       	std	Z+3, r26	; 0x03
    194c:	37 83       	std	Z+7, r19	; 0x07
    194e:	26 83       	std	Z+6, r18	; 0x06
    1950:	60 87       	std	Z+8, r22	; 0x08
    1952:	67 e4       	ldi	r22, 0x47	; 71
    1954:	71 e0       	ldi	r23, 0x01	; 1
    1956:	72 87       	std	Z+10, r23	; 0x0a
    1958:	61 87       	std	Z+9, r22	; 0x09
    195a:	95 87       	std	Z+13, r25	; 0x0d
    195c:	84 87       	std	Z+12, r24	; 0x0c
    195e:	60 e8       	ldi	r22, 0x80	; 128
    1960:	66 87       	std	Z+14, r22	; 0x0e
    1962:	67 e3       	ldi	r22, 0x37	; 55
    1964:	71 e0       	ldi	r23, 0x01	; 1
    1966:	70 8b       	std	Z+16, r23	; 0x10
    1968:	67 87       	std	Z+15, r22	; 0x0f
    196a:	93 8b       	std	Z+19, r25	; 0x13
    196c:	82 8b       	std	Z+18, r24	; 0x12
    196e:	60 e4       	ldi	r22, 0x40	; 64
    1970:	64 8b       	std	Z+20, r22	; 0x14
    1972:	67 e2       	ldi	r22, 0x27	; 39
    1974:	71 e0       	ldi	r23, 0x01	; 1
    1976:	76 8b       	std	Z+22, r23	; 0x16
    1978:	65 8b       	std	Z+21, r22	; 0x15
    197a:	91 8f       	std	Z+25, r25	; 0x19
    197c:	80 8f       	std	Z+24, r24	; 0x18
    197e:	42 8f       	std	Z+26, r20	; 0x1a
    1980:	87 e1       	ldi	r24, 0x17	; 23
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	94 8f       	std	Z+28, r25	; 0x1c
    1986:	83 8f       	std	Z+27, r24	; 0x1b
    1988:	e2 ea       	ldi	r30, 0xA2	; 162
    198a:	f1 e0       	ldi	r31, 0x01	; 1
    198c:	31 83       	std	Z+1, r19	; 0x01
    198e:	20 83       	st	Z, r18
    1990:	52 83       	std	Z+2, r21	; 0x02
    1992:	87 e0       	ldi	r24, 0x07	; 7
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	94 83       	std	Z+4, r25	; 0x04
    1998:	83 83       	std	Z+3, r24	; 0x03
    199a:	08 95       	ret

0000199c <strnlen>:
    199c:	fc 01       	movw	r30, r24
    199e:	61 50       	subi	r22, 0x01	; 1
    19a0:	70 40       	sbci	r23, 0x00	; 0
    19a2:	01 90       	ld	r0, Z+
    19a4:	01 10       	cpse	r0, r1
    19a6:	d8 f7       	brcc	.-10     	; 0x199e <strnlen+0x2>
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	8e 0f       	add	r24, r30
    19ae:	9f 1f       	adc	r25, r31
    19b0:	08 95       	ret

000019b2 <__itoa_ncheck>:
    19b2:	bb 27       	eor	r27, r27
    19b4:	4a 30       	cpi	r20, 0x0A	; 10
    19b6:	31 f4       	brne	.+12     	; 0x19c4 <__itoa_ncheck+0x12>
    19b8:	99 23       	and	r25, r25
    19ba:	22 f4       	brpl	.+8      	; 0x19c4 <__itoa_ncheck+0x12>
    19bc:	bd e2       	ldi	r27, 0x2D	; 45
    19be:	90 95       	com	r25
    19c0:	81 95       	neg	r24
    19c2:	9f 4f       	sbci	r25, 0xFF	; 255
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <__utoa_common>

000019c6 <__utoa_ncheck>:
    19c6:	bb 27       	eor	r27, r27

000019c8 <__utoa_common>:
    19c8:	fb 01       	movw	r30, r22
    19ca:	55 27       	eor	r21, r21
    19cc:	aa 27       	eor	r26, r26
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	aa 1f       	adc	r26, r26
    19d4:	a4 17       	cp	r26, r20
    19d6:	10 f0       	brcs	.+4      	; 0x19dc <__utoa_common+0x14>
    19d8:	a4 1b       	sub	r26, r20
    19da:	83 95       	inc	r24
    19dc:	50 51       	subi	r21, 0x10	; 16
    19de:	b9 f7       	brne	.-18     	; 0x19ce <__utoa_common+0x6>
    19e0:	a0 5d       	subi	r26, 0xD0	; 208
    19e2:	aa 33       	cpi	r26, 0x3A	; 58
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <__utoa_common+0x20>
    19e6:	a9 5d       	subi	r26, 0xD9	; 217
    19e8:	a1 93       	st	Z+, r26
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	79 f7       	brne	.-34     	; 0x19cc <__utoa_common+0x4>
    19ee:	b1 11       	cpse	r27, r1
    19f0:	b1 93       	st	Z+, r27
    19f2:	11 92       	st	Z+, r1
    19f4:	cb 01       	movw	r24, r22
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <strrev>

000019f8 <strrev>:
    19f8:	dc 01       	movw	r26, r24
    19fa:	fc 01       	movw	r30, r24
    19fc:	67 2f       	mov	r22, r23
    19fe:	71 91       	ld	r23, Z+
    1a00:	77 23       	and	r23, r23
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <strrev+0x4>
    1a04:	32 97       	sbiw	r30, 0x02	; 2
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <strrev+0x18>
    1a08:	7c 91       	ld	r23, X
    1a0a:	6d 93       	st	X+, r22
    1a0c:	70 83       	st	Z, r23
    1a0e:	62 91       	ld	r22, -Z
    1a10:	ae 17       	cp	r26, r30
    1a12:	bf 07       	cpc	r27, r31
    1a14:	c8 f3       	brcs	.-14     	; 0x1a08 <strrev+0x10>
    1a16:	08 95       	ret

00001a18 <eeprom_read_block>:
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22

00001a1c <eeprom_read_blraw>:
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	e1 99       	sbic	0x1c, 1	; 28
    1a20:	fe cf       	rjmp	.-4      	; 0x1a1e <eeprom_read_blraw+0x2>
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <eeprom_read_blraw+0x14>
    1a24:	ff bb       	out	0x1f, r31	; 31
    1a26:	ee bb       	out	0x1e, r30	; 30
    1a28:	e0 9a       	sbi	0x1c, 0	; 28
    1a2a:	31 96       	adiw	r30, 0x01	; 1
    1a2c:	0d b2       	in	r0, 0x1d	; 29
    1a2e:	0d 92       	st	X+, r0
    1a30:	41 50       	subi	r20, 0x01	; 1
    1a32:	50 40       	sbci	r21, 0x00	; 0
    1a34:	b8 f7       	brcc	.-18     	; 0x1a24 <eeprom_read_blraw+0x8>
    1a36:	08 95       	ret

00001a38 <eeprom_read_byte>:
    1a38:	e1 99       	sbic	0x1c, 1	; 28
    1a3a:	fe cf       	rjmp	.-4      	; 0x1a38 <eeprom_read_byte>
    1a3c:	9f bb       	out	0x1f, r25	; 31
    1a3e:	8e bb       	out	0x1e, r24	; 30
    1a40:	e0 9a       	sbi	0x1c, 0	; 28
    1a42:	99 27       	eor	r25, r25
    1a44:	8d b3       	in	r24, 0x1d	; 29
    1a46:	08 95       	ret

00001a48 <eeprom_update_block>:
    1a48:	dc 01       	movw	r26, r24
    1a4a:	a4 0f       	add	r26, r20
    1a4c:	b5 1f       	adc	r27, r21
    1a4e:	41 50       	subi	r20, 0x01	; 1
    1a50:	50 40       	sbci	r21, 0x00	; 0
    1a52:	40 f0       	brcs	.+16     	; 0x1a64 <eeprom_update_block+0x1c>
    1a54:	cb 01       	movw	r24, r22
    1a56:	84 0f       	add	r24, r20
    1a58:	95 1f       	adc	r25, r21
    1a5a:	2e 91       	ld	r18, -X
    1a5c:	05 d0       	rcall	.+10     	; 0x1a68 <eeprom_update_r18>
    1a5e:	41 50       	subi	r20, 0x01	; 1
    1a60:	50 40       	sbci	r21, 0x00	; 0
    1a62:	d8 f7       	brcc	.-10     	; 0x1a5a <eeprom_update_block+0x12>
    1a64:	08 95       	ret

00001a66 <eeprom_update_byte>:
    1a66:	26 2f       	mov	r18, r22

00001a68 <eeprom_update_r18>:
    1a68:	e1 99       	sbic	0x1c, 1	; 28
    1a6a:	fe cf       	rjmp	.-4      	; 0x1a68 <eeprom_update_r18>
    1a6c:	9f bb       	out	0x1f, r25	; 31
    1a6e:	8e bb       	out	0x1e, r24	; 30
    1a70:	e0 9a       	sbi	0x1c, 0	; 28
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	0d b2       	in	r0, 0x1d	; 29
    1a76:	02 16       	cp	r0, r18
    1a78:	31 f0       	breq	.+12     	; 0x1a86 <eeprom_update_r18+0x1e>
    1a7a:	2d bb       	out	0x1d, r18	; 29
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	e2 9a       	sbi	0x1c, 2	; 28
    1a82:	e1 9a       	sbi	0x1c, 1	; 28
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	08 95       	ret

00001a88 <eeprom_write_byte>:
    1a88:	26 2f       	mov	r18, r22

00001a8a <eeprom_write_r18>:
    1a8a:	e1 99       	sbic	0x1c, 1	; 28
    1a8c:	fe cf       	rjmp	.-4      	; 0x1a8a <eeprom_write_r18>
    1a8e:	9f bb       	out	0x1f, r25	; 31
    1a90:	8e bb       	out	0x1e, r24	; 30
    1a92:	2d bb       	out	0x1d, r18	; 29
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	e2 9a       	sbi	0x1c, 2	; 28
    1a9a:	e1 9a       	sbi	0x1c, 1	; 28
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	08 95       	ret

00001aa2 <__subsf3>:
    1aa2:	50 58       	subi	r21, 0x80	; 128

00001aa4 <__addsf3>:
    1aa4:	bb 27       	eor	r27, r27
    1aa6:	aa 27       	eor	r26, r26
    1aa8:	0e d0       	rcall	.+28     	; 0x1ac6 <__addsf3x>
    1aaa:	e5 c0       	rjmp	.+458    	; 0x1c76 <__fp_round>
    1aac:	d6 d0       	rcall	.+428    	; 0x1c5a <__fp_pscA>
    1aae:	30 f0       	brcs	.+12     	; 0x1abc <__addsf3+0x18>
    1ab0:	db d0       	rcall	.+438    	; 0x1c68 <__fp_pscB>
    1ab2:	20 f0       	brcs	.+8      	; 0x1abc <__addsf3+0x18>
    1ab4:	31 f4       	brne	.+12     	; 0x1ac2 <__addsf3+0x1e>
    1ab6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <__addsf3+0x1a>
    1aba:	1e f4       	brtc	.+6      	; 0x1ac2 <__addsf3+0x1e>
    1abc:	cb c0       	rjmp	.+406    	; 0x1c54 <__fp_nan>
    1abe:	0e f4       	brtc	.+2      	; 0x1ac2 <__addsf3+0x1e>
    1ac0:	e0 95       	com	r30
    1ac2:	e7 fb       	bst	r30, 7
    1ac4:	c1 c0       	rjmp	.+386    	; 0x1c48 <__fp_inf>

00001ac6 <__addsf3x>:
    1ac6:	e9 2f       	mov	r30, r25
    1ac8:	e7 d0       	rcall	.+462    	; 0x1c98 <__fp_split3>
    1aca:	80 f3       	brcs	.-32     	; 0x1aac <__addsf3+0x8>
    1acc:	ba 17       	cp	r27, r26
    1ace:	62 07       	cpc	r22, r18
    1ad0:	73 07       	cpc	r23, r19
    1ad2:	84 07       	cpc	r24, r20
    1ad4:	95 07       	cpc	r25, r21
    1ad6:	18 f0       	brcs	.+6      	; 0x1ade <__addsf3x+0x18>
    1ad8:	71 f4       	brne	.+28     	; 0x1af6 <__addsf3x+0x30>
    1ada:	9e f5       	brtc	.+102    	; 0x1b42 <__addsf3x+0x7c>
    1adc:	ff c0       	rjmp	.+510    	; 0x1cdc <__fp_zero>
    1ade:	0e f4       	brtc	.+2      	; 0x1ae2 <__addsf3x+0x1c>
    1ae0:	e0 95       	com	r30
    1ae2:	0b 2e       	mov	r0, r27
    1ae4:	ba 2f       	mov	r27, r26
    1ae6:	a0 2d       	mov	r26, r0
    1ae8:	0b 01       	movw	r0, r22
    1aea:	b9 01       	movw	r22, r18
    1aec:	90 01       	movw	r18, r0
    1aee:	0c 01       	movw	r0, r24
    1af0:	ca 01       	movw	r24, r20
    1af2:	a0 01       	movw	r20, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	ff 27       	eor	r31, r31
    1af8:	59 1b       	sub	r21, r25
    1afa:	99 f0       	breq	.+38     	; 0x1b22 <__addsf3x+0x5c>
    1afc:	59 3f       	cpi	r21, 0xF9	; 249
    1afe:	50 f4       	brcc	.+20     	; 0x1b14 <__addsf3x+0x4e>
    1b00:	50 3e       	cpi	r21, 0xE0	; 224
    1b02:	68 f1       	brcs	.+90     	; 0x1b5e <__addsf3x+0x98>
    1b04:	1a 16       	cp	r1, r26
    1b06:	f0 40       	sbci	r31, 0x00	; 0
    1b08:	a2 2f       	mov	r26, r18
    1b0a:	23 2f       	mov	r18, r19
    1b0c:	34 2f       	mov	r19, r20
    1b0e:	44 27       	eor	r20, r20
    1b10:	58 5f       	subi	r21, 0xF8	; 248
    1b12:	f3 cf       	rjmp	.-26     	; 0x1afa <__addsf3x+0x34>
    1b14:	46 95       	lsr	r20
    1b16:	37 95       	ror	r19
    1b18:	27 95       	ror	r18
    1b1a:	a7 95       	ror	r26
    1b1c:	f0 40       	sbci	r31, 0x00	; 0
    1b1e:	53 95       	inc	r21
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__addsf3x+0x4e>
    1b22:	7e f4       	brtc	.+30     	; 0x1b42 <__addsf3x+0x7c>
    1b24:	1f 16       	cp	r1, r31
    1b26:	ba 0b       	sbc	r27, r26
    1b28:	62 0b       	sbc	r22, r18
    1b2a:	73 0b       	sbc	r23, r19
    1b2c:	84 0b       	sbc	r24, r20
    1b2e:	ba f0       	brmi	.+46     	; 0x1b5e <__addsf3x+0x98>
    1b30:	91 50       	subi	r25, 0x01	; 1
    1b32:	a1 f0       	breq	.+40     	; 0x1b5c <__addsf3x+0x96>
    1b34:	ff 0f       	add	r31, r31
    1b36:	bb 1f       	adc	r27, r27
    1b38:	66 1f       	adc	r22, r22
    1b3a:	77 1f       	adc	r23, r23
    1b3c:	88 1f       	adc	r24, r24
    1b3e:	c2 f7       	brpl	.-16     	; 0x1b30 <__addsf3x+0x6a>
    1b40:	0e c0       	rjmp	.+28     	; 0x1b5e <__addsf3x+0x98>
    1b42:	ba 0f       	add	r27, r26
    1b44:	62 1f       	adc	r22, r18
    1b46:	73 1f       	adc	r23, r19
    1b48:	84 1f       	adc	r24, r20
    1b4a:	48 f4       	brcc	.+18     	; 0x1b5e <__addsf3x+0x98>
    1b4c:	87 95       	ror	r24
    1b4e:	77 95       	ror	r23
    1b50:	67 95       	ror	r22
    1b52:	b7 95       	ror	r27
    1b54:	f7 95       	ror	r31
    1b56:	9e 3f       	cpi	r25, 0xFE	; 254
    1b58:	08 f0       	brcs	.+2      	; 0x1b5c <__addsf3x+0x96>
    1b5a:	b3 cf       	rjmp	.-154    	; 0x1ac2 <__addsf3+0x1e>
    1b5c:	93 95       	inc	r25
    1b5e:	88 0f       	add	r24, r24
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <__addsf3x+0x9e>
    1b62:	99 27       	eor	r25, r25
    1b64:	ee 0f       	add	r30, r30
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	08 95       	ret

00001b6c <__fixsfsi>:
    1b6c:	04 d0       	rcall	.+8      	; 0x1b76 <__fixunssfsi>
    1b6e:	68 94       	set
    1b70:	b1 11       	cpse	r27, r1
    1b72:	b5 c0       	rjmp	.+362    	; 0x1cde <__fp_szero>
    1b74:	08 95       	ret

00001b76 <__fixunssfsi>:
    1b76:	98 d0       	rcall	.+304    	; 0x1ca8 <__fp_splitA>
    1b78:	88 f0       	brcs	.+34     	; 0x1b9c <__fixunssfsi+0x26>
    1b7a:	9f 57       	subi	r25, 0x7F	; 127
    1b7c:	90 f0       	brcs	.+36     	; 0x1ba2 <__fixunssfsi+0x2c>
    1b7e:	b9 2f       	mov	r27, r25
    1b80:	99 27       	eor	r25, r25
    1b82:	b7 51       	subi	r27, 0x17	; 23
    1b84:	a0 f0       	brcs	.+40     	; 0x1bae <__fixunssfsi+0x38>
    1b86:	d1 f0       	breq	.+52     	; 0x1bbc <__fixunssfsi+0x46>
    1b88:	66 0f       	add	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	1a f0       	brmi	.+6      	; 0x1b98 <__fixunssfsi+0x22>
    1b92:	ba 95       	dec	r27
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <__fixunssfsi+0x12>
    1b96:	12 c0       	rjmp	.+36     	; 0x1bbc <__fixunssfsi+0x46>
    1b98:	b1 30       	cpi	r27, 0x01	; 1
    1b9a:	81 f0       	breq	.+32     	; 0x1bbc <__fixunssfsi+0x46>
    1b9c:	9f d0       	rcall	.+318    	; 0x1cdc <__fp_zero>
    1b9e:	b1 e0       	ldi	r27, 0x01	; 1
    1ba0:	08 95       	ret
    1ba2:	9c c0       	rjmp	.+312    	; 0x1cdc <__fp_zero>
    1ba4:	67 2f       	mov	r22, r23
    1ba6:	78 2f       	mov	r23, r24
    1ba8:	88 27       	eor	r24, r24
    1baa:	b8 5f       	subi	r27, 0xF8	; 248
    1bac:	39 f0       	breq	.+14     	; 0x1bbc <__fixunssfsi+0x46>
    1bae:	b9 3f       	cpi	r27, 0xF9	; 249
    1bb0:	cc f3       	brlt	.-14     	; 0x1ba4 <__fixunssfsi+0x2e>
    1bb2:	86 95       	lsr	r24
    1bb4:	77 95       	ror	r23
    1bb6:	67 95       	ror	r22
    1bb8:	b3 95       	inc	r27
    1bba:	d9 f7       	brne	.-10     	; 0x1bb2 <__fixunssfsi+0x3c>
    1bbc:	3e f4       	brtc	.+14     	; 0x1bcc <__fixunssfsi+0x56>
    1bbe:	90 95       	com	r25
    1bc0:	80 95       	com	r24
    1bc2:	70 95       	com	r23
    1bc4:	61 95       	neg	r22
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	08 95       	ret

00001bce <__floatunsisf>:
    1bce:	e8 94       	clt
    1bd0:	09 c0       	rjmp	.+18     	; 0x1be4 <__floatsisf+0x12>

00001bd2 <__floatsisf>:
    1bd2:	97 fb       	bst	r25, 7
    1bd4:	3e f4       	brtc	.+14     	; 0x1be4 <__floatsisf+0x12>
    1bd6:	90 95       	com	r25
    1bd8:	80 95       	com	r24
    1bda:	70 95       	com	r23
    1bdc:	61 95       	neg	r22
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	8f 4f       	sbci	r24, 0xFF	; 255
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	99 23       	and	r25, r25
    1be6:	a9 f0       	breq	.+42     	; 0x1c12 <__floatsisf+0x40>
    1be8:	f9 2f       	mov	r31, r25
    1bea:	96 e9       	ldi	r25, 0x96	; 150
    1bec:	bb 27       	eor	r27, r27
    1bee:	93 95       	inc	r25
    1bf0:	f6 95       	lsr	r31
    1bf2:	87 95       	ror	r24
    1bf4:	77 95       	ror	r23
    1bf6:	67 95       	ror	r22
    1bf8:	b7 95       	ror	r27
    1bfa:	f1 11       	cpse	r31, r1
    1bfc:	f8 cf       	rjmp	.-16     	; 0x1bee <__floatsisf+0x1c>
    1bfe:	fa f4       	brpl	.+62     	; 0x1c3e <__floatsisf+0x6c>
    1c00:	bb 0f       	add	r27, r27
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <__floatsisf+0x36>
    1c04:	60 ff       	sbrs	r22, 0
    1c06:	1b c0       	rjmp	.+54     	; 0x1c3e <__floatsisf+0x6c>
    1c08:	6f 5f       	subi	r22, 0xFF	; 255
    1c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c10:	16 c0       	rjmp	.+44     	; 0x1c3e <__floatsisf+0x6c>
    1c12:	88 23       	and	r24, r24
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <__floatsisf+0x48>
    1c16:	96 e9       	ldi	r25, 0x96	; 150
    1c18:	11 c0       	rjmp	.+34     	; 0x1c3c <__floatsisf+0x6a>
    1c1a:	77 23       	and	r23, r23
    1c1c:	21 f0       	breq	.+8      	; 0x1c26 <__floatsisf+0x54>
    1c1e:	9e e8       	ldi	r25, 0x8E	; 142
    1c20:	87 2f       	mov	r24, r23
    1c22:	76 2f       	mov	r23, r22
    1c24:	05 c0       	rjmp	.+10     	; 0x1c30 <__floatsisf+0x5e>
    1c26:	66 23       	and	r22, r22
    1c28:	71 f0       	breq	.+28     	; 0x1c46 <__floatsisf+0x74>
    1c2a:	96 e8       	ldi	r25, 0x86	; 134
    1c2c:	86 2f       	mov	r24, r22
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	2a f0       	brmi	.+10     	; 0x1c3e <__floatsisf+0x6c>
    1c34:	9a 95       	dec	r25
    1c36:	66 0f       	add	r22, r22
    1c38:	77 1f       	adc	r23, r23
    1c3a:	88 1f       	adc	r24, r24
    1c3c:	da f7       	brpl	.-10     	; 0x1c34 <__floatsisf+0x62>
    1c3e:	88 0f       	add	r24, r24
    1c40:	96 95       	lsr	r25
    1c42:	87 95       	ror	r24
    1c44:	97 f9       	bld	r25, 7
    1c46:	08 95       	ret

00001c48 <__fp_inf>:
    1c48:	97 f9       	bld	r25, 7
    1c4a:	9f 67       	ori	r25, 0x7F	; 127
    1c4c:	80 e8       	ldi	r24, 0x80	; 128
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	08 95       	ret

00001c54 <__fp_nan>:
    1c54:	9f ef       	ldi	r25, 0xFF	; 255
    1c56:	80 ec       	ldi	r24, 0xC0	; 192
    1c58:	08 95       	ret

00001c5a <__fp_pscA>:
    1c5a:	00 24       	eor	r0, r0
    1c5c:	0a 94       	dec	r0
    1c5e:	16 16       	cp	r1, r22
    1c60:	17 06       	cpc	r1, r23
    1c62:	18 06       	cpc	r1, r24
    1c64:	09 06       	cpc	r0, r25
    1c66:	08 95       	ret

00001c68 <__fp_pscB>:
    1c68:	00 24       	eor	r0, r0
    1c6a:	0a 94       	dec	r0
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	14 06       	cpc	r1, r20
    1c72:	05 06       	cpc	r0, r21
    1c74:	08 95       	ret

00001c76 <__fp_round>:
    1c76:	09 2e       	mov	r0, r25
    1c78:	03 94       	inc	r0
    1c7a:	00 0c       	add	r0, r0
    1c7c:	11 f4       	brne	.+4      	; 0x1c82 <__fp_round+0xc>
    1c7e:	88 23       	and	r24, r24
    1c80:	52 f0       	brmi	.+20     	; 0x1c96 <__fp_round+0x20>
    1c82:	bb 0f       	add	r27, r27
    1c84:	40 f4       	brcc	.+16     	; 0x1c96 <__fp_round+0x20>
    1c86:	bf 2b       	or	r27, r31
    1c88:	11 f4       	brne	.+4      	; 0x1c8e <__fp_round+0x18>
    1c8a:	60 ff       	sbrs	r22, 0
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <__fp_round+0x20>
    1c8e:	6f 5f       	subi	r22, 0xFF	; 255
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	8f 4f       	sbci	r24, 0xFF	; 255
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	08 95       	ret

00001c98 <__fp_split3>:
    1c98:	57 fd       	sbrc	r21, 7
    1c9a:	90 58       	subi	r25, 0x80	; 128
    1c9c:	44 0f       	add	r20, r20
    1c9e:	55 1f       	adc	r21, r21
    1ca0:	59 f0       	breq	.+22     	; 0x1cb8 <__fp_splitA+0x10>
    1ca2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca4:	71 f0       	breq	.+28     	; 0x1cc2 <__fp_splitA+0x1a>
    1ca6:	47 95       	ror	r20

00001ca8 <__fp_splitA>:
    1ca8:	88 0f       	add	r24, r24
    1caa:	97 fb       	bst	r25, 7
    1cac:	99 1f       	adc	r25, r25
    1cae:	61 f0       	breq	.+24     	; 0x1cc8 <__fp_splitA+0x20>
    1cb0:	9f 3f       	cpi	r25, 0xFF	; 255
    1cb2:	79 f0       	breq	.+30     	; 0x1cd2 <__fp_splitA+0x2a>
    1cb4:	87 95       	ror	r24
    1cb6:	08 95       	ret
    1cb8:	12 16       	cp	r1, r18
    1cba:	13 06       	cpc	r1, r19
    1cbc:	14 06       	cpc	r1, r20
    1cbe:	55 1f       	adc	r21, r21
    1cc0:	f2 cf       	rjmp	.-28     	; 0x1ca6 <__fp_split3+0xe>
    1cc2:	46 95       	lsr	r20
    1cc4:	f1 df       	rcall	.-30     	; 0x1ca8 <__fp_splitA>
    1cc6:	08 c0       	rjmp	.+16     	; 0x1cd8 <__fp_splitA+0x30>
    1cc8:	16 16       	cp	r1, r22
    1cca:	17 06       	cpc	r1, r23
    1ccc:	18 06       	cpc	r1, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	f1 cf       	rjmp	.-30     	; 0x1cb4 <__fp_splitA+0xc>
    1cd2:	86 95       	lsr	r24
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	61 05       	cpc	r22, r1
    1cd8:	08 94       	sec
    1cda:	08 95       	ret

00001cdc <__fp_zero>:
    1cdc:	e8 94       	clt

00001cde <__fp_szero>:
    1cde:	bb 27       	eor	r27, r27
    1ce0:	66 27       	eor	r22, r22
    1ce2:	77 27       	eor	r23, r23
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	97 f9       	bld	r25, 7
    1ce8:	08 95       	ret

00001cea <__mulsf3>:
    1cea:	0b d0       	rcall	.+22     	; 0x1d02 <__mulsf3x>
    1cec:	c4 cf       	rjmp	.-120    	; 0x1c76 <__fp_round>
    1cee:	b5 df       	rcall	.-150    	; 0x1c5a <__fp_pscA>
    1cf0:	28 f0       	brcs	.+10     	; 0x1cfc <__mulsf3+0x12>
    1cf2:	ba df       	rcall	.-140    	; 0x1c68 <__fp_pscB>
    1cf4:	18 f0       	brcs	.+6      	; 0x1cfc <__mulsf3+0x12>
    1cf6:	95 23       	and	r25, r21
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <__mulsf3+0x12>
    1cfa:	a6 cf       	rjmp	.-180    	; 0x1c48 <__fp_inf>
    1cfc:	ab cf       	rjmp	.-170    	; 0x1c54 <__fp_nan>
    1cfe:	11 24       	eor	r1, r1
    1d00:	ee cf       	rjmp	.-36     	; 0x1cde <__fp_szero>

00001d02 <__mulsf3x>:
    1d02:	ca df       	rcall	.-108    	; 0x1c98 <__fp_split3>
    1d04:	a0 f3       	brcs	.-24     	; 0x1cee <__mulsf3+0x4>

00001d06 <__mulsf3_pse>:
    1d06:	95 9f       	mul	r25, r21
    1d08:	d1 f3       	breq	.-12     	; 0x1cfe <__mulsf3+0x14>
    1d0a:	95 0f       	add	r25, r21
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	55 1f       	adc	r21, r21
    1d10:	62 9f       	mul	r22, r18
    1d12:	f0 01       	movw	r30, r0
    1d14:	72 9f       	mul	r23, r18
    1d16:	bb 27       	eor	r27, r27
    1d18:	f0 0d       	add	r31, r0
    1d1a:	b1 1d       	adc	r27, r1
    1d1c:	63 9f       	mul	r22, r19
    1d1e:	aa 27       	eor	r26, r26
    1d20:	f0 0d       	add	r31, r0
    1d22:	b1 1d       	adc	r27, r1
    1d24:	aa 1f       	adc	r26, r26
    1d26:	64 9f       	mul	r22, r20
    1d28:	66 27       	eor	r22, r22
    1d2a:	b0 0d       	add	r27, r0
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	66 1f       	adc	r22, r22
    1d30:	82 9f       	mul	r24, r18
    1d32:	22 27       	eor	r18, r18
    1d34:	b0 0d       	add	r27, r0
    1d36:	a1 1d       	adc	r26, r1
    1d38:	62 1f       	adc	r22, r18
    1d3a:	73 9f       	mul	r23, r19
    1d3c:	b0 0d       	add	r27, r0
    1d3e:	a1 1d       	adc	r26, r1
    1d40:	62 1f       	adc	r22, r18
    1d42:	83 9f       	mul	r24, r19
    1d44:	a0 0d       	add	r26, r0
    1d46:	61 1d       	adc	r22, r1
    1d48:	22 1f       	adc	r18, r18
    1d4a:	74 9f       	mul	r23, r20
    1d4c:	33 27       	eor	r19, r19
    1d4e:	a0 0d       	add	r26, r0
    1d50:	61 1d       	adc	r22, r1
    1d52:	23 1f       	adc	r18, r19
    1d54:	84 9f       	mul	r24, r20
    1d56:	60 0d       	add	r22, r0
    1d58:	21 1d       	adc	r18, r1
    1d5a:	82 2f       	mov	r24, r18
    1d5c:	76 2f       	mov	r23, r22
    1d5e:	6a 2f       	mov	r22, r26
    1d60:	11 24       	eor	r1, r1
    1d62:	9f 57       	subi	r25, 0x7F	; 127
    1d64:	50 40       	sbci	r21, 0x00	; 0
    1d66:	8a f0       	brmi	.+34     	; 0x1d8a <__mulsf3_pse+0x84>
    1d68:	e1 f0       	breq	.+56     	; 0x1da2 <__mulsf3_pse+0x9c>
    1d6a:	88 23       	and	r24, r24
    1d6c:	4a f0       	brmi	.+18     	; 0x1d80 <__mulsf3_pse+0x7a>
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	bb 1f       	adc	r27, r27
    1d74:	66 1f       	adc	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	88 1f       	adc	r24, r24
    1d7a:	91 50       	subi	r25, 0x01	; 1
    1d7c:	50 40       	sbci	r21, 0x00	; 0
    1d7e:	a9 f7       	brne	.-22     	; 0x1d6a <__mulsf3_pse+0x64>
    1d80:	9e 3f       	cpi	r25, 0xFE	; 254
    1d82:	51 05       	cpc	r21, r1
    1d84:	70 f0       	brcs	.+28     	; 0x1da2 <__mulsf3_pse+0x9c>
    1d86:	60 cf       	rjmp	.-320    	; 0x1c48 <__fp_inf>
    1d88:	aa cf       	rjmp	.-172    	; 0x1cde <__fp_szero>
    1d8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8c:	ec f3       	brlt	.-6      	; 0x1d88 <__mulsf3_pse+0x82>
    1d8e:	98 3e       	cpi	r25, 0xE8	; 232
    1d90:	dc f3       	brlt	.-10     	; 0x1d88 <__mulsf3_pse+0x82>
    1d92:	86 95       	lsr	r24
    1d94:	77 95       	ror	r23
    1d96:	67 95       	ror	r22
    1d98:	b7 95       	ror	r27
    1d9a:	f7 95       	ror	r31
    1d9c:	e7 95       	ror	r30
    1d9e:	9f 5f       	subi	r25, 0xFF	; 255
    1da0:	c1 f7       	brne	.-16     	; 0x1d92 <__mulsf3_pse+0x8c>
    1da2:	fe 2b       	or	r31, r30
    1da4:	88 0f       	add	r24, r24
    1da6:	91 1d       	adc	r25, r1
    1da8:	96 95       	lsr	r25
    1daa:	87 95       	ror	r24
    1dac:	97 f9       	bld	r25, 7
    1dae:	08 95       	ret

00001db0 <__udivmodqi4>:
    1db0:	99 1b       	sub	r25, r25
    1db2:	79 e0       	ldi	r23, 0x09	; 9
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <__udivmodqi4_ep>

00001db6 <__udivmodqi4_loop>:
    1db6:	99 1f       	adc	r25, r25
    1db8:	96 17       	cp	r25, r22
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <__udivmodqi4_ep>
    1dbc:	96 1b       	sub	r25, r22

00001dbe <__udivmodqi4_ep>:
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	7a 95       	dec	r23
    1dc2:	c9 f7       	brne	.-14     	; 0x1db6 <__udivmodqi4_loop>
    1dc4:	80 95       	com	r24
    1dc6:	08 95       	ret

00001dc8 <__divmodhi4>:
    1dc8:	97 fb       	bst	r25, 7
    1dca:	07 2e       	mov	r0, r23
    1dcc:	16 f4       	brtc	.+4      	; 0x1dd2 <__divmodhi4+0xa>
    1dce:	00 94       	com	r0
    1dd0:	06 d0       	rcall	.+12     	; 0x1dde <__divmodhi4_neg1>
    1dd2:	77 fd       	sbrc	r23, 7
    1dd4:	08 d0       	rcall	.+16     	; 0x1de6 <__divmodhi4_neg2>
    1dd6:	0b d0       	rcall	.+22     	; 0x1dee <__udivmodhi4>
    1dd8:	07 fc       	sbrc	r0, 7
    1dda:	05 d0       	rcall	.+10     	; 0x1de6 <__divmodhi4_neg2>
    1ddc:	3e f4       	brtc	.+14     	; 0x1dec <__divmodhi4_exit>

00001dde <__divmodhi4_neg1>:
    1dde:	90 95       	com	r25
    1de0:	81 95       	neg	r24
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	08 95       	ret

00001de6 <__divmodhi4_neg2>:
    1de6:	70 95       	com	r23
    1de8:	61 95       	neg	r22
    1dea:	7f 4f       	sbci	r23, 0xFF	; 255

00001dec <__divmodhi4_exit>:
    1dec:	08 95       	ret

00001dee <__udivmodhi4>:
    1dee:	aa 1b       	sub	r26, r26
    1df0:	bb 1b       	sub	r27, r27
    1df2:	51 e1       	ldi	r21, 0x11	; 17
    1df4:	07 c0       	rjmp	.+14     	; 0x1e04 <__udivmodhi4_ep>

00001df6 <__udivmodhi4_loop>:
    1df6:	aa 1f       	adc	r26, r26
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	a6 17       	cp	r26, r22
    1dfc:	b7 07       	cpc	r27, r23
    1dfe:	10 f0       	brcs	.+4      	; 0x1e04 <__udivmodhi4_ep>
    1e00:	a6 1b       	sub	r26, r22
    1e02:	b7 0b       	sbc	r27, r23

00001e04 <__udivmodhi4_ep>:
    1e04:	88 1f       	adc	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	5a 95       	dec	r21
    1e0a:	a9 f7       	brne	.-22     	; 0x1df6 <__udivmodhi4_loop>
    1e0c:	80 95       	com	r24
    1e0e:	90 95       	com	r25
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	08 95       	ret

00001e16 <__tablejump2__>:
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	05 90       	lpm	r0, Z+
    1e1c:	f4 91       	lpm	r31, Z
    1e1e:	e0 2d       	mov	r30, r0
    1e20:	09 94       	ijmp

00001e22 <_exit>:
    1e22:	45 3a       	cpi	r20, 0xA5	; 165
    1e24:	54 65       	ori	r21, 0x54	; 84
    1e26:	6d 70       	andi	r22, 0x0D	; 13
    1e28:	2e 20       	and	r2, r14
	...

00001e2b <_ZZ16arg_check_helperjE3__c>:
    1e2b:	4d 69 73 73 69 6e 67 20 61 72 67 75 6d 65 6e 74     Missing argument
	...

00001e3c <_ZZ3cmdcE3__c_2>:
    1e3c:	4d 69 73 73 69 6e 67 20 61 72 67 75 6d 65 6e 74     Missing argument
	...

00001e4d <_ZZ3cmdcE3__c_1>:
    1e4d:	4f 75 74 20 6f 66 20 72 61 6e 67 65 00              Out of range.

00001e5a <_ZZ3cmdcE3__c_0>:
    1e5a:	54 6f 6f 20 6c 6f 6e 67 20 61 72 67 75 6d 65 6e     Too long argumen
    1e6a:	74 00                                               t.

00001e6c <_ZZ3cmdcE3__c>:
    1e6c:	41 3a 52 65 73 65 74 74 69 6e 67 2e 2e 2e 0d 0a     A:Resetting.....
	...

00001e7d <_ZZ18check_index_helperahbE3__c.lto_priv.24>:
    1e7d:	49 6c 6c 65 67 61 6c 20 69 6e 64 65 78 00           Illegal index.

00001e8b <_ZZ12cmd_helper_3PahPchjPhE3__c>:
    1e8b:	4e 6f 20 61 72 67 75 6d 65 6e 74 00                 No argument.

00001e97 <_ZZ10cmd_helperPchE3__c_1>:
    1e97:	4e 6f 20 43 52 4c 46 20 6f 72 20 4e 55 4c 4c 00     No CRLF or NULL.

00001ea7 <_ZZ10cmd_helperPchE3__c_0>:
    1ea7:	49 6e 70 75 74 20 74 6f 6f 20 6c 6f 6e 67 00        Input too long.

00001eb6 <_ZZ10cmd_helperPchE3__c>:
    1eb6:	4e 6f 20 64 61 74 61 00                             No data.

00001ebe <_ZL8ds_names>:
    1ebe:	60 00 50 00 40 00 30 00 20 00 10 00 00 00 07 01     `.P.@.0. .......
    1ece:	f8 94                                               ..

00001ed0 <__stop_program>:
    1ed0:	ff cf       	rjmp	.-2      	; 0x1ed0 <__stop_program>
