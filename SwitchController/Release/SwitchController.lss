
SwitchController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eb0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00001eb0  00001f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000125  008000ce  008000ce  00001fd2  2**0
                  ALLOC
  3 .eeprom       000001d8  00810000  00810000  00001fd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000021aa  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021dc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000108  00000000  00000000  00002218  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003713  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f54  00000000  00000000  00005a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001af3  00000000  00000000  00006987  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000488  00000000  00000000  0000847c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f32  00000000  00000000  00008904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000710  00000000  00000000  00009836  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000320  00000000  00000000  00009f46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c0       	rjmp	.+106    	; 0x6c <__ctors_end>
       2:	59 c0       	rjmp	.+178    	; 0xb6 <__bad_interrupt>
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	57 c0       	rjmp	.+174    	; 0xb6 <__bad_interrupt>
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	55 c0       	rjmp	.+170    	; 0xb6 <__bad_interrupt>
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	53 c0       	rjmp	.+166    	; 0xb6 <__bad_interrupt>
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	39 c3       	rjmp	.+1650   	; 0x686 <__vector_9>
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	3d c4       	rjmp	.+2170   	; 0x892 <__vector_11>
      18:	17 c4       	rjmp	.+2094   	; 0x848 <__vector_12>
      1a:	4d c0       	rjmp	.+154    	; 0xb6 <__bad_interrupt>
      1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
      1e:	4b c0       	rjmp	.+150    	; 0xb6 <__bad_interrupt>
      20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
      22:	49 c0       	rjmp	.+146    	; 0xb6 <__bad_interrupt>
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	24 c9       	rjmp	.-3512   	; 0xfffff270 <__eeprom_end+0xff7ef098>
      28:	7c ca       	rjmp	.-2824   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      2a:	7b ca       	rjmp	.-2826   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      2c:	7a ca       	rjmp	.-2828   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      2e:	79 ca       	rjmp	.-2830   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      30:	09 c9       	rjmp	.-3566   	; 0xfffff244 <__eeprom_end+0xff7ef06c>
      32:	d2 c9       	rjmp	.-3164   	; 0xfffff3d8 <__eeprom_end+0xff7ef200>
      34:	29 c9       	rjmp	.-3502   	; 0xfffff288 <__eeprom_end+0xff7ef0b0>
      36:	59 c9       	rjmp	.-3406   	; 0xfffff2ea <__eeprom_end+0xff7ef112>
      38:	74 ca       	rjmp	.-2840   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      3a:	73 ca       	rjmp	.-2842   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      3c:	34 c9       	rjmp	.-3480   	; 0xfffff2a6 <__eeprom_end+0xff7ef0ce>
      3e:	b7 c9       	rjmp	.-3218   	; 0xfffff3ae <__eeprom_end+0xff7ef1d6>
      40:	9c c9       	rjmp	.-3272   	; 0xfffff37a <__eeprom_end+0xff7ef1a2>
      42:	0d ca       	rjmp	.-3046   	; 0xfffff45e <__eeprom_end+0xff7ef286>
      44:	19 c9       	rjmp	.-3534   	; 0xfffff278 <__eeprom_end+0xff7ef0a0>
      46:	6d ca       	rjmp	.-2854   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      48:	df c9       	rjmp	.-3138   	; 0xfffff408 <__eeprom_end+0xff7ef230>
      4a:	6b ca       	rjmp	.-2858   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      4c:	44 ca       	rjmp	.-2936   	; 0xfffff4d6 <__eeprom_end+0xff7ef2fe>
      4e:	69 ca       	rjmp	.-2862   	; 0xfffff522 <__eeprom_end+0xff7ef34a>
      50:	7a c9       	rjmp	.-3340   	; 0xfffff346 <__eeprom_end+0xff7ef16e>

00000052 <__trampolines_end>:
      52:	00 00       	nop
      54:	c8 42       	sbci	r28, 0x28	; 40
      56:	00 00       	nop
      58:	20 41       	sbci	r18, 0x10	; 16
      5a:	00 00       	nop
      5c:	80 3f       	cpi	r24, 0xF0	; 240
      5e:	cd cc       	rjmp	.-1638   	; 0xfffff9fa <__eeprom_end+0xff7ef822>
      60:	cc 3d       	cpi	r28, 0xDC	; 220
      62:	0a d7       	rcall	.+3604   	; 0xe78 <main+0x23a>
      64:	23 3c       	cpi	r18, 0xC3	; 195
      66:	6f 12       	cpse	r6, r31
      68:	83 3a       	cpi	r24, 0xA3	; 163

0000006a <__ctors_start>:
      6a:	4d 0c       	add	r4, r13

0000006c <__ctors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf e5       	ldi	r28, 0x5F	; 95
      72:	d4 e0       	ldi	r29, 0x04	; 4
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	10 e0       	ldi	r17, 0x00	; 0
      7a:	a0 e6       	ldi	r26, 0x60	; 96
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	e0 eb       	ldi	r30, 0xB0	; 176
      80:	fe e1       	ldi	r31, 0x1E	; 30
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	ae 3c       	cpi	r26, 0xCE	; 206
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	21 e0       	ldi	r18, 0x01	; 1
      90:	ae ec       	ldi	r26, 0xCE	; 206
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a3 3f       	cpi	r26, 0xF3	; 243
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c6 e3       	ldi	r28, 0x36	; 54
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	03 c0       	rjmp	.+6      	; 0xac <__do_global_ctors+0xe>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	a4 de       	rcall	.-696    	; 0xfffffdf4 <__eeprom_end+0xff7efc1c>
      ac:	c5 33       	cpi	r28, 0x35	; 53
      ae:	d1 07       	cpc	r29, r17
      b0:	d1 f7       	brne	.-12     	; 0xa6 <__do_global_ctors+0x8>
      b2:	c5 d5       	rcall	.+2954   	; 0xc3e <main>
      b4:	a5 ce       	rjmp	.-694    	; 0xfffffe00 <__eeprom_end+0xff7efc28>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_Z7OWwritehh.constprop.21>:
// pin high, if you need power after the OWwrite (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the OWwrite to avoid heating in a short or
// other mishap.
//
void OWwrite(uint8_t v, uint8_t power /* = 0 */) {
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	08 2f       	mov	r16, r24
      c2:	c8 e0       	ldi	r28, 0x08	; 8
      c4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t bitMask;

	for (bitMask = 0x01; bitMask; bitMask <<= 1) {
      c6:	11 e0       	ldi	r17, 0x01	; 1
		OWwrite_bit( (bitMask & v)?1:0);
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	90 2f       	mov	r25, r16
      cc:	91 23       	and	r25, r17
      ce:	09 f4       	brne	.+2      	; 0xd2 <_Z7OWwritehh.constprop.21+0x1a>
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	4c d4       	rcall	.+2200   	; 0x96c <_Z11OWwrite_bith>
// other mishap.
//
void OWwrite(uint8_t v, uint8_t power /* = 0 */) {
	uint8_t bitMask;

	for (bitMask = 0x01; bitMask; bitMask <<= 1) {
      d4:	11 0f       	add	r17, r17
      d6:	21 97       	sbiw	r28, 0x01	; 1
      d8:	b9 f7       	brne	.-18     	; 0xc8 <_Z7OWwritehh.constprop.21+0x10>
		OWwrite_bit( (bitMask & v)?1:0);
	}
	if ( !power) {
		cli();
      da:	f8 94       	cli
		#if PINS_STATIC
		pin_t::SetDirection(OWpin, pin_t::Input);
      dc:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
      e0:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
      e4:	ed 91       	ld	r30, X+
      e6:	fc 91       	ld	r31, X
      e8:	11 97       	sbiw	r26, 0x01	; 1
      ea:	90 81       	ld	r25, Z
      ec:	12 96       	adiw	r26, 0x02	; 2
      ee:	8c 91       	ld	r24, X
      f0:	80 95       	com	r24
      f2:	89 23       	and	r24, r25
      f4:	80 83       	st	Z, r24
		#else
		OWpin->SetDirection(pin_t::Input);
		#endif
		#if PINS_STATIC
		pin_t::Write(OWpin, false);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
      fc:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     100:	ed d2       	rcall	.+1498   	; 0x6dc <_ZN5pin_t5WriteEPKS_b>
		#else
		OWpin->Write(false);
		#endif
		sei();
     102:	78 94       	sei
	}
}
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	1f 91       	pop	r17
     10a:	0f 91       	pop	r16
     10c:	08 95       	ret

0000010e <_Z9decodeIntPKch.constprop.15>:
		b += (str[i] - '0') * pgm_read_float(&(mult[((i < p) ? 3 : 2) + i - p]));
	}
	if (neg) b *= -1;
	return b;
}
int8_t decodeInt(const char* str, uint8_t max_len)
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ec 01       	movw	r28, r24
	delete[] Data;
}

float decodeFloat(const char* str, uint8_t max_len)
{
	return decodeFloat(str, 0, strnlen(str, max_len));
     114:	60 e2       	ldi	r22, 0x20	; 32
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	30 dc       	rcall	.-1952   	; 0xfffff97a <__eeprom_end+0xff7ef7a2>
}
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
{
	if (len == 0) return NAN;
     11a:	88 23       	and	r24, r24
     11c:	29 f0       	breq	.+10     	; 0x128 <_Z9decodeIntPKch.constprop.15+0x1a>
     11e:	48 2f       	mov	r20, r24
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	ce 01       	movw	r24, r28
     124:	d1 d4       	rcall	.+2466   	; 0xac8 <_Z11decodeFloatPKchh.part.0.lto_priv.22>
     126:	04 c0       	rjmp	.+8      	; 0x130 <_Z9decodeIntPKch.constprop.15+0x22>
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	80 ec       	ldi	r24, 0xC0	; 192
     12e:	9f e7       	ldi	r25, 0x7F	; 127
	if (neg) b *= -1;
	return b;
}
int8_t decodeInt(const char* str, uint8_t max_len)
{
	return static_cast<int8_t>(decodeFloat(str));
     130:	0c dd       	rcall	.-1512   	; 0xfffffb4a <__eeprom_end+0xff7ef972>
     132:	86 2f       	mov	r24, r22
}
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <_Z6strrmvPch.constprop.14>:
{
	end -= start;
	str += start;
	return start + strrmv(str, end);
}
uint8_t strrmv(char* str, uint8_t len)
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
{
	uint8_t e = strlen(str);
     13e:	fc 01       	movw	r30, r24
     140:	01 90       	ld	r0, Z+
     142:	00 20       	and	r0, r0
     144:	e9 f7       	brne	.-6      	; 0x140 <_Z6strrmvPch.constprop.14+0x6>
     146:	31 97       	sbiw	r30, 0x01	; 1
     148:	9f 01       	movw	r18, r30
     14a:	28 1b       	sub	r18, r24
     14c:	39 0b       	sbc	r19, r25
     14e:	62 2f       	mov	r22, r18
     150:	dc 01       	movw	r26, r24
     152:	11 96       	adiw	r26, 0x01	; 1
     154:	fc 01       	movw	r30, r24
     156:	a9 01       	movw	r20, r18
     158:	55 27       	eor	r21, r21
	for (uint8_t i = 0; i < e; i++) {
     15a:	7e 2f       	mov	r23, r30
     15c:	78 1b       	sub	r23, r24
     15e:	76 17       	cp	r23, r22
     160:	68 f4       	brcc	.+26     	; 0x17c <_Z6strrmvPch.constprop.14+0x42>
		if ((i + len) < e) { *str = str[len]; str++; }
     162:	ed 01       	movw	r28, r26
     164:	c8 1b       	sub	r28, r24
     166:	d9 0b       	sbc	r29, r25
     168:	c4 17       	cp	r28, r20
     16a:	d5 07       	cpc	r29, r21
     16c:	1c f4       	brge	.+6      	; 0x174 <_Z6strrmvPch.constprop.14+0x3a>
     16e:	7c 91       	ld	r23, X
     170:	70 83       	st	Z, r23
     172:	01 c0       	rjmp	.+2      	; 0x176 <_Z6strrmvPch.constprop.14+0x3c>
		else { *str++ = '\0'; };
     174:	10 82       	st	Z, r1
     176:	11 96       	adiw	r26, 0x01	; 1
     178:	31 96       	adiw	r30, 0x01	; 1
     17a:	ef cf       	rjmp	.-34     	; 0x15a <_Z6strrmvPch.constprop.14+0x20>
	}
	*str = '\0';
     17c:	fc 01       	movw	r30, r24
     17e:	e4 0f       	add	r30, r20
     180:	f5 1f       	adc	r31, r21
     182:	10 82       	st	Z, r1
	return e - len;
}
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	82 0f       	add	r24, r18
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <_Z8intToBitIhEvT_Pch.constprop.5>:
	--bits;
	for (uint8_t i = 0; i <= bits; ++i) *val |= static_cast<T>((*str++ - '0') > 0) << (bits - i);
}

template <typename T> void intToBit(const T val, char* str, uint8_t bits = sizeof(T) * 8);
template <typename T> void intToBit(const T val, char* str, uint8_t bits /*= sizeof(T) * 8*/)
     18e:	fb 01       	movw	r30, r22
     190:	27 e0       	ldi	r18, 0x07	; 7
     192:	30 e0       	ldi	r19, 0x00	; 0
{
	--bits;
	for (uint8_t i = 0; i <= bits; ++i) *str++ = val & static_cast<T>(static_cast<T>(1U) << (bits - i)) ? '1' : '0';
     194:	a1 e0       	ldi	r26, 0x01	; 1
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	ad 01       	movw	r20, r26
     19c:	02 2e       	mov	r0, r18
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <_Z8intToBitIhEvT_Pch.constprop.5+0x16>
     1a0:	44 0f       	add	r20, r20
     1a2:	55 1f       	adc	r21, r21
     1a4:	0a 94       	dec	r0
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <_Z8intToBitIhEvT_Pch.constprop.5+0x12>
     1a8:	48 23       	and	r20, r24
     1aa:	59 23       	and	r21, r25
     1ac:	45 2b       	or	r20, r21
     1ae:	11 f4       	brne	.+4      	; 0x1b4 <_Z8intToBitIhEvT_Pch.constprop.5+0x26>
     1b0:	40 e3       	ldi	r20, 0x30	; 48
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <_Z8intToBitIhEvT_Pch.constprop.5+0x28>
     1b4:	41 e3       	ldi	r20, 0x31	; 49
     1b6:	41 93       	st	Z+, r20
     1b8:	21 50       	subi	r18, 0x01	; 1
     1ba:	31 09       	sbc	r19, r1
     1bc:	70 f7       	brcc	.-36     	; 0x19a <_Z8intToBitIhEvT_Pch.constprop.5+0xc>
	*str = '\0';
     1be:	fb 01       	movw	r30, r22
     1c0:	10 86       	std	Z+8, r1	; 0x08
     1c2:	08 95       	ret

000001c4 <_Z11flushSerialv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c4:	8f ef       	ldi	r24, 0xFF	; 255
     1c6:	9c e7       	ldi	r25, 0x7C	; 124
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <_Z11flushSerialv+0x4>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_Z11flushSerialv+0xa>
     1ce:	00 00       	nop
}

void flushSerial()
{
	_delay_ms(8);	//10 causes bug in Proteus (?)
	while (uart_getc() != UART_NO_DATA) _delay_ms(2);
     1d0:	09 d3       	rcall	.+1554   	; 0x7e4 <_Z9uart_getcv>
     1d2:	81 15       	cp	r24, r1
     1d4:	91 40       	sbci	r25, 0x01	; 1
     1d6:	29 f0       	breq	.+10     	; 0x1e2 <_Z11flushSerialv+0x1e>
     1d8:	8f e3       	ldi	r24, 0x3F	; 63
     1da:	9f e1       	ldi	r25, 0x1F	; 31
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <_Z11flushSerialv+0x18>
     1e0:	f5 cf       	rjmp	.-22     	; 0x1cc <_Z11flushSerialv+0x8>
     1e2:	08 95       	ret

000001e4 <_Z11reportErrorPKc>:
}

void reportError(PGM_P desc)
{
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	ec 01       	movw	r28, r24
	uart_puts("E:");
     1ea:	8a ec       	ldi	r24, 0xCA	; 202
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	a4 d2       	rcall	.+1352   	; 0x738 <_Z9uart_putsPKc>
	uart_puts_p(desc);
     1f0:	ce 01       	movw	r24, r28
     1f2:	94 d2       	rcall	.+1320   	; 0x71c <_Z11uart_puts_pPKc>
	uart_puts(line_feed);
     1f4:	83 e9       	ldi	r24, 0x93	; 147
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	9f d2       	rcall	.+1342   	; 0x738 <_Z9uart_putsPKc>
	flushSerial();
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
void reportError(PGM_P desc)
{
	uart_puts("E:");
	uart_puts_p(desc);
	uart_puts(line_feed);
	flushSerial();
     1fe:	e2 cf       	rjmp	.-60     	; 0x1c4 <_Z11flushSerialv>

00000200 <_Z10cmd_helperPch.constprop.6>:
}

#pragma region Helpers

//Populates the buffer with characters (including - and ., until \r or \0 or N/A) and returns argument letter
unsigned int cmd_helper(char* b, uint8_t size)
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	7c 01       	movw	r14, r24
{
	uint8_t i = 0;
	unsigned int c = uart_getc();
     20c:	eb d2       	rcall	.+1494   	; 0x7e4 <_Z9uart_getcv>
     20e:	ec 01       	movw	r28, r24
     210:	8f e9       	ldi	r24, 0x9F	; 159
     212:	9f e0       	ldi	r25, 0x0F	; 15
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <_Z10cmd_helperPch.constprop.6+0x14>
     218:	00 c0       	rjmp	.+0      	; 0x21a <_Z10cmd_helperPch.constprop.6+0x1a>
     21a:	00 00       	nop
	_delay_ms(1);
	if (static_cast<char>(c) == ':') c = uart_getc(); //Just a meaningless part of a header
     21c:	ca 33       	cpi	r28, 0x3A	; 58
     21e:	11 f4       	brne	.+4      	; 0x224 <_Z10cmd_helperPch.constprop.6+0x24>
     220:	e1 d2       	rcall	.+1474   	; 0x7e4 <_Z9uart_getcv>
     222:	ec 01       	movw	r28, r24
	if (c == UART_NO_DATA)
     224:	c1 15       	cp	r28, r1
     226:	e1 e0       	ldi	r30, 0x01	; 1
     228:	de 07       	cpc	r29, r30
     22a:	19 f4       	brne	.+6      	; 0x232 <_Z10cmd_helperPch.constprop.6+0x32>
	{
		reportError(PSTR_L("No data"));
     22c:	84 e9       	ldi	r24, 0x94	; 148
     22e:	9e e1       	ldi	r25, 0x1E	; 30
     230:	36 c0       	rjmp	.+108    	; 0x29e <_Z10cmd_helperPch.constprop.6+0x9e>
		return UART_NO_DATA;
	}
	char read = static_cast<char>(c);
     232:	8c 2f       	mov	r24, r28
	if (isNumeric(read) || (read == '-') || (read == '.')) b[i++] = read;
     234:	9c 2f       	mov	r25, r28
     236:	90 53       	subi	r25, 0x30	; 48
     238:	9a 30       	cpi	r25, 0x0A	; 10
     23a:	18 f0       	brcs	.+6      	; 0x242 <_Z10cmd_helperPch.constprop.6+0x42>
     23c:	9d 5f       	subi	r25, 0xFD	; 253
     23e:	92 30       	cpi	r25, 0x02	; 2
     240:	20 f4       	brcc	.+8      	; 0x24a <_Z10cmd_helperPch.constprop.6+0x4a>
     242:	f7 01       	movw	r30, r14
     244:	80 83       	st	Z, r24
     246:	11 e0       	ldi	r17, 0x01	; 1
     248:	01 c0       	rjmp	.+2      	; 0x24c <_Z10cmd_helperPch.constprop.6+0x4c>
#pragma region Helpers

//Populates the buffer with characters (including - and ., until \r or \0 or N/A) and returns argument letter
unsigned int cmd_helper(char* b, uint8_t size)
{
	uint8_t i = 0;
     24a:	10 e0       	ldi	r17, 0x00	; 0
     24c:	8f e3       	ldi	r24, 0x3F	; 63
     24e:	9f e1       	ldi	r25, 0x1F	; 31
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <_Z10cmd_helperPch.constprop.6+0x50>
     254:	00 c0       	rjmp	.+0      	; 0x256 <_Z10cmd_helperPch.constprop.6+0x56>
     256:	00 00       	nop
	char read = static_cast<char>(c);
	if (isNumeric(read) || (read == '-') || (read == '.')) b[i++] = read;
	for (; i < size; i++)
	{
		_delay_ms(2);
		c = uart_getc();
     258:	c5 d2       	rcall	.+1418   	; 0x7e4 <_Z9uart_getcv>
		if (c != UART_NO_DATA)
     25a:	81 15       	cp	r24, r1
     25c:	e1 e0       	ldi	r30, 0x01	; 1
     25e:	9e 07       	cpc	r25, r30
     260:	89 f0       	breq	.+34     	; 0x284 <_Z10cmd_helperPch.constprop.6+0x84>
		{
			b[i] = static_cast<char>(c);
     262:	f7 01       	movw	r30, r14
     264:	e1 0f       	add	r30, r17
     266:	f1 1d       	adc	r31, r1
     268:	80 83       	st	Z, r24
			if ((b[i] == '\r') || (b[i] == '\n'))
     26a:	8d 30       	cpi	r24, 0x0D	; 13
     26c:	31 f4       	brne	.+12     	; 0x27a <_Z10cmd_helperPch.constprop.6+0x7a>
			{
				b[i] = '\0';
     26e:	10 82       	st	Z, r1
				//flushSerial(); reportError takes care about it
				if (static_cast<char>(uart_peek()) == '\n') uart_getc();
     270:	9f d2       	rcall	.+1342   	; 0x7b0 <_Z9uart_peekv>
     272:	8a 30       	cpi	r24, 0x0A	; 10
     274:	39 f4       	brne	.+14     	; 0x284 <_Z10cmd_helperPch.constprop.6+0x84>
     276:	b6 d2       	rcall	.+1388   	; 0x7e4 <_Z9uart_getcv>
     278:	05 c0       	rjmp	.+10     	; 0x284 <_Z10cmd_helperPch.constprop.6+0x84>
		_delay_ms(2);
		c = uart_getc();
		if (c != UART_NO_DATA)
		{
			b[i] = static_cast<char>(c);
			if ((b[i] == '\r') || (b[i] == '\n'))
     27a:	8a 30       	cpi	r24, 0x0A	; 10
     27c:	c1 f3       	breq	.-16     	; 0x26e <_Z10cmd_helperPch.constprop.6+0x6e>
		reportError(PSTR_L("No data"));
		return UART_NO_DATA;
	}
	char read = static_cast<char>(c);
	if (isNumeric(read) || (read == '-') || (read == '.')) b[i++] = read;
	for (; i < size; i++)
     27e:	1f 5f       	subi	r17, 0xFF	; 255
     280:	10 32       	cpi	r17, 0x20	; 32
     282:	21 f7       	brne	.-56     	; 0x24c <_Z10cmd_helperPch.constprop.6+0x4c>
				break;
			}
		}
		else { break; };
	}
	if (b[i] != '\0') //If no line ending mark or null character itself
     284:	f7 01       	movw	r30, r14
     286:	e1 0f       	add	r30, r17
     288:	f1 1d       	adc	r31, r1
     28a:	80 81       	ld	r24, Z
     28c:	88 23       	and	r24, r24
     28e:	59 f0       	breq	.+22     	; 0x2a6 <_Z10cmd_helperPch.constprop.6+0xa6>
	{
		reportError((i == size) ? PSTR_L("Input too long") : PSTR_L("No CRLF or NULL"));
     290:	10 32       	cpi	r17, 0x20	; 32
     292:	19 f0       	breq	.+6      	; 0x29a <_Z10cmd_helperPch.constprop.6+0x9a>
     294:	85 e7       	ldi	r24, 0x75	; 117
     296:	9e e1       	ldi	r25, 0x1E	; 30
     298:	02 c0       	rjmp	.+4      	; 0x29e <_Z10cmd_helperPch.constprop.6+0x9e>
     29a:	85 e8       	ldi	r24, 0x85	; 133
     29c:	9e e1       	ldi	r25, 0x1E	; 30
     29e:	a2 df       	rcall	.-188    	; 0x1e4 <_Z11reportErrorPKc>
		return UART_NO_DATA; //Abort transaction
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <_Z10cmd_helperPch.constprop.6+0xaa>
     2a6:	ce 01       	movw	r24, r28
     2a8:	99 27       	eor	r25, r25
	}
	return read;
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	08 95       	ret

000002b6 <_Z12cmd_helper_3PahPchjPh.constprop.2>:
	}
	return false;
}

//For Mappings. Any Mapping command with 'C' argument refers to PC reset.
bool cmd_helper_3(int8_t* data, uint8_t size, char* buf, uint8_t s, unsigned int c, uint8_t* eep)
     2b6:	9f 92       	push	r9
     2b8:	af 92       	push	r10
     2ba:	bf 92       	push	r11
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	7c 01       	movw	r14, r24
     2ce:	96 2e       	mov	r9, r22
     2d0:	ea 01       	movw	r28, r20
     2d2:	68 01       	movw	r12, r16
{
	if (static_cast<char>(c) == 'A')	//Read values
     2d4:	59 01       	movw	r10, r18
     2d6:	bb 24       	eor	r11, r11
     2d8:	81 e4       	ldi	r24, 0x41	; 65
     2da:	a8 16       	cp	r10, r24
     2dc:	b1 04       	cpc	r11, r1
     2de:	f9 f4       	brne	.+62     	; 0x31e <_Z12cmd_helper_3PahPchjPh.constprop.2+0x68>
     2e0:	3e 2d       	mov	r19, r14
     2e2:	d7 01       	movw	r26, r14
     2e4:	fa 01       	movw	r30, r20

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
	*p++ = NumToASCII(n % 10_ui8);
     2e6:	4a e0       	ldi	r20, 0x0A	; 10
	*p++ = ',';
     2e8:	2c e2       	ldi	r18, 0x2C	; 44
}

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
     2ea:	51 e3       	ldi	r21, 0x31	; 49
		char* p = buf;
		for (uint8_t i = 0; i < size; ++i)
		{
			if (data[i] < 0_ui8)
			{
				*p++ = '-';
     2ec:	1d e2       	ldi	r17, 0x2D	; 45
bool cmd_helper_3(int8_t* data, uint8_t size, char* buf, uint8_t s, unsigned int c, uint8_t* eep)
{
	if (static_cast<char>(c) == 'A')	//Read values
	{
		char* p = buf;
		for (uint8_t i = 0; i < size; ++i)
     2ee:	8a 2f       	mov	r24, r26
     2f0:	83 1b       	sub	r24, r19
     2f2:	89 15       	cp	r24, r9
     2f4:	90 f4       	brcc	.+36     	; 0x31a <_Z12cmd_helper_3PahPchjPh.constprop.2+0x64>
		{
			if (data[i] < 0_ui8)
     2f6:	8d 91       	ld	r24, X+
     2f8:	87 ff       	sbrs	r24, 7
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x4a>
			{
				*p++ = '-';
     2fc:	10 83       	st	Z, r17
     2fe:	08 c0       	rjmp	.+16     	; 0x310 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x5a>
}

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
     300:	8a 30       	cpi	r24, 0x0A	; 10
     302:	14 f0       	brlt	.+4      	; 0x308 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x52>
     304:	50 83       	st	Z, r21
     306:	31 96       	adiw	r30, 0x01	; 1
	*p++ = NumToASCII(n % 10_ui8);
     308:	64 2f       	mov	r22, r20
     30a:	41 dd       	rcall	.-1406   	; 0xfffffd8e <__eeprom_end+0xff7efbb6>
     30c:	90 5d       	subi	r25, 0xD0	; 208
     30e:	90 83       	st	Z, r25
	*p++ = ',';
     310:	cf 01       	movw	r24, r30
     312:	02 96       	adiw	r24, 0x02	; 2
     314:	21 83       	std	Z+1, r18	; 0x01
}

//For Mappings. Any Mapping command with 'C' argument refers to PC reset.
bool cmd_helper_3(int8_t* data, uint8_t size, char* buf, uint8_t s, unsigned int c, uint8_t* eep)
{
	if (static_cast<char>(c) == 'A')	//Read values
     316:	fc 01       	movw	r30, r24
     318:	ea cf       	rjmp	.-44     	; 0x2ee <_Z12cmd_helper_3PahPchjPh.constprop.2+0x38>
			else
			{
				l_helper(p, data[i]);
			}
		}
		*(--p) = '\0';
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	39 c0       	rjmp	.+114    	; 0x390 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xda>
		uart_puts(buf);
		return true;
	}
	uint8_t l = strnlen(buf, s);	//Check arguments
     31e:	60 e2       	ldi	r22, 0x20	; 32
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	ca 01       	movw	r24, r20
     324:	2a db       	rcall	.-2476   	; 0xfffff97a <__eeprom_end+0xff7ef7a2>
     326:	08 2f       	mov	r16, r24
     328:	fe 01       	movw	r30, r28
{
	return arraySearch(arr, val, len, 0);
} // arraySearch
template<typename T> uint8_t arraySearch(const T* arr, T val, uint8_t len, uint8_t start)
{
	for (uint8_t i = start; i < len; ++i) if (arr[i] == val) return i;
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	10 17       	cp	r17, r16
     32e:	28 f4       	brcc	.+10     	; 0x33a <_Z12cmd_helper_3PahPchjPh.constprop.2+0x84>
     330:	81 91       	ld	r24, Z+
     332:	8a 33       	cpi	r24, 0x3A	; 58
     334:	29 f0       	breq	.+10     	; 0x340 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x8a>
     336:	1f 5f       	subi	r17, 0xFF	; 255
     338:	f9 cf       	rjmp	.-14     	; 0x32c <_Z12cmd_helper_3PahPchjPh.constprop.2+0x76>
	uint8_t i = arraySearch(buf, ':', l);
	if (i == l)
	{
		reportError(PSTR_L("No argument"));
     33a:	89 e6       	ldi	r24, 0x69	; 105
     33c:	9e e1       	ldi	r25, 0x1E	; 30
     33e:	49 c0       	rjmp	.+146    	; 0x3d2 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x11c>
		return true;
	}
	if (static_cast<char>(c) == 'C')	//Process PC reset
     340:	e3 e4       	ldi	r30, 0x43	; 67
     342:	ae 16       	cp	r10, r30
     344:	b1 04       	cpc	r11, r1
     346:	a9 f5       	brne	.+106    	; 0x3b2 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xfc>
	{
		++i;
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	61 0f       	add	r22, r17
		if (buf[i] == 'A')
     34c:	fe 01       	movw	r30, r28
     34e:	e6 0f       	add	r30, r22
     350:	f1 1d       	adc	r31, r1
     352:	80 81       	ld	r24, Z
     354:	81 34       	cpi	r24, 0x41	; 65
     356:	01 f5       	brne	.+64     	; 0x398 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xe2>
		{
			char* p = buf;
			if (pc_reset_buf < 0_ui8)
     358:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_ZL12pc_reset_buf.lto_priv.25>
     35c:	87 ff       	sbrs	r24, 7
     35e:	06 c0       	rjmp	.+12     	; 0x36c <_Z12cmd_helper_3PahPchjPh.constprop.2+0xb6>
			{
				*p++ = '-';
     360:	9e 01       	movw	r18, r28
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	8d e2       	ldi	r24, 0x2D	; 45
     368:	88 83       	st	Y, r24
     36a:	11 c0       	rjmp	.+34     	; 0x38e <_Z12cmd_helper_3PahPchjPh.constprop.2+0xd8>
			}
			else
			{
				if (pc_reset_buf > 9_ui8) *p++ = '1';
     36c:	fe 01       	movw	r30, r28
     36e:	8a 30       	cpi	r24, 0x0A	; 10
     370:	1c f0       	brlt	.+6      	; 0x378 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xc2>
     372:	31 96       	adiw	r30, 0x01	; 1
     374:	91 e3       	ldi	r25, 0x31	; 49
     376:	98 83       	st	Y, r25
				*p++ = NumToASCII(pc_reset_buf % 10_ui8);
     378:	9f 01       	movw	r18, r30
     37a:	2f 5f       	subi	r18, 0xFF	; 255
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
     37e:	08 2e       	mov	r0, r24
     380:	00 0c       	add	r0, r0
     382:	99 0b       	sbc	r25, r25
     384:	6a e0       	ldi	r22, 0x0A	; 10
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	0e dd       	rcall	.-1508   	; 0xfffffda6 <__eeprom_end+0xff7efbce>
     38a:	80 5d       	subi	r24, 0xD0	; 208
     38c:	80 83       	st	Z, r24
			}
			*p = '\0';
     38e:	f9 01       	movw	r30, r18
     390:	10 82       	st	Z, r1
			uart_puts(buf);
     392:	ce 01       	movw	r24, r28
     394:	d1 d1       	rcall	.+930    	; 0x738 <_Z9uart_putsPKc>
     396:	1e c0       	rjmp	.+60     	; 0x3d4 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x11e>
			return true;
		}
		int8_t o = decodeInt(buf, i, l - i); //Process output number to be binded
     398:	40 2f       	mov	r20, r16
     39a:	46 1b       	sub	r20, r22
     39c:	ce 01       	movw	r24, r28
     39e:	11 d4       	rcall	.+2082   	; 0xbc2 <_Z9decodeIntPKchh>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
     3a0:	85 30       	cpi	r24, 0x05	; 5
     3a2:	08 f0       	brcs	.+2      	; 0x3a6 <_Z12cmd_helper_3PahPchjPh.constprop.2+0xf0>
			*p = '\0';
			uart_puts(buf);
			return true;
		}
		int8_t o = decodeInt(buf, i, l - i); //Process output number to be binded
		if (check_index_helper(o, arraySize(output_pins), false)) o = -1;
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
		pc_reset_buf = o;
     3a6:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <_ZL12pc_reset_buf.lto_priv.25>
		eeprom_update_byte(&pc_reset_mapping, *reinterpret_cast<uint8_t*>(&o));
     3aa:	68 2f       	mov	r22, r24
     3ac:	87 ed       	ldi	r24, 0xD7	; 215
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	24 c0       	rjmp	.+72     	; 0x3fa <_Z12cmd_helper_3PahPchjPh.constprop.2+0x144>
		return false;
	}
	//Actually process mapping data
	int8_t n = decodeInt(buf, 0, i++); //Process input number
     3b2:	41 2f       	mov	r20, r17
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	ce 01       	movw	r24, r28
     3b8:	04 d4       	rcall	.+2056   	; 0xbc2 <_Z9decodeIntPKchh>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
     3ba:	87 fd       	sbrc	r24, 7
     3bc:	08 c0       	rjmp	.+16     	; 0x3ce <_Z12cmd_helper_3PahPchjPh.constprop.2+0x118>
     3be:	a8 2e       	mov	r10, r24
     3c0:	88 0f       	add	r24, r24
     3c2:	bb 08       	sbc	r11, r11
     3c4:	69 2d       	mov	r22, r9
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	a6 16       	cp	r10, r22
     3ca:	b7 06       	cpc	r11, r23
     3cc:	2c f0       	brlt	.+10     	; 0x3d8 <_Z12cmd_helper_3PahPchjPh.constprop.2+0x122>
	{
		if (msg) reportError(PSTR_L("Illegal index"));
     3ce:	8b e5       	ldi	r24, 0x5B	; 91
     3d0:	9e e1       	ldi	r25, 0x1E	; 30
     3d2:	08 df       	rcall	.-496    	; 0x1e4 <_Z11reportErrorPKc>
		eeprom_update_byte(&pc_reset_mapping, *reinterpret_cast<uint8_t*>(&o));
		return false;
	}
	//Actually process mapping data
	int8_t n = decodeInt(buf, 0, i++); //Process input number
	if (check_index_helper(n, size)) return true;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	13 c0       	rjmp	.+38     	; 0x3fe <_Z12cmd_helper_3PahPchjPh.constprop.2+0x148>
		pc_reset_buf = o;
		eeprom_update_byte(&pc_reset_mapping, *reinterpret_cast<uint8_t*>(&o));
		return false;
	}
	//Actually process mapping data
	int8_t n = decodeInt(buf, 0, i++); //Process input number
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	61 0f       	add	r22, r17
	if (check_index_helper(n, size)) return true;
	int8_t o = decodeInt(buf, i, l - i); //Process output number to be binded
     3dc:	40 2f       	mov	r20, r16
     3de:	46 1b       	sub	r20, r22
     3e0:	ce 01       	movw	r24, r28
     3e2:	ef d3       	rcall	.+2014   	; 0xbc2 <_Z9decodeIntPKchh>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
     3e4:	85 30       	cpi	r24, 0x05	; 5
     3e6:	08 f0       	brcs	.+2      	; 0x3ea <_Z12cmd_helper_3PahPchjPh.constprop.2+0x134>
	}
	//Actually process mapping data
	int8_t n = decodeInt(buf, 0, i++); //Process input number
	if (check_index_helper(n, size)) return true;
	int8_t o = decodeInt(buf, i, l - i); //Process output number to be binded
	if (check_index_helper(o, arraySize(output_pins), false)) o = -1;
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
	data[n] = o;
     3ea:	f7 01       	movw	r30, r14
     3ec:	ea 0d       	add	r30, r10
     3ee:	fb 1d       	adc	r31, r11
     3f0:	80 83       	st	Z, r24
	eeprom_update_byte(eep + n, *reinterpret_cast<uint8_t*>(&o)); //Save
     3f2:	68 2f       	mov	r22, r24
     3f4:	c6 01       	movw	r24, r12
     3f6:	8a 0d       	add	r24, r10
     3f8:	9b 1d       	adc	r25, r11
     3fa:	24 db       	rcall	.-2488   	; 0xfffffa44 <__eeprom_end+0xff7ef86c>
	return false;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	bf 90       	pop	r11
     410:	af 90       	pop	r10
     412:	9f 90       	pop	r9
     414:	08 95       	ret

00000416 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>:
	}
	return false;
}

//For R/W virtual registers
template<typename T> bool cmd_helper_2(T* var, char* buf, uint8_t size, unsigned int c, uint8_t arr_size)
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	7c 01       	movw	r14, r24
     424:	eb 01       	movw	r28, r22
     426:	02 2f       	mov	r16, r18
{
	if (static_cast<char>(c) == 'A')
     428:	41 34       	cpi	r20, 0x41	; 65
     42a:	31 f4       	brne	.+12     	; 0x438 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x22>
	{
		intToBit(*var, buf);
     42c:	dc 01       	movw	r26, r24
     42e:	8c 91       	ld	r24, X
     430:	ae de       	rcall	.-676    	; 0x18e <_Z8intToBitIhEvT_Pch.constprop.5>
		uart_puts(buf);
     432:	ce 01       	movw	r24, r28
     434:	81 d1       	rcall	.+770    	; 0x738 <_Z9uart_putsPKc>
     436:	2a c0       	rjmp	.+84     	; 0x48c <__stack+0x2d>
		return true;
	}
	if (*buf == ':') ++buf;
     438:	88 81       	ld	r24, Y
     43a:	8a 33       	cpi	r24, 0x3A	; 58
     43c:	09 f4       	brne	.+2      	; 0x440 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x2a>
     43e:	21 96       	adiw	r28, 0x01	; 1
	uint8_t l = strnlen(buf, size);	//Argument letter has already been parsed out, only index:value left
     440:	60 e2       	ldi	r22, 0x20	; 32
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	ce 01       	movw	r24, r28
     446:	99 da       	rcall	.-2766   	; 0xfffff97a <__eeprom_end+0xff7ef7a2>
     448:	98 2f       	mov	r25, r24
     44a:	fe 01       	movw	r30, r28
     44c:	de 01       	movw	r26, r28
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	19 17       	cp	r17, r25
     452:	b8 f4       	brcc	.+46     	; 0x482 <__stack+0x23>
     454:	2d 91       	ld	r18, X+
     456:	2a 33       	cpi	r18, 0x3A	; 58
     458:	11 f0       	breq	.+4      	; 0x45e <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x48>
     45a:	1f 5f       	subi	r17, 0xFF	; 255
     45c:	f9 cf       	rjmp	.-14     	; 0x450 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0+0x3a>
	uint8_t i = arraySearch(buf, ':', l);
	int8_t n;
	if (i < l)
	{
		n = decodeInt(buf, 0, i);	//index goes first
     45e:	41 2f       	mov	r20, r17
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	ce 01       	movw	r24, r28
     464:	ae d3       	rcall	.+1884   	; 0xbc2 <_Z9decodeIntPKchh>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
     466:	87 fd       	sbrc	r24, 7
     468:	09 c0       	rjmp	.+18     	; 0x47c <__stack+0x1d>
     46a:	20 2f       	mov	r18, r16
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	48 2f       	mov	r20, r24
     470:	08 2e       	mov	r0, r24
     472:	00 0c       	add	r0, r0
     474:	55 0b       	sbc	r21, r21
     476:	42 17       	cp	r20, r18
     478:	53 07       	cpc	r21, r19
     47a:	1c f1       	brlt	.+70     	; 0x4c2 <__stack+0x63>
	{
		if (msg) reportError(PSTR_L("Illegal index"));
     47c:	8b e5       	ldi	r24, 0x5B	; 91
     47e:	9e e1       	ldi	r25, 0x1E	; 30
     480:	04 c0       	rjmp	.+8      	; 0x48a <__stack+0x2b>
		if (buf[++i] == '0') { *var &= static_cast<T>(~(static_cast<T>(1U) << n)); }
		else { *var |= static_cast<T>(static_cast<T>(1U) << n); };
	}
	else
	{
		if (l < (sizeof(T) * CHAR_BIT))
     482:	88 30       	cpi	r24, 0x08	; 8
     484:	28 f4       	brcc	.+10     	; 0x490 <__stack+0x31>
		{
			reportError(PSTR_L("Too short input"));
     486:	80 e6       	ldi	r24, 0x60	; 96
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	ac de       	rcall	.-680    	; 0x1e4 <_Z11reportErrorPKc>
			return true;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	39 c0       	rjmp	.+114    	; 0x502 <__stack+0xa3>
		if (buf[++i] == '0') { *var &= static_cast<T>(~(static_cast<T>(1U) << n)); }
		else { *var |= static_cast<T>(static_cast<T>(1U) << n); };
	}
	else
	{
		if (l < (sizeof(T) * CHAR_BIT))
     490:	27 e0       	ldi	r18, 0x07	; 7
     492:	30 e0       	ldi	r19, 0x00	; 0

template <typename T> void bitToInt(T* val, const char* str, uint8_t bits = sizeof(T) * 8);
template <typename T> void bitToInt(T* val, const char* str, uint8_t bits/* = sizeof(T) * 8*/)
{
	--bits;
	for (uint8_t i = 0; i <= bits; ++i) *val |= static_cast<T>((*str++ - '0') > 0) << (bits - i);
     494:	41 91       	ld	r20, Z+
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	41 33       	cpi	r20, 0x31	; 49
     49e:	51 05       	cpc	r21, r1
     4a0:	14 f4       	brge	.+4      	; 0x4a6 <__stack+0x47>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	02 2e       	mov	r0, r18
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <__stack+0x4d>
     4aa:	88 0f       	add	r24, r24
     4ac:	0a 94       	dec	r0
     4ae:	ea f7       	brpl	.-6      	; 0x4aa <__stack+0x4b>
     4b0:	d7 01       	movw	r26, r14
     4b2:	9c 91       	ld	r25, X
     4b4:	89 2b       	or	r24, r25
     4b6:	8c 93       	st	X, r24
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	31 09       	sbc	r19, r1
     4bc:	58 f7       	brcc	.-42     	; 0x494 <__stack+0x35>
			reportError(PSTR_L("Too short input"));
			return true;
		}
		else { bitToInt(var, buf); };
	}
	return false;
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	20 c0       	rjmp	.+64     	; 0x502 <__stack+0xa3>
	int8_t n;
	if (i < l)
	{
		n = decodeInt(buf, 0, i);	//index goes first
		if (check_index_helper(n, arr_size)) return true;
		if (buf[++i] == '0') { *var &= static_cast<T>(~(static_cast<T>(1U) << n)); }
     4c2:	1f 5f       	subi	r17, 0xFF	; 255
     4c4:	c1 0f       	add	r28, r17
     4c6:	d1 1d       	adc	r29, r1
     4c8:	98 81       	ld	r25, Y
     4ca:	f7 01       	movw	r30, r14
     4cc:	40 81       	ld	r20, Z
     4ce:	90 33       	cpi	r25, 0x30	; 48
     4d0:	71 f4       	brne	.+28     	; 0x4ee <__stack+0x8f>
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	f9 01       	movw	r30, r18
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <__stack+0x7f>
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	8a 95       	dec	r24
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <__stack+0x7b>
     4e2:	cf 01       	movw	r24, r30
     4e4:	80 95       	com	r24
     4e6:	84 23       	and	r24, r20
     4e8:	d7 01       	movw	r26, r14
     4ea:	8c 93       	st	X, r24
     4ec:	e8 cf       	rjmp	.-48     	; 0x4be <__stack+0x5f>
		else { *var |= static_cast<T>(static_cast<T>(1U) << n); };
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <__stack+0x97>
     4f4:	22 0f       	add	r18, r18
     4f6:	8a 95       	dec	r24
     4f8:	ea f7       	brpl	.-6      	; 0x4f4 <__stack+0x95>
     4fa:	24 2b       	or	r18, r20
     4fc:	f7 01       	movw	r30, r14
     4fe:	20 83       	st	Z, r18
     500:	de cf       	rjmp	.-68     	; 0x4be <__stack+0x5f>
			return true;
		}
		else { bitToInt(var, buf); };
	}
	return false;
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	08 95       	ret

00000510 <_Z15l_decode_helperPcRh>:
	*p++ = ',';
}

//Returns true if I/O index is missing. Parses index into passed integer variable. Messes with string buffer!
bool l_decode_helper(char* p, uint8_t &i)
{
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24
     51a:	8b 01       	movw	r16, r22
     51c:	8f e9       	ldi	r24, 0x9F	; 159
     51e:	9f e0       	ldi	r25, 0x0F	; 15
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <_Z15l_decode_helperPcRh+0x10>
     524:	00 c0       	rjmp	.+0      	; 0x526 <_Z15l_decode_helperPcRh+0x16>
     526:	00 00       	nop
	_delay_ms(1);
	p[0] = static_cast<char>(uart_getc());
     528:	5d d1       	rcall	.+698    	; 0x7e4 <_Z9uart_getcv>
     52a:	88 83       	st	Y, r24
     52c:	ef e9       	ldi	r30, 0x9F	; 159
     52e:	ff e0       	ldi	r31, 0x0F	; 15
     530:	31 97       	sbiw	r30, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <_Z15l_decode_helperPcRh+0x20>
     534:	00 c0       	rjmp	.+0      	; 0x536 <_Z15l_decode_helperPcRh+0x26>
     536:	00 00       	nop
	_delay_ms(1);
	p[1] = static_cast<char>(uart_getc());
     538:	55 d1       	rcall	.+682    	; 0x7e4 <_Z9uart_getcv>
     53a:	89 83       	std	Y+1, r24	; 0x01
	if ((p[1] == ':') || (p[1] == '\r'))
     53c:	8a 33       	cpi	r24, 0x3A	; 58
     53e:	11 f0       	breq	.+4      	; 0x544 <_Z15l_decode_helperPcRh+0x34>
     540:	8d 30       	cpi	r24, 0x0D	; 13
     542:	29 f4       	brne	.+10     	; 0x54e <_Z15l_decode_helperPcRh+0x3e>
	{
		i = ASCIIToNum(p[0]);
     544:	88 81       	ld	r24, Y
     546:	80 53       	subi	r24, 0x30	; 48
     548:	f8 01       	movw	r30, r16
     54a:	80 83       	st	Z, r24
     54c:	1c c0       	rjmp	.+56     	; 0x586 <_Z15l_decode_helperPcRh+0x76>
     54e:	8f e9       	ldi	r24, 0x9F	; 159
     550:	9f e0       	ldi	r25, 0x0F	; 15
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <_Z15l_decode_helperPcRh+0x42>
     556:	00 c0       	rjmp	.+0      	; 0x558 <_Z15l_decode_helperPcRh+0x48>
     558:	00 00       	nop
	}
	else
	{
		_delay_ms(1);
		if (arg_check_helper(uart_getc())) return true;
     55a:	44 d1       	rcall	.+648    	; 0x7e4 <_Z9uart_getcv>
}

//Returns true if parameter c is not an argument separator character
bool arg_check_helper(unsigned int c)
{
	if (static_cast<char>(c) != ':')
     55c:	8a 33       	cpi	r24, 0x3A	; 58
     55e:	29 f0       	breq	.+10     	; 0x56a <_Z15l_decode_helperPcRh+0x5a>
	{
		reportError(PSTR_L("Missing argument"));
     560:	8a e4       	ldi	r24, 0x4A	; 74
     562:	9e e1       	ldi	r25, 0x1E	; 30
     564:	3f de       	rcall	.-898    	; 0x1e4 <_Z11reportErrorPKc>
		i = ASCIIToNum(p[0]);
	}
	else
	{
		_delay_ms(1);
		if (arg_check_helper(uart_getc())) return true;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	15 c0       	rjmp	.+42     	; 0x594 <_Z15l_decode_helperPcRh+0x84>
		p[2] = '\0';
     56a:	1a 82       	std	Y+2, r1	; 0x02
	delete[] Data;
}

float decodeFloat(const char* str, uint8_t max_len)
{
	return decodeFloat(str, 0, strnlen(str, max_len));
     56c:	60 e2       	ldi	r22, 0x20	; 32
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	ce 01       	movw	r24, r28
     572:	03 da       	rcall	.-3066   	; 0xfffff97a <__eeprom_end+0xff7ef7a2>
}
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
{
	if (len == 0) return NAN;
     574:	88 23       	and	r24, r24
     576:	49 f0       	breq	.+18     	; 0x58a <_Z15l_decode_helperPcRh+0x7a>
     578:	48 2f       	mov	r20, r24
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	ce 01       	movw	r24, r28
     57e:	a4 d2       	rcall	.+1352   	; 0xac8 <_Z11decodeFloatPKchh.part.0.lto_priv.22>
		i = decodeInt(p);
     580:	e4 da       	rcall	.-2616   	; 0xfffffb4a <__eeprom_end+0xff7ef972>
     582:	f8 01       	movw	r30, r16
     584:	60 83       	st	Z, r22
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	05 c0       	rjmp	.+10     	; 0x594 <_Z15l_decode_helperPcRh+0x84>
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 ec       	ldi	r24, 0xC0	; 192
     590:	9f e7       	ldi	r25, 0x7F	; 127
     592:	f6 cf       	rjmp	.-20     	; 0x580 <_Z15l_decode_helperPcRh+0x70>
	}
	return false;
}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	08 95       	ret

0000059e <_Z7actuatehb>:
{
	for (uint8_t i = 0; i < arraySize(output_pins); ++i) pin_t::Write(&(output_pins[i]), ((states & BVO(i)) > 0) != ((output_inv_buf & BVO(i)) > 0));
	output_compare_buf = states;
}
void actuate(uint8_t pin_index, bool state)
{
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	06 2f       	mov	r16, r22
	state = (state != ((output_inv_buf & BVO(pin_index)) > 0));
     5a8:	28 2f       	mov	r18, r24
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	c1 e0       	ldi	r28, 0x01	; 1
     5ae:	d0 e0       	ldi	r29, 0x00	; 0
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <_Z7actuatehb+0x18>
     5b2:	cc 0f       	add	r28, r28
     5b4:	dd 1f       	adc	r29, r29
     5b6:	8a 95       	dec	r24
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <_Z7actuatehb+0x14>
     5ba:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_ZL14output_inv_buf.lto_priv.27>
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	8c 23       	and	r24, r28
     5c2:	9d 23       	and	r25, r29
     5c4:	11 e0       	ldi	r17, 0x01	; 1
     5c6:	18 16       	cp	r1, r24
     5c8:	19 06       	cpc	r1, r25
     5ca:	0c f0       	brlt	.+2      	; 0x5ce <_Z7actuatehb+0x30>
     5cc:	10 e0       	ldi	r17, 0x00	; 0
	pin_t::Write(&(output_pins[pin_index]), state);
     5ce:	60 2f       	mov	r22, r16
     5d0:	61 27       	eor	r22, r17
     5d2:	46 e0       	ldi	r20, 0x06	; 6
     5d4:	42 9f       	mul	r20, r18
     5d6:	c0 01       	movw	r24, r0
     5d8:	43 9f       	mul	r20, r19
     5da:	90 0d       	add	r25, r0
     5dc:	11 24       	eor	r1, r1
     5de:	89 5b       	subi	r24, 0xB9	; 185
     5e0:	9e 4f       	sbci	r25, 0xFE	; 254
     5e2:	7c d0       	rcall	.+248    	; 0x6dc <_ZN5pin_t5WriteEPKS_b>
     5e4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZL18output_compare_buf.lto_priv.28>
	state ? output_compare_buf |= BVO(pin_index) : output_compare_buf &= static_cast<outputs_t>(~BVO(pin_index));
     5e8:	01 17       	cp	r16, r17
     5ea:	11 f0       	breq	.+4      	; 0x5f0 <_Z7actuatehb+0x52>
     5ec:	c8 2b       	or	r28, r24
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <_Z7actuatehb+0x56>
     5f0:	c0 95       	com	r28
     5f2:	c8 23       	and	r28, r24
     5f4:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <_ZL18output_compare_buf.lto_priv.28>
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	08 95       	ret

00000602 <_Z7actuateh>:
	for (i = 0; i < arraySize(input_pins); ++i) if (temp & BVI(i)) reaction(i, res & BVI(i));
	last_input_diff = res;
}

void actuate(outputs_t states)
{
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	b8 2e       	mov	r11, r24
     616:	87 e4       	ldi	r24, 0x47	; 71
     618:	c8 2e       	mov	r12, r24
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	d8 2e       	mov	r13, r24
     61e:	c0 e0       	ldi	r28, 0x00	; 0
     620:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < arraySize(output_pins); ++i) pin_t::Write(&(output_pins[i]), ((states & BVO(i)) > 0) != ((output_inv_buf & BVO(i)) > 0));
     622:	01 e0       	ldi	r16, 0x01	; 1
     624:	10 e0       	ldi	r17, 0x00	; 0
     626:	eb 2c       	mov	r14, r11
     628:	f1 2c       	mov	r15, r1
     62a:	98 01       	movw	r18, r16
     62c:	0c 2e       	mov	r0, r28
     62e:	02 c0       	rjmp	.+4      	; 0x634 <_Z7actuateh+0x32>
     630:	22 0f       	add	r18, r18
     632:	33 1f       	adc	r19, r19
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <_Z7actuateh+0x2e>
     638:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_ZL14output_inv_buf.lto_priv.27>
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	82 23       	and	r24, r18
     640:	93 23       	and	r25, r19
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	18 16       	cp	r1, r24
     646:	19 06       	cpc	r1, r25
     648:	0c f0       	brlt	.+2      	; 0x64c <_Z7actuateh+0x4a>
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	2e 21       	and	r18, r14
     64e:	3f 21       	and	r19, r15
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	12 16       	cp	r1, r18
     654:	13 06       	cpc	r1, r19
     656:	0c f0       	brlt	.+2      	; 0x65a <_Z7actuateh+0x58>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	68 27       	eor	r22, r24
     65c:	c6 01       	movw	r24, r12
     65e:	3e d0       	rcall	.+124    	; 0x6dc <_ZN5pin_t5WriteEPKS_b>
     660:	21 96       	adiw	r28, 0x01	; 1
     662:	86 e0       	ldi	r24, 0x06	; 6
     664:	c8 0e       	add	r12, r24
     666:	d1 1c       	adc	r13, r1
     668:	c5 30       	cpi	r28, 0x05	; 5
     66a:	d1 05       	cpc	r29, r1
     66c:	f1 f6       	brne	.-68     	; 0x62a <_Z7actuateh+0x28>
	output_compare_buf = states;
     66e:	b0 92 3f 01 	sts	0x013F, r11	; 0x80013f <_ZL18output_compare_buf.lto_priv.28>
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	08 95       	ret

00000686 <__vector_9>:
#endif

//Interrupts

ISR(TIMER0_OVF_vect)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
	++time_cnt;	//Increment main timer (used for PC reset)
     694:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <_ZL8time_cnt.lto_priv.36>
     698:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <_ZL8time_cnt.lto_priv.36+0x1>
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <_ZL8time_cnt.lto_priv.36+0x1>
     6a2:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <_ZL8time_cnt.lto_priv.36>
}
     6a6:	9f 91       	pop	r25
     6a8:	8f 91       	pop	r24
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <_Z8OWselectPKh>:

//
// Do a ROM select
//
void OWselect(const uint8_t rom[8])
{
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	8c 01       	movw	r16, r24
	uint8_t i;

	OWwrite(0x55);           // Choose ROM
     6be:	85 e5       	ldi	r24, 0x55	; 85
     6c0:	fb dc       	rcall	.-1546   	; 0xb8 <_Z7OWwritehh.constprop.21>
     6c2:	e8 01       	movw	r28, r16
     6c4:	08 5f       	subi	r16, 0xF8	; 248
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255

	for (i = 0; i < 8; i++) OWwrite(rom[i]);
     6c8:	89 91       	ld	r24, Y+
     6ca:	f6 dc       	rcall	.-1556   	; 0xb8 <_Z7OWwritehh.constprop.21>
     6cc:	c0 17       	cp	r28, r16
     6ce:	d1 07       	cpc	r29, r17
     6d0:	d9 f7       	brne	.-10     	; 0x6c8 <_Z8OWselectPKh+0x14>
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <_ZN5pin_t5WriteEPKS_b>:
{};

#if PINS_STATIC
	#if !PINS_STATIC_INLINE
	void pin_t::Write(const pin_t* pin, bool val)
	{
     6dc:	dc 01       	movw	r26, r24
     6de:	ed 91       	ld	r30, X+
     6e0:	fc 91       	ld	r31, X
     6e2:	11 97       	sbiw	r26, 0x01	; 1
     6e4:	12 96       	adiw	r26, 0x02	; 2
     6e6:	8c 91       	ld	r24, X
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
     6e8:	91 81       	ldd	r25, Z+1	; 0x01
     6ea:	66 23       	and	r22, r22
     6ec:	11 f0       	breq	.+4      	; 0x6f2 <_ZN5pin_t5WriteEPKS_b+0x16>
     6ee:	89 2b       	or	r24, r25
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <_ZN5pin_t5WriteEPKS_b+0x1a>
     6f2:	80 95       	com	r24
     6f4:	89 23       	and	r24, r25
     6f6:	81 83       	std	Z+1, r24	; 0x01
     6f8:	08 95       	ret

000006fa <_Z9uart_putch>:
Input:    byte to be transmitted
Returns:  none
**************************************************************************/
void uart_putc(unsigned char data)
{
    unsigned char tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     6fa:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <_ZL11UART_TxHead.lto_priv.34>
     6fe:	9f 5f       	subi	r25, 0xFF	; 255
     700:	9f 73       	andi	r25, 0x3F	; 63
    while ( tmphead == UART_TxTail );
     702:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <_ZL11UART_TxTail.lto_priv.35>
     706:	92 17       	cp	r25, r18
     708:	e1 f3       	breq	.-8      	; 0x702 <_Z9uart_putch+0x8>
    UART_TxBuf[tmphead] = data;
     70a:	e9 2f       	mov	r30, r25
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	ed 54       	subi	r30, 0x4D	; 77
     710:	fe 4f       	sbci	r31, 0xFE	; 254
     712:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     714:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <_ZL11UART_TxHead.lto_priv.34>
    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     718:	55 9a       	sbi	0x0a, 5	; 10
     71a:	08 95       	ret

0000071c <_Z11uart_puts_pPKc>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	fc 01       	movw	r30, r24
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) uart_putc(c);
     722:	84 91       	lpm	r24, Z
     724:	ef 01       	movw	r28, r30
     726:	21 96       	adiw	r28, 0x01	; 1
     728:	88 23       	and	r24, r24
     72a:	19 f0       	breq	.+6      	; 0x732 <_Z11uart_puts_pPKc+0x16>
     72c:	e6 df       	rcall	.-52     	; 0x6fa <_Z9uart_putch>
     72e:	fe 01       	movw	r30, r28
     730:	f8 cf       	rjmp	.-16     	; 0x722 <_Z11uart_puts_pPKc+0x6>
}/* uart_puts_p */
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <_Z9uart_putsPKc>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ec 01       	movw	r28, r24
    while (*s) uart_putc(*s++);
     73e:	89 91       	ld	r24, Y+
     740:	88 23       	and	r24, r24
     742:	11 f0       	breq	.+4      	; 0x748 <_Z9uart_putsPKc+0x10>
     744:	da df       	rcall	.-76     	; 0x6fa <_Z9uart_putch>
     746:	fb cf       	rjmp	.-10     	; 0x73e <_Z9uart_putsPKc+0x6>
}/* uart_puts */
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <_Z11uart_puts_EPKhh>:
#if ENABLE_UART_EXTENSIONS
/************************************************************************/
/*  Takes EEPROM chunk (pointer + size) and spits it out into serial    */
/************************************************************************/
void uart_puts_E(const uint8_t* e, uint8_t sz)
{
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
	char buf[sz + 1];
	buf[sz] = '\0';
	eeprom_read_block((void*)buf, (const void*)e, sz);
	uart_puts(buf);
}
     75e:	ed b6       	in	r14, 0x3d	; 61
     760:	fe b6       	in	r15, 0x3e	; 62
/************************************************************************/
/*  Takes EEPROM chunk (pointer + size) and spits it out into serial    */
/************************************************************************/
void uart_puts_E(const uint8_t* e, uint8_t sz)
{
	char buf[sz + 1];
     762:	46 2f       	mov	r20, r22
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	9a 01       	movw	r18, r20
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	6d b7       	in	r22, 0x3d	; 61
     76e:	7e b7       	in	r23, 0x3e	; 62
     770:	62 1b       	sub	r22, r18
     772:	73 0b       	sbc	r23, r19
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	7e bf       	out	0x3e, r23	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	6d bf       	out	0x3d, r22	; 61
     77e:	0d b7       	in	r16, 0x3d	; 61
     780:	1e b7       	in	r17, 0x3e	; 62
     782:	0f 5f       	subi	r16, 0xFF	; 255
     784:	1f 4f       	sbci	r17, 0xFF	; 255
	buf[sz] = '\0';
     786:	f8 01       	movw	r30, r16
     788:	e4 0f       	add	r30, r20
     78a:	f5 1f       	adc	r31, r21
     78c:	10 82       	st	Z, r1
	eeprom_read_block((void*)buf, (const void*)e, sz);
     78e:	bc 01       	movw	r22, r24
     790:	c8 01       	movw	r24, r16
     792:	31 d9       	rcall	.-3486   	; 0xfffff9f6 <__eeprom_end+0xff7ef81e>
	uart_puts(buf);
     794:	c8 01       	movw	r24, r16
     796:	d0 df       	rcall	.-96     	; 0x738 <_Z9uart_putsPKc>
}
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	fe be       	out	0x3e, r15	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	ed be       	out	0x3d, r14	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	08 95       	ret

000007b0 <_Z9uart_peekv>:
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_peek(void)
{
    if ( UART_RxHead == UART_RxTail ) return UART_NO_DATA;
     7b0:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <_ZL11UART_RxHead.lto_priv.37>
     7b4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
     7b8:	98 17       	cp	r25, r24
     7ba:	89 f0       	breq	.+34     	; 0x7de <_Z9uart_peekv+0x2e>
    return (UART_LastRxError << 8) + UART_RxBuf[(UART_RxTail + 1) & UART_RX_BUFFER_MASK];
     7bc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <_ZL16UART_LastRxError>
     7c0:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <__data_end>
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	31 96       	adiw	r30, 0x01	; 1
     7c8:	ef 71       	andi	r30, 0x1F	; 31
     7ca:	ff 27       	eor	r31, r31
     7cc:	ee 56       	subi	r30, 0x6E	; 110
     7ce:	fe 4f       	sbci	r31, 0xFE	; 254
     7d0:	20 81       	ld	r18, Z
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	98 2f       	mov	r25, r24
     7d6:	88 27       	eor	r24, r24
     7d8:	82 0f       	add	r24, r18
     7da:	91 1d       	adc	r25, r1
     7dc:	08 95       	ret
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_peek(void)
{
    if ( UART_RxHead == UART_RxTail ) return UART_NO_DATA;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	91 e0       	ldi	r25, 0x01	; 1
    return (UART_LastRxError << 8) + UART_RxBuf[(UART_RxTail + 1) & UART_RX_BUFFER_MASK];
}
     7e2:	08 95       	ret

000007e4 <_Z9uart_getcv>:
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{
    unsigned char lastRxError;
    if ( UART_RxHead == UART_RxTail ) return UART_NO_DATA;
     7e4:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <_ZL11UART_RxHead.lto_priv.37>
     7e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
     7ec:	98 17       	cp	r25, r24
     7ee:	b1 f0       	breq	.+44     	; 0x81c <_Z9uart_getcv+0x38>
    lastRxError = UART_LastRxError;
     7f0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <_ZL16UART_LastRxError>
    UART_LastRxError = 0;
     7f4:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <_ZL16UART_LastRxError>
    UART_RxTail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     7f8:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__data_end>
     7fc:	9f 5f       	subi	r25, 0xFF	; 255
     7fe:	9f 71       	andi	r25, 0x1F	; 31
     800:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__data_end>
    return (lastRxError << 8) + UART_RxBuf[UART_RxTail];
     804:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <__data_end>
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	ee 56       	subi	r30, 0x6E	; 110
     80c:	fe 4f       	sbci	r31, 0xFE	; 254
     80e:	20 81       	ld	r18, Z
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	98 2f       	mov	r25, r24
     814:	88 27       	eor	r24, r24
     816:	82 0f       	add	r24, r18
     818:	91 1d       	adc	r25, r1
     81a:	08 95       	ret
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{
    unsigned char lastRxError;
    if ( UART_RxHead == UART_RxTail ) return UART_NO_DATA;
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	91 e0       	ldi	r25, 0x01	; 1
    lastRxError = UART_LastRxError;
    UART_LastRxError = 0;
    UART_RxTail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    return (lastRxError << 8) + UART_RxBuf[UART_RxTail];
}/* uart_getc */
     820:	08 95       	ret

00000822 <_Z10soft_resetv>:
/************************************************************************/
/* Sending complete                                                     */
/************************************************************************/
bool uart_ready(void)
{
	return UART_TxHead == UART_TxTail;
     822:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <_ZL11UART_TxHead.lto_priv.34>
     826:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <_ZL11UART_TxTail.lto_priv.35>

//Main

void soft_reset()
{
	while (!uart_ready()) _delay_ms(10);	//Make sure everything is sent
     82a:	98 17       	cp	r25, r24
     82c:	39 f0       	breq	.+14     	; 0x83c <_Z10soft_resetv+0x1a>
     82e:	8f e3       	ldi	r24, 0x3F	; 63
     830:	9c e9       	ldi	r25, 0x9C	; 156
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <_Z10soft_resetv+0x10>
     836:	00 c0       	rjmp	.+0      	; 0x838 <_Z10soft_resetv+0x16>
     838:	00 00       	nop
     83a:	f3 cf       	rjmp	.-26     	; 0x822 <_Z10soft_resetv>
	cli();	//Disable interrupts, thus UART won't be able to receive commands before reset
     83c:	f8 94       	cli
	while (uart_getc() != UART_NO_DATA);	//Make sure we won't receive some partial commands once restarted (no delay needed due to previous line)
     83e:	d2 df       	rcall	.-92     	; 0x7e4 <_Z9uart_getcv>
     840:	81 15       	cp	r24, r1
     842:	91 40       	sbci	r25, 0x01	; 1
     844:	e1 f7       	brne	.-8      	; 0x83e <_Z10soft_resetv+0x1c>
     846:	ff cf       	rjmp	.-2      	; 0x846 <_Z10soft_resetv+0x24>

00000848 <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	8f 93       	push	r24
     854:	9f 93       	push	r25
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
    unsigned char tmptail;


    if ( UART_TxHead != UART_TxTail) {
     85a:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <_ZL11UART_TxHead.lto_priv.34>
     85e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <_ZL11UART_TxTail.lto_priv.35>
     862:	98 17       	cp	r25, r24
     864:	61 f0       	breq	.+24     	; 0x87e <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     866:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <_ZL11UART_TxTail.lto_priv.35>
     86a:	ef 5f       	subi	r30, 0xFF	; 255
     86c:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
     86e:	e0 93 d0 00 	sts	0x00D0, r30	; 0x8000d0 <_ZL11UART_TxTail.lto_priv.35>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	ed 54       	subi	r30, 0x4D	; 77
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	80 81       	ld	r24, Z
     87a:	8c b9       	out	0x0c, r24	; 12
     87c:	01 c0       	rjmp	.+2      	; 0x880 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     87e:	55 98       	cbi	0x0a, 5	; 10
    }
}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	9f 91       	pop	r25
     886:	8f 91       	pop	r24
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	2f 93       	push	r18
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
     8a6:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
     8a8:	9c b1       	in	r25, 0x0c	; 12
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
#elif defined(FE1) && defined(DOR1) && defined(UPE1)
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
     8aa:	88 71       	andi	r24, 0x18	; 24
#endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     8ac:	e0 91 cf 00 	lds	r30, 0x00CF	; 0x8000cf <_ZL11UART_RxHead.lto_priv.37>
     8b0:	ef 5f       	subi	r30, 0xFF	; 255
     8b2:	ef 71       	andi	r30, 0x1F	; 31

    if ( tmphead == UART_RxTail ) {
     8b4:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__data_end>
     8b8:	e2 17       	cp	r30, r18
     8ba:	39 f0       	breq	.+14     	; 0x8ca <__vector_11+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     8bc:	e0 93 cf 00 	sts	0x00CF, r30	; 0x8000cf <_ZL11UART_RxHead.lto_priv.37>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	ee 56       	subi	r30, 0x6E	; 110
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	90 83       	st	Z, r25
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <__vector_11+0x3a>
    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     8ca:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
     8cc:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <_ZL16UART_LastRxError>
     8d0:	89 2b       	or	r24, r25
     8d2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <_ZL16UART_LastRxError>
}
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	9f 91       	pop	r25
     8dc:	8f 91       	pop	r24
     8de:	2f 91       	pop	r18
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <_ZN5pin_t12SetDirectionEPKS_b.part.1.lto_priv.33>:
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
     8ea:	dc 01       	movw	r26, r24
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	11 97       	sbiw	r26, 0x01	; 1
     8f2:	90 81       	ld	r25, Z
     8f4:	12 96       	adiw	r26, 0x02	; 2
     8f6:	8c 91       	ld	r24, X
     8f8:	89 2b       	or	r24, r25
     8fa:	80 83       	st	Z, r24
     8fc:	08 95       	ret

000008fe <_Z10OWread_bitv>:
//
uint8_t OWread_bit(void)
{
	uint8_t r;

	cli();
     8fe:	f8 94       	cli
     900:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     904:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     908:	f0 df       	rcall	.-32     	; 0x8ea <_ZN5pin_t12SetDirectionEPKS_b.part.1.lto_priv.33>
	pin_t::SetDirection(OWpin, pin_t::Output);
	#else
	OWpin->SetDirection(pin_t::Output);
	#endif
	#if PINS_STATIC
	pin_t::Write(OWpin, false);
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     910:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     914:	e3 de       	rcall	.-570    	; 0x6dc <_ZN5pin_t5WriteEPKS_b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     916:	80 e1       	ldi	r24, 0x10	; 16
     918:	8a 95       	dec	r24
     91a:	f1 f7       	brne	.-4      	; 0x918 <_Z10OWread_bitv+0x1a>
	#else
	OWpin->Write(false);
	#endif
	_delay_us(3);
	#if PINS_STATIC
	pin_t::SetDirection(OWpin, pin_t::Input);
     91c:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     920:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     924:	ed 91       	ld	r30, X+
     926:	fc 91       	ld	r31, X
     928:	11 97       	sbiw	r26, 0x01	; 1
     92a:	90 81       	ld	r25, Z
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	8c 91       	ld	r24, X
     930:	80 95       	com	r24
     932:	89 23       	and	r24, r25
     934:	80 83       	st	Z, r24
     936:	e5 e3       	ldi	r30, 0x35	; 53
     938:	ea 95       	dec	r30
     93a:	f1 f7       	brne	.-4      	; 0x938 <_Z10OWread_bitv+0x3a>
     93c:	00 00       	nop
	OWpin->SetDirection(pin_t::Input);
	#endif	// let pin float, pull up will raise
	_delay_us(10);
	r = 
	#if PINS_STATIC
	pin_t::Read(OWpin);
     93e:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     942:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
     946:	ed 91       	ld	r30, X+
     948:	fc 91       	ld	r31, X
     94a:	11 97       	sbiw	r26, 0x01	; 1
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	90 81       	ld	r25, Z
     950:	12 96       	adiw	r26, 0x02	; 2
     952:	8c 91       	ld	r24, X
     954:	98 23       	and	r25, r24
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	09 f4       	brne	.+2      	; 0x95c <_Z10OWread_bitv+0x5e>
     95a:	80 e0       	ldi	r24, 0x00	; 0
	#else
	OWpin->Read();
	#endif
	sei();
     95c:	78 94       	sei
     95e:	e3 ed       	ldi	r30, 0xD3	; 211
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <_Z10OWread_bitv+0x64>
     966:	00 c0       	rjmp	.+0      	; 0x968 <_Z10OWread_bitv+0x6a>
     968:	00 00       	nop
	_delay_us(53);
	return r;
}
     96a:	08 95       	ret

0000096c <_Z11OWwrite_bith>:
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OWwrite_bit(uint8_t v)
{
	if (v & 1) {
     96c:	80 ff       	sbrs	r24, 0
     96e:	24 c0       	rjmp	.+72     	; 0x9b8 <_Z11OWwrite_bith+0x4c>
		cli();
     970:	f8 94       	cli
		#if PINS_STATIC
		pin_t::Write(OWpin, false);
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     978:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     97c:	af de       	rcall	.-674    	; 0x6dc <_ZN5pin_t5WriteEPKS_b>
     97e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     982:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     986:	b1 df       	rcall	.-158    	; 0x8ea <_ZN5pin_t12SetDirectionEPKS_b.part.1.lto_priv.33>
     988:	85 e3       	ldi	r24, 0x35	; 53
     98a:	8a 95       	dec	r24
     98c:	f1 f7       	brne	.-4      	; 0x98a <_Z11OWwrite_bith+0x1e>
     98e:	00 00       	nop
		#else
		OWpin->SetDirection(pin_t::Output);
		#endif	// drive output low
		_delay_us(10);
		#if PINS_STATIC
		pin_t::Write(OWpin, true);
     990:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     994:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>

#if PINS_STATIC
	#if !PINS_STATIC_INLINE
	void pin_t::Write(const pin_t* pin, bool val)
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
     998:	ed 91       	ld	r30, X+
     99a:	fc 91       	ld	r31, X
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	91 81       	ldd	r25, Z+1	; 0x01
     9a0:	12 96       	adiw	r26, 0x02	; 2
     9a2:	8c 91       	ld	r24, X
     9a4:	89 2b       	or	r24, r25
     9a6:	81 83       	std	Z+1, r24	; 0x01
		#else
		OWpin->Write(true);
		#endif	// drive output high
		sei();
     9a8:	78 94       	sei
     9aa:	8b ed       	ldi	r24, 0xDB	; 219
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <_Z11OWwrite_bith+0x42>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <_Z11OWwrite_bith+0x48>
     9b4:	00 00       	nop
     9b6:	08 95       	ret
		_delay_us(55);
		} else {
		cli();
     9b8:	f8 94       	cli
		#if PINS_STATIC
		pin_t::Write(OWpin, false);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     9c0:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     9c4:	8b de       	rcall	.-746    	; 0x6dc <_ZN5pin_t5WriteEPKS_b>
     9c6:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     9ca:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     9ce:	8d df       	rcall	.-230    	; 0x8ea <_ZN5pin_t12SetDirectionEPKS_b.part.1.lto_priv.33>
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <_Z11OWwrite_bith+0x68>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <_Z11OWwrite_bith+0x6e>
     9da:	00 00       	nop
		#else
		OWpin->SetDirection(pin_t::Output);
		#endif	// drive output low
		_delay_us(65);
		#if PINS_STATIC
		pin_t::Write(OWpin, true);
     9dc:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     9e0:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     9e4:	ed 91       	ld	r30, X+
     9e6:	fc 91       	ld	r31, X
     9e8:	11 97       	sbiw	r26, 0x01	; 1
     9ea:	91 81       	ldd	r25, Z+1	; 0x01
     9ec:	12 96       	adiw	r26, 0x02	; 2
     9ee:	8c 91       	ld	r24, X
     9f0:	89 2b       	or	r24, r25
     9f2:	81 83       	std	Z+1, r24	; 0x01
		#else
		OWpin->Write(true);
		#endif	// drive output high
		sei();
     9f4:	78 94       	sei
     9f6:	9a e1       	ldi	r25, 0x1A	; 26
     9f8:	9a 95       	dec	r25
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <_Z11OWwrite_bith+0x8c>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <_Z11OWwrite_bith+0x92>
     9fe:	08 95       	ret

00000a00 <_Z7OWresetv>:
uint8_t OWreset(void)
{
	uint8_t r;
	uint8_t retries = 125;

	cli();
     a00:	f8 94       	cli
	#if PINS_STATIC
	pin_t::SetDirection(OWpin, pin_t::Input);
     a02:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     a06:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
     a0a:	ed 91       	ld	r30, X+
     a0c:	fc 91       	ld	r31, X
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	90 81       	ld	r25, Z
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8c 91       	ld	r24, X
     a16:	80 95       	com	r24
     a18:	89 23       	and	r24, r25
     a1a:	80 83       	st	Z, r24
	#else
	OWpin->SetDirection(pin_t::Input);
	#endif
	sei();
     a1c:	78 94       	sei
     a1e:	9d e7       	ldi	r25, 0x7D	; 125
     a20:	91 50       	subi	r25, 0x01	; 1
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 3;
     a22:	09 f4       	brne	.+2      	; 0xa26 <_Z7OWresetv+0x26>
     a24:	4f c0       	rjmp	.+158    	; 0xac4 <_Z7OWresetv+0xc4>
     a26:	8a e0       	ldi	r24, 0x0A	; 10
     a28:	8a 95       	dec	r24
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <_Z7OWresetv+0x28>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <_Z7OWresetv+0x2e>
		_delay_us(2);
	} while (!
	#if PINS_STATIC
	pin_t::Read(OWpin)
     a2e:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     a32:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
     a36:	ed 91       	ld	r30, X+
     a38:	fc 91       	ld	r31, X
     a3a:	11 97       	sbiw	r26, 0x01	; 1
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	20 81       	ld	r18, Z
	#else
	OWpin->SetDirection(pin_t::Input);
	#endif
	sei();
	// wait until the wire is high... just in case
	do {
     a40:	12 96       	adiw	r26, 0x02	; 2
     a42:	8c 91       	ld	r24, X
     a44:	82 23       	and	r24, r18
     a46:	61 f3       	breq	.-40     	; 0xa20 <_Z7OWresetv+0x20>
	#else
	OWpin->Read()
	#endif
	);

	cli();
     a48:	f8 94       	cli
	#if PINS_STATIC
	pin_t::Write(OWpin, false);
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     a50:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     a54:	43 de       	rcall	.-890    	; 0x6dc <_ZN5pin_t5WriteEPKS_b>
     a56:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     a5a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     a5e:	45 df       	rcall	.-374    	; 0x8ea <_ZN5pin_t12SetDirectionEPKS_b.part.1.lto_priv.33>
	#if PINS_STATIC
	pin_t::SetDirection(OWpin, pin_t::Output);
	#else
	OWpin->SetDirection(pin_t::Output);
	#endif	// drive output low
	sei();
     a60:	78 94       	sei
     a62:	ef ec       	ldi	r30, 0xCF	; 207
     a64:	f7 e0       	ldi	r31, 0x07	; 7
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <_Z7OWresetv+0x66>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <_Z7OWresetv+0x6c>
     a6c:	00 00       	nop
	_delay_us(500);
	cli();
     a6e:	f8 94       	cli
	#if PINS_STATIC
	pin_t::SetDirection(OWpin, pin_t::Input);
     a70:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     a74:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
     a78:	ed 91       	ld	r30, X+
     a7a:	fc 91       	ld	r31, X
     a7c:	11 97       	sbiw	r26, 0x01	; 1
     a7e:	90 81       	ld	r25, Z
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	8c 91       	ld	r24, X
     a84:	80 95       	com	r24
     a86:	89 23       	and	r24, r25
     a88:	80 83       	st	Z, r24
     a8a:	87 ec       	ldi	r24, 0xC7	; 199
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <_Z7OWresetv+0x8e>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <_Z7OWresetv+0x94>
     a94:	00 00       	nop
	OWpin->SetDirection(pin_t::Input);
	#endif	// allow it to float
	_delay_us(50);
	r = !
	#if PINS_STATIC
	pin_t::Read(OWpin);
     a96:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <_ZL5OWpin.lto_priv.32>
     a9a:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
     a9e:	ed 91       	ld	r30, X+
     aa0:	fc 91       	ld	r31, X
     aa2:	11 97       	sbiw	r26, 0x01	; 1
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	90 81       	ld	r25, Z
     aa8:	12 96       	adiw	r26, 0x02	; 2
     aaa:	8c 91       	ld	r24, X
     aac:	98 23       	and	r25, r24
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	09 f0       	breq	.+2      	; 0xab4 <_Z7OWresetv+0xb4>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
	#else
	OWpin->Read();
	#endif
	sei();
     ab4:	78 94       	sei
     ab6:	e7 e6       	ldi	r30, 0x67	; 103
     ab8:	f6 e0       	ldi	r31, 0x06	; 6
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <_Z7OWresetv+0xba>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <_Z7OWresetv+0xc0>
     ac0:	00 00       	nop
     ac2:	08 95       	ret
	OWpin->SetDirection(pin_t::Input);
	#endif
	sei();
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 3;
     ac4:	83 e0       	ldi	r24, 0x03	; 3
	OWpin->Read();
	#endif
	sei();
	_delay_us(410);
	return r;
}
     ac6:	08 95       	ret

00000ac8 <_Z11decodeFloatPKchh.part.0.lto_priv.22>:

float decodeFloat(const char* str, uint8_t max_len)
{
	return decodeFloat(str, 0, strnlen(str, max_len));
}
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
     ac8:	6f 92       	push	r6
     aca:	7f 92       	push	r7
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	a4 2e       	mov	r10, r20
{
	if (len == 0) return NAN;
	static const float mult[] PROGMEM = { 100, 10, 1, 0.1, 0.01, 0.001 };
	str += start;
     ae6:	ec 01       	movw	r28, r24
     ae8:	c6 0f       	add	r28, r22
     aea:	d1 1d       	adc	r29, r1
	bool neg = false;
	if (str[0] == '-') { neg = true; str++; } //Get rid of signs
     aec:	88 81       	ld	r24, Y
     aee:	8d 32       	cpi	r24, 0x2D	; 45
     af0:	21 f4       	brne	.+8      	; 0xafa <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x32>
     af2:	21 96       	adiw	r28, 0x01	; 1
     af4:	77 24       	eor	r7, r7
     af6:	73 94       	inc	r7
     af8:	04 c0       	rjmp	.+8      	; 0xb02 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x3a>
	else { if (str[0] == '+') str++; };
     afa:	8b 32       	cpi	r24, 0x2B	; 43
     afc:	09 f4       	brne	.+2      	; 0xb00 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x38>
     afe:	21 96       	adiw	r28, 0x01	; 1
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
{
	if (len == 0) return NAN;
	static const float mult[] PROGMEM = { 100, 10, 1, 0.1, 0.01, 0.001 };
	str += start;
	bool neg = false;
     b00:	71 2c       	mov	r7, r1
     b02:	fe 01       	movw	r30, r28
	if (str[0] == '-') { neg = true; str++; } //Get rid of signs
	else { if (str[0] == '+') str++; };
	uint8_t p, i;
	for (p = 0; p < len; p++) if (str[p] == '.') break; //Find decimal point (if present)
     b04:	b1 2c       	mov	r11, r1
     b06:	ba 14       	cp	r11, r10
     b08:	29 f0       	breq	.+10     	; 0xb14 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x4c>
     b0a:	81 91       	ld	r24, Z+
     b0c:	8e 32       	cpi	r24, 0x2E	; 46
     b0e:	11 f0       	breq	.+4      	; 0xb14 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x4c>
     b10:	b3 94       	inc	r11
     b12:	f9 cf       	rjmp	.-14     	; 0xb06 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x3e>
	for (; p > 3; p--) str++; //Truncate string front
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	8b 15       	cp	r24, r11
     b18:	18 f4       	brcc	.+6      	; 0xb20 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x58>
     b1a:	21 96       	adiw	r28, 0x01	; 1
     b1c:	ba 94       	dec	r11
     b1e:	fa cf       	rjmp	.-12     	; 0xb14 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x4c>
	if (len - p > 4) len = p + 4; //Truncate string end
     b20:	8b 2c       	mov	r8, r11
     b22:	91 2c       	mov	r9, r1
     b24:	8a 2d       	mov	r24, r10
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	88 19       	sub	r24, r8
     b2a:	99 09       	sbc	r25, r9
     b2c:	05 97       	sbiw	r24, 0x05	; 5
     b2e:	1c f0       	brlt	.+6      	; 0xb36 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x6e>
     b30:	34 e0       	ldi	r19, 0x04	; 4
     b32:	a3 2e       	mov	r10, r19
     b34:	ab 0c       	add	r10, r11
	str += start;
	bool neg = false;
	if (str[0] == '-') { neg = true; str++; } //Get rid of signs
	else { if (str[0] == '+') str++; };
	uint8_t p, i;
	for (p = 0; p < len; p++) if (str[p] == '.') break; //Find decimal point (if present)
     b36:	00 e0       	ldi	r16, 0x00	; 0
     b38:	10 e0       	ldi	r17, 0x00	; 0
	for (; p > 3; p--) str++; //Truncate string front
	if (len - p > 4) len = p + 4; //Truncate string end
	float b = 0;
     b3a:	c1 2c       	mov	r12, r1
     b3c:	d1 2c       	mov	r13, r1
     b3e:	76 01       	movw	r14, r12
	for (i = 0; i < len; i++) { //Iterate through each digit and build the number using multipliers
     b40:	0a 15       	cp	r16, r10
     b42:	60 f5       	brcc	.+88     	; 0xb9c <_Z11decodeFloatPKchh.part.0.lto_priv.22+0xd4>
		if (i == p) continue; //Skip point
     b44:	b0 16       	cp	r11, r16
     b46:	31 f1       	breq	.+76     	; 0xb94 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0xcc>
		b += (str[i] - '0') * pgm_read_float(&(mult[((i < p) ? 3 : 2) + i - p]));
     b48:	68 81       	ld	r22, Y
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	60 53       	subi	r22, 0x30	; 48
     b4e:	71 09       	sbc	r23, r1
     b50:	07 2e       	mov	r0, r23
     b52:	00 0c       	add	r0, r0
     b54:	88 0b       	sbc	r24, r24
     b56:	99 0b       	sbc	r25, r25
     b58:	2b d8       	rcall	.-4010   	; 0xfffffbb0 <__eeprom_end+0xff7ef9d8>
     b5a:	0b 15       	cp	r16, r11
     b5c:	18 f0       	brcs	.+6      	; 0xb64 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x9c>
     b5e:	e2 e0       	ldi	r30, 0x02	; 2
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0xa0>
     b64:	e3 e0       	ldi	r30, 0x03	; 3
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	e0 0f       	add	r30, r16
     b6a:	f1 1f       	adc	r31, r17
     b6c:	e8 19       	sub	r30, r8
     b6e:	f9 09       	sbc	r31, r9
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	ee 5a       	subi	r30, 0xAE	; 174
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	25 91       	lpm	r18, Z+
     b7e:	35 91       	lpm	r19, Z+
     b80:	45 91       	lpm	r20, Z+
     b82:	54 91       	lpm	r21, Z
     b84:	a1 d8       	rcall	.-3774   	; 0xfffffcc8 <__eeprom_end+0xff7efaf0>
     b86:	9b 01       	movw	r18, r22
     b88:	ac 01       	movw	r20, r24
     b8a:	c7 01       	movw	r24, r14
     b8c:	b6 01       	movw	r22, r12
     b8e:	79 d7       	rcall	.+3826   	; 0x1a82 <__addsf3>
     b90:	6b 01       	movw	r12, r22
     b92:	7c 01       	movw	r14, r24
     b94:	0f 5f       	subi	r16, 0xFF	; 255
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
     b98:	21 96       	adiw	r28, 0x01	; 1
     b9a:	d2 cf       	rjmp	.-92     	; 0xb40 <_Z11decodeFloatPKchh.part.0.lto_priv.22+0x78>
	}
	if (neg) b *= -1;
     b9c:	c7 01       	movw	r24, r14
     b9e:	b6 01       	movw	r22, r12
     ba0:	71 10       	cpse	r7, r1
     ba2:	90 58       	subi	r25, 0x80	; 128
	return b;
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	9f 90       	pop	r9
     bba:	8f 90       	pop	r8
     bbc:	7f 90       	pop	r7
     bbe:	6f 90       	pop	r6
     bc0:	08 95       	ret

00000bc2 <_Z9decodeIntPKchh>:
{
	return decodeFloat(str, 0, strnlen(str, max_len));
}
float decodeFloat(const char* str, uint8_t start, uint8_t len) //Decode float from string (format: -XXX.XXX), smth like -X or -.X work too
{
	if (len == 0) return NAN;
     bc2:	44 23       	and	r20, r20
     bc4:	11 f0       	breq	.+4      	; 0xbca <_Z9decodeIntPKchh+0x8>
     bc6:	80 df       	rcall	.-256    	; 0xac8 <_Z11decodeFloatPKchh.part.0.lto_priv.22>
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <_Z9decodeIntPKchh+0x10>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 ec       	ldi	r24, 0xC0	; 192
     bd0:	9f e7       	ldi	r25, 0x7F	; 127
{
	return static_cast<int8_t>(decodeFloat(str));
}
int8_t decodeInt(const char* str, uint8_t start, uint8_t len)
{
	return static_cast<int8_t>(decodeFloat(str, start, len));
     bd2:	bb d7       	rcall	.+3958   	; 0x1b4a <__fixsfsi>
     bd4:	86 2f       	mov	r24, r22
} // DECODE NUMBER
     bd6:	08 95       	ret

00000bd8 <_Z14readScratchPadPKhPh>:
	OWreset();
	OWskip();
	OWwrite(STARTCONVO);
}

void readScratchPad(const uint8_t* deviceAddress, uint8_t* scratchPad) {
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	ec 01       	movw	r28, r24
     bea:	8b 01       	movw	r16, r22
	OWreset();
     bec:	09 df       	rcall	.-494    	; 0xa00 <_Z7OWresetv>
	OWselect(deviceAddress);
     bee:	ce 01       	movw	r24, r28
     bf0:	61 dd       	rcall	.-1342   	; 0x6b4 <_Z8OWselectPKh>
	OWwrite(READSCRATCH);
     bf2:	8e eb       	ldi	r24, 0xBE	; 190
     bf4:	61 da       	rcall	.-2878   	; 0xb8 <_Z7OWwritehh.constprop.21>
     bf6:	e8 01       	movw	r28, r16
     bf8:	68 01       	movw	r12, r16
     bfa:	89 e0       	ldi	r24, 0x09	; 9
     bfc:	c8 0e       	add	r12, r24
     bfe:	d1 1c       	adc	r13, r1
	OWreset();
	OWskip();
	OWwrite(STARTCONVO);
}

void readScratchPad(const uint8_t* deviceAddress, uint8_t* scratchPad) {
     c00:	88 e0       	ldi	r24, 0x08	; 8
     c02:	e8 2e       	mov	r14, r24
     c04:	f1 2c       	mov	r15, r1
//
// Read a byte
//
uint8_t OWread() {
	uint8_t bitMask;
	uint8_t r = 0;
     c06:	10 e0       	ldi	r17, 0x00	; 0

	for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     c08:	01 e0       	ldi	r16, 0x01	; 1
		if ( OWread_bit()) r |= bitMask;
     c0a:	79 de       	rcall	.-782    	; 0x8fe <_Z10OWread_bitv>
     c0c:	81 11       	cpse	r24, r1
     c0e:	10 2b       	or	r17, r16
//
uint8_t OWread() {
	uint8_t bitMask;
	uint8_t r = 0;

	for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     c10:	00 0f       	add	r16, r16
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	e8 1a       	sub	r14, r24
     c16:	f1 08       	sbc	r15, r1
     c18:	c1 f7       	brne	.-16     	; 0xc0a <_Z14readScratchPadPKhPh+0x32>
	OWreset();
	OWselect(deviceAddress);
	OWwrite(READSCRATCH);
	for (uint8_t i = 0; i < 9; i++) {
		scratchPad[i] = OWread();
     c1a:	19 93       	st	Y+, r17

void readScratchPad(const uint8_t* deviceAddress, uint8_t* scratchPad) {
	OWreset();
	OWselect(deviceAddress);
	OWwrite(READSCRATCH);
	for (uint8_t i = 0; i < 9; i++) {
     c1c:	cc 16       	cp	r12, r28
     c1e:	dd 06       	cpc	r13, r29
     c20:	79 f7       	brne	.-34     	; 0xc00 <_Z14readScratchPadPKhPh+0x28>
		scratchPad[i] = OWread();
	}
	OWreset();
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
	OWselect(deviceAddress);
	OWwrite(READSCRATCH);
	for (uint8_t i = 0; i < 9; i++) {
		scratchPad[i] = OWread();
	}
	OWreset();
     c32:	e6 ce       	rjmp	.-564    	; 0xa00 <_Z7OWresetv>

00000c34 <_Z19requestTemperaturesv>:
	writeScratchPad(deviceAddress, scratchPad);
}

// sends command for all devices on the bus to perform a temperature conversion
void requestTemperatures() {
	OWreset();
     c34:	e5 de       	rcall	.-566    	; 0xa00 <_Z7OWresetv>
//
// Do a ROM skip
//
void OWskip()
{
	OWwrite(0xCC);           // Skip ROM
     c36:	8c ec       	ldi	r24, 0xCC	; 204
     c38:	3f da       	rcall	.-2946   	; 0xb8 <_Z7OWwritehh.constprop.21>
	OWskip();
	OWwrite(STARTCONVO);
     c3a:	84 e4       	ldi	r24, 0x44	; 68
     c3c:	3d ca       	rjmp	.-2950   	; 0xb8 <_Z7OWwritehh.constprop.21>

00000c3e <main>:
		loadEEPROM();
	}
}

int main(void)
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	a9 97       	sbiw	r28, 0x29	; 41
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
	static_assert(!((sizeof(inputs_t) * CHAR_BIT) < arraySize(input_pins) || (sizeof(outputs_t) * CHAR_BIT) < arraySize(output_pins)),
		"Too many inputs/outputs for current types of the variables.");
	//Setup watchdog
	wdt_reset();
     c52:	a8 95       	wdr
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     c54:	9e e0       	ldi	r25, 0x0E	; 14
     c56:	88 e1       	ldi	r24, 0x18	; 24
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	a8 95       	wdr
     c5e:	81 bd       	out	0x21, r24	; 33
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_1S);
	//Setup timer
	// Clock source: System Clock
	// Clock value: 15,625 kHz
	TCCR0 = 0x05;
     c64:	85 e0       	ldi	r24, 0x05	; 5
     c66:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
     c68:	12 be       	out	0x32, r1	; 50
	TIMSK = 0x01;	//Overflow interrupt
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	89 bf       	out	0x39, r24	; 57
     c6e:	01 e8       	ldi	r16, 0x81	; 129
     c70:	e0 2e       	mov	r14, r16
     c72:	00 e0       	ldi	r16, 0x00	; 0
     c74:	f0 2e       	mov	r15, r16
     c76:	8a e7       	ldi	r24, 0x7A	; 122
     c78:	c8 2e       	mov	r12, r24
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	d8 2e       	mov	r13, r24
	__builtin_unreachable();
}

void loadEEPROM()
{
	uint8_t ifr = eeprom_read_byte(&is_first_run);	//Read first run indicator byte
     c7e:	86 e0       	ldi	r24, 0x06	; 6
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	c9 d6       	rcall	.+3474   	; 0x1a16 <eeprom_read_byte>
	if (ifr == 1_ui8)	//If not first (or factory-reset) run actually read EEPROM
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	09 f0       	breq	.+2      	; 0xc8a <main+0x4c>
     c88:	49 c0       	rjmp	.+146    	; 0xd1c <main+0xde>
	{
		input_compare_buf = EEPROM_READ_INPUTS(input_normal);
     c8a:	81 e8       	ldi	r24, 0x81	; 129
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	c3 d6       	rcall	.+3462   	; 0x1a16 <eeprom_read_byte>
     c90:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <_ZL17input_compare_buf>
		override_comapre_buf = EEPROM_READ_OUTPUTS(manual_override);
     c94:	82 e8       	ldi	r24, 0x82	; 130
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	be d6       	rcall	.+3452   	; 0x1a16 <eeprom_read_byte>
     c9a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <_ZL20override_comapre_buf>
		actuate(EEPROM_READ_OUTPUTS(output_last));
     c9e:	81 e7       	ldi	r24, 0x71	; 113
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	b9 d6       	rcall	.+3442   	; 0x1a16 <eeprom_read_byte>
     ca4:	ae dc       	rcall	.-1700   	; 0x602 <_Z7actuateh>
		input_inv_buf = EEPROM_READ_INPUTS(inputs_inverted);
     ca6:	83 e8       	ldi	r24, 0x83	; 131
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	b5 d6       	rcall	.+3434   	; 0x1a16 <eeprom_read_byte>
     cac:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <_ZL13input_inv_buf>
		output_inv_buf = EEPROM_READ_OUTPUTS(outputs_inverted);
     cb0:	84 e8       	ldi	r24, 0x84	; 132
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	b0 d6       	rcall	.+3424   	; 0x1a16 <eeprom_read_byte>
     cb6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_ZL14output_inv_buf.lto_priv.27>
     cba:	1a e7       	ldi	r17, 0x7A	; 122
     cbc:	e1 2e       	mov	r14, r17
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	f1 2e       	mov	r15, r17
     cc2:	02 ef       	ldi	r16, 0xF2	; 242
     cc4:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t temp;
		for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
		{
			temp = eeprom_read_byte(&(auto_on_mapping[i]));
     cc6:	c7 01       	movw	r24, r14
     cc8:	a6 d6       	rcall	.+3404   	; 0x1a16 <eeprom_read_byte>
			mapping_compare_buf[i] = *reinterpret_cast<int8_t*>(&temp);
     cca:	d8 01       	movw	r26, r16
     ccc:	8d 93       	st	X+, r24
     cce:	8d 01       	movw	r16, r26
     cd0:	bf ef       	ldi	r27, 0xFF	; 255
     cd2:	eb 1a       	sub	r14, r27
     cd4:	fb 0a       	sbc	r15, r27
		override_comapre_buf = EEPROM_READ_OUTPUTS(manual_override);
		actuate(EEPROM_READ_OUTPUTS(output_last));
		input_inv_buf = EEPROM_READ_INPUTS(inputs_inverted);
		output_inv_buf = EEPROM_READ_OUTPUTS(outputs_inverted);
		uint8_t temp;
		for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
     cd6:	e0 e0       	ldi	r30, 0x00	; 0
     cd8:	09 3f       	cpi	r16, 0xF9	; 249
     cda:	1e 07       	cpc	r17, r30
     cdc:	a1 f7       	brne	.-24     	; 0xcc6 <main+0x88>
     cde:	b2 e7       	ldi	r27, 0x72	; 114
     ce0:	eb 2e       	mov	r14, r27
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	fb 2e       	mov	r15, r27
     ce6:	0a ee       	ldi	r16, 0xEA	; 234
     ce8:	10 e0       	ldi	r17, 0x00	; 0
			temp = eeprom_read_byte(&(auto_on_mapping[i]));
			mapping_compare_buf[i] = *reinterpret_cast<int8_t*>(&temp);
		}
		for (uint8_t i = 0; i < arraySize(temp_mapping_buf); ++i)
		{
			temp = eeprom_read_byte(&(temp_auto_mapping[i]));
     cea:	c7 01       	movw	r24, r14
     cec:	94 d6       	rcall	.+3368   	; 0x1a16 <eeprom_read_byte>
			temp_mapping_buf[i] = *reinterpret_cast<int8_t*>(&temp);
     cee:	d8 01       	movw	r26, r16
     cf0:	8d 93       	st	X+, r24
     cf2:	8d 01       	movw	r16, r26
     cf4:	bf ef       	ldi	r27, 0xFF	; 255
     cf6:	eb 1a       	sub	r14, r27
     cf8:	fb 0a       	sbc	r15, r27
		for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
		{
			temp = eeprom_read_byte(&(auto_on_mapping[i]));
			mapping_compare_buf[i] = *reinterpret_cast<int8_t*>(&temp);
		}
		for (uint8_t i = 0; i < arraySize(temp_mapping_buf); ++i)
     cfa:	e0 e0       	ldi	r30, 0x00	; 0
     cfc:	02 3f       	cpi	r16, 0xF2	; 242
     cfe:	1e 07       	cpc	r17, r30
     d00:	a1 f7       	brne	.-24     	; 0xcea <main+0xac>
		{
			temp = eeprom_read_byte(&(temp_auto_mapping[i]));
			temp_mapping_buf[i] = *reinterpret_cast<int8_t*>(&temp);
		}
		temp = eeprom_read_byte(&temp_high);
     d02:	80 e7       	ldi	r24, 0x70	; 112
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	87 d6       	rcall	.+3342   	; 0x1a16 <eeprom_read_byte>
		temp_high_buf = *reinterpret_cast<int8_t*>(&temp);
     d08:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <_ZL13temp_high_buf>
		temp = eeprom_read_byte(&pc_reset_mapping);
     d0c:	87 ed       	ldi	r24, 0xD7	; 215
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	82 d6       	rcall	.+3332   	; 0x1a16 <eeprom_read_byte>
		pc_reset_buf = *reinterpret_cast<int8_t*>(&temp);
     d12:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <_ZL12pc_reset_buf.lto_priv.25>
     d16:	07 e4       	ldi	r16, 0x47	; 71
     d18:	11 e0       	ldi	r17, 0x01	; 1
     d1a:	35 c0       	rjmp	.+106    	; 0xd86 <main+0x148>
	}
	else //If it is first run populate EEPROM with defaults
	{
		//Regular variables
		EEPROM_WRITE_INPUTS(input_normal, 0xFF);
     d1c:	6f ef       	ldi	r22, 0xFF	; 255
     d1e:	81 e8       	ldi	r24, 0x81	; 129
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	90 d6       	rcall	.+3360   	; 0x1a44 <eeprom_update_byte>
		EEPROM_WRITE_OUTPUTS(manual_override, 0x00);
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	82 e8       	ldi	r24, 0x82	; 130
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	8c d6       	rcall	.+3352   	; 0x1a44 <eeprom_update_byte>
		EEPROM_WRITE_OUTPUTS(output_last, 0x00);
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	81 e7       	ldi	r24, 0x71	; 113
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	88 d6       	rcall	.+3344   	; 0x1a44 <eeprom_update_byte>
		EEPROM_WRITE_INPUTS(inputs_inverted, 0x00);
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	83 e8       	ldi	r24, 0x83	; 131
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	84 d6       	rcall	.+3336   	; 0x1a44 <eeprom_update_byte>
		EEPROM_WRITE_OUTPUTS(outputs_inverted, 0x00);
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	84 e8       	ldi	r24, 0x84	; 132
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	80 d6       	rcall	.+3328   	; 0x1a44 <eeprom_update_byte>
     d44:	0a e7       	ldi	r16, 0x7A	; 122
     d46:	10 e0       	ldi	r17, 0x00	; 0
		//Those, which require reinterpret casts
		int8_t negative_one = -1;
		for (uint8_t i = 0; i < arraySize(auto_on_mapping); ++i) eeprom_update_byte(&(auto_on_mapping[i]), *reinterpret_cast<uint8_t*>(&negative_one));
     d48:	6f ef       	ldi	r22, 0xFF	; 255
     d4a:	c8 01       	movw	r24, r16
     d4c:	7b d6       	rcall	.+3318   	; 0x1a44 <eeprom_update_byte>
     d4e:	0f 5f       	subi	r16, 0xFF	; 255
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	e0 16       	cp	r14, r16
     d54:	f1 06       	cpc	r15, r17
     d56:	c1 f7       	brne	.-16     	; 0xd48 <main+0x10a>
     d58:	02 e7       	ldi	r16, 0x72	; 114
     d5a:	10 e0       	ldi	r17, 0x00	; 0
		for (uint8_t i = 0; i < arraySize(temp_auto_mapping); ++i) eeprom_update_byte(&(temp_auto_mapping[i]), *reinterpret_cast<uint8_t*>(&negative_one));
     d5c:	6f ef       	ldi	r22, 0xFF	; 255
     d5e:	c8 01       	movw	r24, r16
     d60:	71 d6       	rcall	.+3298   	; 0x1a44 <eeprom_update_byte>
     d62:	0f 5f       	subi	r16, 0xFF	; 255
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	c0 16       	cp	r12, r16
     d68:	d1 06       	cpc	r13, r17
     d6a:	c1 f7       	brne	.-16     	; 0xd5c <main+0x11e>
		eeprom_update_byte(&pc_reset_mapping, *reinterpret_cast<uint8_t*>(&negative_one));
     d6c:	6f ef       	ldi	r22, 0xFF	; 255
     d6e:	87 ed       	ldi	r24, 0xD7	; 215
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	68 d6       	rcall	.+3280   	; 0x1a44 <eeprom_update_byte>
		eeprom_update_byte(&temp_high, 0x28);
     d74:	68 e2       	ldi	r22, 0x28	; 40
     d76:	80 e7       	ldi	r24, 0x70	; 112
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	64 d6       	rcall	.+3272   	; 0x1a44 <eeprom_update_byte>
		//Set the flag and
		eeprom_write_byte(&is_first_run, 1_ui8);
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	86 e0       	ldi	r24, 0x06	; 6
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	71 d6       	rcall	.+3298   	; 0x1a66 <eeprom_write_byte>
     d84:	7c cf       	rjmp	.-264    	; 0xc7e <main+0x40>
     d86:	c8 01       	movw	r24, r16
     d88:	b0 dd       	rcall	.-1184   	; 0x8ea <_ZN5pin_t12SetDirectionEPKS_b.part.1.lto_priv.33>
     d8a:	0a 5f       	subi	r16, 0xFA	; 250
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
	TCCR0 = 0x05;
	TCNT0 = 0x00;
	TIMSK = 0x01;	//Overflow interrupt
	//Setup pins
	loadEEPROM();
	for (uint8_t i = 0; i < arraySize(output_pins); ++i) pin_t::SetDirection(&(output_pins[i]), pin_t::Output);
     d8e:	f1 e0       	ldi	r31, 0x01	; 1
     d90:	05 36       	cpi	r16, 0x65	; 101
     d92:	1f 07       	cpc	r17, r31
     d94:	c1 f7       	brne	.-16     	; 0xd86 <main+0x148>
	//Setup serial interface
	sei();
     d96:	78 94       	sei
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     d98:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <_ZL11UART_TxHead.lto_priv.34>
    UART_TxTail = 0;
     d9c:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <_ZL11UART_TxTail.lto_priv.35>
    UART_RxHead = 0;
     da0:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <_ZL11UART_RxHead.lto_priv.37>
    UART_RxTail = 0;
     da4:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__data_end>
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
     da8:	10 bc       	out	0x20, r1	; 32
    #endif
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
     daa:	87 e6       	ldi	r24, 0x67	; 103
     dac:	89 b9       	out	0x09, r24	; 9

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
     dae:	88 e9       	ldi	r24, 0x98	; 152
     db0:	8a b9       	out	0x0a, r24	; 10

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
     db2:	86 e8       	ldi	r24, 0x86	; 134
     db4:	80 bd       	out	0x20, r24	; 32
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
	//Discover 1-wire devices
	wdt_reset();
     db6:	a8 95       	wdr
static uint8_t LastFamilyDiscrepancy;
static bool LastDeviceFlag;

void OWbegin(pin_t* pin)
{
	OWpin = pin;
     db8:	81 e4       	ldi	r24, 0x41	; 65
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <_ZL5OWpin.lto_priv.32+0x1>
     dc0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <_ZL5OWpin.lto_priv.32>
	}
	void pin_t::SetDirection(const pin_t* pin, bool dir)
	{
		dir ? ( *(pin->ddrReg) |= pin->bitMask ) : ( *(pin->ddrReg) &= static_cast<uint8_t>(~(pin->bitMask)) );
     dc4:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <_ZL6ow_pin.lto_priv.24>
     dc8:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <_ZL6ow_pin.lto_priv.24+0x1>
     dcc:	90 81       	ld	r25, Z
     dce:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_ZL6ow_pin.lto_priv.24+0x2>
     dd2:	80 95       	com	r24
     dd4:	89 23       	and	r24, r25
     dd6:	80 83       	st	Z, r24
// You do not need to do it for the first search, though you could.
//
void OWreset_search()
{
	// OWreset the search state
	LastDiscrepancy = 0;
     dd8:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <_ZL15LastDiscrepancy>
	LastDeviceFlag = false;
     ddc:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <_ZL14LastDeviceFlag>
     de0:	ac ed       	ldi	r26, 0xDC	; 220
     de2:	aa 2e       	mov	r10, r26
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	ba 2e       	mov	r11, r26
     de8:	f5 01       	movw	r30, r10
	LastFamilyDiscrepancy = 0;
	for(int i = 7; ; i--) {
		ROM_NO[i] = 0;
     dea:	12 92       	st	-Z, r1
		if ( i == 0) break;
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	e4 3d       	cpi	r30, 0xD4	; 212
     df0:	f2 07       	cpc	r31, r18
     df2:	d9 f7       	brne	.-10     	; 0xdea <main+0x1ac>
     df4:	91 2c       	mov	r9, r1
     df6:	ff ef       	ldi	r31, 0xFF	; 255
     df8:	cf 2e       	mov	r12, r31
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	df 2e       	mov	r13, r31
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1)
				ROM_NO[rom_byte_number] |= rom_byte_mask;
     dfe:	77 24       	eor	r7, r7
     e00:	73 94       	inc	r7
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = false;

	// if the last call was not the last one
	if (!LastDeviceFlag) {
     e02:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <_ZL14LastDeviceFlag>
     e06:	81 11       	cpse	r24, r1
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <main+0x1d2>
		// 1-Wire OWreset
		if (!OWreset()) {
     e0a:	fa dd       	rcall	.-1036   	; 0xa00 <_Z7OWresetv>
     e0c:	81 11       	cpse	r24, r1
     e0e:	0a c0       	rjmp	.+20     	; 0xe24 <main+0x1e6>
			// OWreset the search
			LastDiscrepancy = 0;
     e10:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <_ZL15LastDiscrepancy>
			LastDeviceFlag = false;
     e14:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <_ZL14LastDeviceFlag>
	OWbegin(&ow_pin);
	ow_count = searchForDevices(ow_devices);
     e18:	90 92 fe 00 	sts	0x00FE, r9	; 0x8000fe <_ZL8ow_count>
	for (uint8_t i = 0; i < ow_count; ++i) setResolution(ow_devices + i * 8_ui8);
     e1c:	f1 2c       	mov	r15, r1
}

void setResolution(const uint8_t* deviceAddress) {
	ScratchPad scratchPad;
	readScratchPad(deviceAddress, scratchPad);
	scratchPad[CONFIGURATION] = TEMP_9_BIT;
     e1e:	ef e1       	ldi	r30, 0x1F	; 31
     e20:	ee 2e       	mov	r14, r30
     e22:	48 c0       	rjmp	.+144    	; 0xeb4 <main+0x276>
			return false;
		}

		// issue the search command
		if (search_mode == true) {
			OWwrite(0xF0);   // NORMAL SEARCH
     e24:	80 ef       	ldi	r24, 0xF0	; 240
     e26:	48 d9       	rcall	.-3440   	; 0xb8 <_Z7OWwritehh.constprop.21>
     e28:	11 e0       	ldi	r17, 0x01	; 1
     e2a:	e1 2c       	mov	r14, r1
     e2c:	81 2c       	mov	r8, r1
     e2e:	01 e0       	ldi	r16, 0x01	; 1

		// loop to do the search
		do
		{
			// OWread a bit and its complement
			id_bit = OWread_bit();
     e30:	66 dd       	rcall	.-1332   	; 0x8fe <_Z10OWread_bitv>
     e32:	f8 2e       	mov	r15, r24
			cmp_id_bit = OWread_bit();
     e34:	64 dd       	rcall	.-1336   	; 0x8fe <_Z10OWread_bitv>

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
     e36:	31 e0       	ldi	r19, 0x01	; 1
     e38:	f3 12       	cpse	r15, r19
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <main+0x204>
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	a9 f4       	brne	.+42     	; 0xe6a <main+0x22c>
     e40:	2f c0       	rjmp	.+94     	; 0xea0 <main+0x262>
     e42:	ee 2d       	mov	r30, r14
     e44:	f0 e0       	ldi	r31, 0x00	; 0
				break;
				} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
     e46:	f8 12       	cpse	r15, r24
     e48:	1a c0       	rjmp	.+52     	; 0xe7e <main+0x240>
					search_direction = id_bit;  // bit OWwrite value for search
					} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < LastDiscrepancy) {
     e4a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <_ZL15LastDiscrepancy>
     e4e:	08 17       	cp	r16, r24
     e50:	38 f4       	brcc	.+14     	; 0xe60 <main+0x222>
						search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     e52:	df 01       	movw	r26, r30
     e54:	ac 52       	subi	r26, 0x2C	; 44
     e56:	bf 4f       	sbci	r27, 0xFF	; 255
     e58:	8c 91       	ld	r24, X
     e5a:	81 23       	and	r24, r17
     e5c:	31 f4       	brne	.+12     	; 0xe6a <main+0x22c>
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <main+0x226>
						} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == LastDiscrepancy);
     e60:	80 17       	cp	r24, r16
     e62:	19 f0       	breq	.+6      	; 0xe6a <main+0x22c>
     e64:	f1 2c       	mov	r15, r1
					}
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
     e66:	80 2e       	mov	r8, r16
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <main+0x240>
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1)
				ROM_NO[rom_byte_number] |= rom_byte_mask;
     e6a:	ee 2d       	mov	r30, r14
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	ec 52       	subi	r30, 0x2C	; 44
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	81 2b       	or	r24, r17
     e76:	80 83       	st	Z, r24
     e78:	ff 24       	eor	r15, r15
     e7a:	f3 94       	inc	r15
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <main+0x24e>
				else
				ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     e7e:	ec 52       	subi	r30, 0x2C	; 44
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	90 81       	ld	r25, Z
     e84:	81 2f       	mov	r24, r17
     e86:	80 95       	com	r24
     e88:	89 23       	and	r24, r25
     e8a:	80 83       	st	Z, r24

				// serial number search direction OWwrite bit
				OWwrite_bit(search_direction);
     e8c:	8f 2d       	mov	r24, r15
     e8e:	6e dd       	rcall	.-1316   	; 0x96c <_Z11OWwrite_bith>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
     e90:	0f 5f       	subi	r16, 0xFF	; 255
				rom_byte_mask <<= 1;
     e92:	11 0f       	add	r17, r17

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and OWreset mask
				if (rom_byte_mask == 0) {
     e94:	11 f4       	brne	.+4      	; 0xe9a <main+0x25c>
					rom_byte_number++;
     e96:	e3 94       	inc	r14
					rom_byte_mask = 1;
     e98:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}
		while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
     e9a:	87 e0       	ldi	r24, 0x07	; 7
     e9c:	8e 15       	cp	r24, r14
     e9e:	40 f6       	brcc	.-112    	; 0xe30 <main+0x1f2>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
     ea0:	01 34       	cpi	r16, 0x41	; 65
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <main+0x268>
     ea4:	b5 cf       	rjmp	.-150    	; 0xe10 <main+0x1d2>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			LastDiscrepancy = last_zero;
     ea6:	80 92 dd 00 	sts	0x00DD, r8	; 0x8000dd <_ZL15LastDiscrepancy>

			// check for last device
			if (LastDiscrepancy == 0) {
     eaa:	81 10       	cpse	r8, r1
     eac:	6e c3       	rjmp	.+1756   	; 0x158a <main+0x94c>
				LastDeviceFlag = true;
     eae:	70 92 dc 00 	sts	0x00DC, r7	; 0x8000dc <_ZL14LastDeviceFlag>
     eb2:	6b c3       	rjmp	.+1750   	; 0x158a <main+0x94c>
     eb4:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <_ZL8ow_count>
     eb8:	f8 16       	cp	r15, r24
     eba:	40 f5       	brcc	.+80     	; 0xf0c <main+0x2ce>
     ebc:	98 e0       	ldi	r25, 0x08	; 8
     ebe:	f9 9e       	mul	r15, r25
     ec0:	80 01       	movw	r16, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	01 50       	subi	r16, 0x01	; 1
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
	OWreset();
}

void setResolution(const uint8_t* deviceAddress) {
	ScratchPad scratchPad;
	readScratchPad(deviceAddress, scratchPad);
     ec8:	be 01       	movw	r22, r28
     eca:	6f 5f       	subi	r22, 0xFF	; 255
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	c8 01       	movw	r24, r16
     ed0:	83 de       	rcall	.-762    	; 0xbd8 <_Z14readScratchPadPKhPh>
	scratchPad[CONFIGURATION] = TEMP_9_BIT;
     ed2:	ed 82       	std	Y+5, r14	; 0x05
	return cnt;
}

void writeScratchPad(const uint8_t* deviceAddress,
		const uint8_t* scratchPad) {
	OWreset();
     ed4:	95 dd       	rcall	.-1238   	; 0xa00 <_Z7OWresetv>
	OWselect(deviceAddress);
     ed6:	c8 01       	movw	r24, r16
     ed8:	ed db       	rcall	.-2086   	; 0x6b4 <_Z8OWselectPKh>
	OWwrite(WRITESCRATCH);
     eda:	8e e4       	ldi	r24, 0x4E	; 78
     edc:	ed d8       	rcall	.-3622   	; 0xb8 <_Z7OWwritehh.constprop.21>
	OWwrite(scratchPad[HIGH_ALARM_TEMP]); // high alarm temp
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	eb d8       	rcall	.-3626   	; 0xb8 <_Z7OWwritehh.constprop.21>
	OWwrite(scratchPad[LOW_ALARM_TEMP]); // low alarm temp
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	e9 d8       	rcall	.-3630   	; 0xb8 <_Z7OWwritehh.constprop.21>
	OWwrite(scratchPad[CONFIGURATION]);
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	e7 d8       	rcall	.-3634   	; 0xb8 <_Z7OWwritehh.constprop.21>
	OWreset();
     eea:	8a dd       	rcall	.-1260   	; 0xa00 <_Z7OWresetv>
	OWselect(deviceAddress);
     eec:	c8 01       	movw	r24, r16
     eee:	e2 db       	rcall	.-2108   	; 0x6b4 <_Z8OWselectPKh>
	OWwrite(COPYSCRATCH);
     ef0:	88 e4       	ldi	r24, 0x48	; 72
     ef2:	e2 d8       	rcall	.-3644   	; 0xb8 <_Z7OWwritehh.constprop.21>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ef4:	af ef       	ldi	r26, 0xFF	; 255
     ef6:	b9 ef       	ldi	r27, 0xF9	; 249
     ef8:	e0 e0       	ldi	r30, 0x00	; 0
     efa:	a1 50       	subi	r26, 0x01	; 1
     efc:	b0 40       	sbci	r27, 0x00	; 0
     efe:	e0 40       	sbci	r30, 0x00	; 0
     f00:	e1 f7       	brne	.-8      	; 0xefa <main+0x2bc>
     f02:	00 c0       	rjmp	.+0      	; 0xf04 <main+0x2c6>
     f04:	00 00       	nop
	_delay_ms(20); // <--- added 20ms delay to allow 10ms long EEPROM write operation (as specified by datasheet)
	OWreset();
     f06:	7c dd       	rcall	.-1288   	; 0xa00 <_Z7OWresetv>
     f08:	f3 94       	inc	r15
     f0a:	d4 cf       	rjmp	.-88     	; 0xeb4 <main+0x276>
	//Request temperature conversions
	wdt_reset();
     f0c:	a8 95       	wdr
	requestTemperatures();
     f0e:	92 de       	rcall	.-732    	; 0xc34 <_Z19requestTemperaturesv>
     f10:	ff ef       	ldi	r31, 0xFF	; 255
     f12:	21 ee       	ldi	r18, 0xE1	; 225
     f14:	34 e0       	ldi	r19, 0x04	; 4
     f16:	f1 50       	subi	r31, 0x01	; 1
     f18:	20 40       	sbci	r18, 0x00	; 0
     f1a:	30 40       	sbci	r19, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <main+0x2d8>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <main+0x2e2>
     f20:	00 00       	nop
	_delay_ms(100);
	//Ready
	wdt_reset();
     f22:	a8 95       	wdr
	flushSerial();
     f24:	4f d9       	rcall	.-3426   	; 0x1c4 <_Z11flushSerialv>
			uart_puts_P("A:Resetting...\r\n");
			soft_reset();
			__builtin_unreachable();
			break;
		case 'P': //Show presence
			uart_puts("P:");
     f26:	86 e9       	ldi	r24, 0x96	; 150
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	06 dc       	rcall	.-2036   	; 0x738 <_Z9uart_putsPKc>
			//flushSerial(); -?
			uart_puts_E(dev_name, arraySize(dev_name));
     f2c:	61 e1       	ldi	r22, 0x11	; 17
     f2e:	85 ef       	ldi	r24, 0xF5	; 245
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0d dc       	rcall	.-2022   	; 0x74e <_Z11uart_puts_EPKhh>
			break;
		}
		default:
		return;
	}
	uart_puts(line_feed);
     f34:	83 e9       	ldi	r24, 0x93	; 147
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	ff db       	rcall	.-2050   	; 0x738 <_Z9uart_putsPKc>

void poll()
{
	uint8_t i;
	input_state_buf = 0;
	for (i = 0; i < arraySize(input_pins); ++i)	if (pin_t::Read(&(input_pins[i])) != ((input_inv_buf & BVI(i)) > 0)) input_state_buf |= BVI(i);
     f3a:	ee 24       	eor	r14, r14
     f3c:	e3 94       	inc	r14
     f3e:	f1 2c       	mov	r15, r1
	cmd('P');

	unsigned int c;
	while(true)
	{
		wdt_reset();
     f40:	a8 95       	wdr

void poll()
{
	uint8_t i;
	input_state_buf = 0;
	for (i = 0; i < arraySize(input_pins); ++i)	if (pin_t::Read(&(input_pins[i])) != ((input_inv_buf & BVI(i)) > 0)) input_state_buf |= BVI(i);
     f42:	40 91 fb 00 	lds	r20, 0x00FB	; 0x8000fb <_ZL13input_inv_buf>
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	e5 e6       	ldi	r30, 0x65	; 101
     f4a:	f1 e0       	ldi	r31, 0x01	; 1
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	80 e0       	ldi	r24, 0x00	; 0
	{
		val ? ( *(pin->ddrReg + 1U) |= pin->bitMask ) : ( *(pin->ddrReg + 1U) &= static_cast<uint8_t>(~(pin->bitMask)) );
	}
	bool pin_t::Read(const pin_t* pin)
	{
		return static_cast<uint8_t>(*(pin->ddrReg - 1U) & pin->bitMask) != 0_ui8;
     f52:	a0 81       	ld	r26, Z
     f54:	b1 81       	ldd	r27, Z+1	; 0x01
     f56:	11 97       	sbiw	r26, 0x01	; 1
     f58:	ac 91       	ld	r26, X
     f5a:	b7 01       	movw	r22, r14
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <main+0x326>
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <main+0x322>
     f68:	8a 01       	movw	r16, r20
     f6a:	06 23       	and	r16, r22
     f6c:	17 23       	and	r17, r23
     f6e:	b1 e0       	ldi	r27, 0x01	; 1
     f70:	10 16       	cp	r1, r16
     f72:	11 06       	cpc	r1, r17
     f74:	0c f0       	brlt	.+2      	; 0xf78 <main+0x33a>
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	92 81       	ldd	r25, Z+2	; 0x02
     f7a:	9a 23       	and	r25, r26
     f7c:	a1 e0       	ldi	r26, 0x01	; 1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <main+0x344>
     f80:	a0 e0       	ldi	r26, 0x00	; 0
     f82:	ba 13       	cpse	r27, r26
     f84:	86 2b       	or	r24, r22
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	36 96       	adiw	r30, 0x06	; 6
     f8c:	27 30       	cpi	r18, 0x07	; 7
     f8e:	31 05       	cpc	r19, r1
     f90:	01 f7       	brne	.-64     	; 0xf52 <main+0x314>
     f92:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <_ZL15input_state_buf>
	inputs_t res = input_state_buf ^ input_compare_buf;
     f96:	50 90 f9 00 	lds	r5, 0x00F9	; 0x8000f9 <_ZL17input_compare_buf>
     f9a:	58 26       	eor	r5, r24
	inputs_t temp = res ^ last_input_diff;
     f9c:	60 90 de 00 	lds	r6, 0x00DE	; 0x8000de <_ZL15last_input_diff>
     fa0:	65 24       	eor	r6, r5
     fa2:	62 ef       	ldi	r22, 0xF2	; 242
     fa4:	a6 2e       	mov	r10, r22
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	b6 2e       	mov	r11, r22
     faa:	00 e0       	ldi	r16, 0x00	; 0
     fac:	10 e0       	ldi	r17, 0x00	; 0
	for (i = 0; i < arraySize(input_pins); ++i) if (temp & BVI(i)) reaction(i, res & BVI(i));
     fae:	71 2c       	mov	r7, r1
     fb0:	85 2c       	mov	r8, r5
     fb2:	91 2c       	mov	r9, r1
     fb4:	40 2e       	mov	r4, r16
     fb6:	18 01       	movw	r2, r16
     fb8:	67 01       	movw	r12, r14
     fba:	00 2e       	mov	r0, r16
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <main+0x384>
     fbe:	cc 0c       	add	r12, r12
     fc0:	dd 1c       	adc	r13, r13
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <main+0x380>
     fc6:	c3 01       	movw	r24, r6
     fc8:	8c 21       	and	r24, r12
     fca:	9d 21       	and	r25, r13
     fcc:	89 2b       	or	r24, r25
     fce:	61 f1       	breq	.+88     	; 0x1028 <main+0x3ea>
     fd0:	c8 20       	and	r12, r8
     fd2:	d9 20       	and	r13, r9

void reaction(uint8_t pin_index, bool active)
{
	//Send alarm message to PC
	char buf[4];
	uart_puts(active ? "A:" : "S:");
     fd4:	c1 14       	cp	r12, r1
     fd6:	d1 04       	cpc	r13, r1
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <main+0x3a2>
     fda:	8b e9       	ldi	r24, 0x9B	; 155
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <main+0x3a6>
     fe0:	80 ea       	ldi	r24, 0xA0	; 160
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a9 db       	rcall	.-2222   	; 0x738 <_Z9uart_putsPKc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     fe6:	4a e0       	ldi	r20, 0x0A	; 10
     fe8:	be 01       	movw	r22, r28
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	c1 01       	movw	r24, r2
     ff0:	cf d4       	rcall	.+2462   	; 0x1990 <__itoa_ncheck>
	uart_puts(itoa(pin_index, buf, 10));
     ff2:	a2 db       	rcall	.-2236   	; 0x738 <_Z9uart_putsPKc>
	uart_puts(line_feed);
     ff4:	83 e9       	ldi	r24, 0x93	; 147
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9f db       	rcall	.-2242   	; 0x738 <_Z9uart_putsPKc>
	//Binded outputs
	if (!check_index_helper(mapping_compare_buf[pin_index], arraySize(output_pins), false))
     ffa:	d5 01       	movw	r26, r10
     ffc:	8c 91       	ld	r24, X
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
     ffe:	85 30       	cpi	r24, 0x05	; 5
    1000:	98 f4       	brcc	.+38     	; 0x1028 <main+0x3ea>
	uart_puts(itoa(pin_index, buf, 10));
	uart_puts(line_feed);
	//Binded outputs
	if (!check_index_helper(mapping_compare_buf[pin_index], arraySize(output_pins), false))
	{
		if (active || !(override_comapre_buf & BVO(mapping_compare_buf[pin_index])))
    1002:	c1 14       	cp	r12, r1
    1004:	d1 04       	cpc	r13, r1
    1006:	09 f0       	breq	.+2      	; 0x100a <main+0x3cc>
    1008:	d2 c2       	rjmp	.+1444   	; 0x15ae <main+0x970>
    100a:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <_ZL20override_comapre_buf>
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	a7 01       	movw	r20, r14
    1012:	08 2e       	mov	r0, r24
    1014:	02 c0       	rjmp	.+4      	; 0x101a <main+0x3dc>
    1016:	44 0f       	add	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <main+0x3d8>
    101e:	24 23       	and	r18, r20
    1020:	35 23       	and	r19, r21
    1022:	23 2b       	or	r18, r19
    1024:	09 f4       	brne	.+2      	; 0x1028 <main+0x3ea>
    1026:	c3 c2       	rjmp	.+1414   	; 0x15ae <main+0x970>
    1028:	0f 5f       	subi	r16, 0xFF	; 255
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	bf ef       	ldi	r27, 0xFF	; 255
    102e:	ab 1a       	sub	r10, r27
    1030:	bb 0a       	sbc	r11, r27
	uint8_t i;
	input_state_buf = 0;
	for (i = 0; i < arraySize(input_pins); ++i)	if (pin_t::Read(&(input_pins[i])) != ((input_inv_buf & BVI(i)) > 0)) input_state_buf |= BVI(i);
	inputs_t res = input_state_buf ^ input_compare_buf;
	inputs_t temp = res ^ last_input_diff;
	for (i = 0; i < arraySize(input_pins); ++i) if (temp & BVI(i)) reaction(i, res & BVI(i));
    1032:	07 30       	cpi	r16, 0x07	; 7
    1034:	11 05       	cpc	r17, r1
    1036:	09 f0       	breq	.+2      	; 0x103a <main+0x3fc>
    1038:	bd cf       	rjmp	.-134    	; 0xfb4 <main+0x376>
	last_input_diff = res;
    103a:	50 92 de 00 	sts	0x00DE, r5	; 0x8000de <_ZL15last_input_diff>
	unsigned int c;
	while(true)
	{
		wdt_reset();
		poll();
		wdt_reset();
    103e:	a8 95       	wdr
    1040:	a1 2c       	mov	r10, r1
    1042:	50 e3       	ldi	r21, 0x30	; 48
    1044:	b5 2e       	mov	r11, r21
    1046:	40 ed       	ldi	r20, 0xD0	; 208
    1048:	d4 2e       	mov	r13, r20
    104a:	db 0c       	add	r13, r11
}

void processOWDevices()
{
	char buf[16];
	for (uint8_t i = 0; i < ow_count; ++i)
    104c:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <_ZL8ow_count>
    1050:	d8 16       	cp	r13, r24
    1052:	08 f0       	brcs	.+2      	; 0x1056 <main+0x418>
    1054:	d4 c0       	rjmp	.+424    	; 0x11fe <main+0x5c0>
	{
		uint8_t ind = i * 8_ui8;
		if (ow_devices[ind] != 0x28) continue;	//Not a DS18B20
    1056:	8a 2d       	mov	r24, r10
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	81 50       	subi	r24, 0x01	; 1
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	fc 01       	movw	r30, r24
    1060:	20 81       	ld	r18, Z
    1062:	28 32       	cpi	r18, 0x28	; 40
    1064:	09 f0       	breq	.+2      	; 0x1068 <main+0x42a>
    1066:	c7 c0       	rjmp	.+398    	; 0x11f6 <main+0x5b8>
	OWreset();
}

float getTemp(const uint8_t* deviceAddress) {
	ScratchPad scratchPad;
	readScratchPad(deviceAddress, scratchPad);
    1068:	be 01       	movw	r22, r28
    106a:	6f 5d       	subi	r22, 0xDF	; 223
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	b4 dd       	rcall	.-1176   	; 0xbd8 <_Z14readScratchPadPKhPh>
    1070:	9e 01       	movw	r18, r28
    1072:	2f 5d       	subi	r18, 0xDF	; 223
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	99 e0       	ldi	r25, 0x09	; 9

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OWcrc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;
    1078:	e0 e0       	ldi	r30, 0x00	; 0
    107a:	91 50       	subi	r25, 0x01	; 1

	while (len--) {
    107c:	99 f0       	breq	.+38     	; 0x10a4 <main+0x466>
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
    107e:	d9 01       	movw	r26, r18
    1080:	8d 91       	ld	r24, X+
    1082:	9d 01       	movw	r18, r26
    1084:	e8 27       	eor	r30, r24
		crc = *(dscrc2x16_table + (crc & 0x0f)) ^ *(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
    1086:	ae 2f       	mov	r26, r30
    1088:	af 70       	andi	r26, 0x0F	; 15
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	a0 59       	subi	r26, 0x90	; 144
    108e:	bf 4f       	sbci	r27, 0xFF	; 255
    1090:	4c 91       	ld	r20, X
    1092:	e2 95       	swap	r30
    1094:	ef 70       	andi	r30, 0x0F	; 15
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	e0 58       	subi	r30, 0x80	; 128
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	e4 2f       	mov	r30, r20
    10a0:	e8 27       	eor	r30, r24
    10a2:	eb cf       	rjmp	.-42     	; 0x107a <main+0x43c>
	if (OWcrc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC])
    10a4:	89 a5       	ldd	r24, Y+41	; 0x29
    10a6:	8e 13       	cpse	r24, r30
    10a8:	19 c0       	rjmp	.+50     	; 0x10dc <main+0x49e>
	{
		int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11) | (((int16_t) scratchPad[TEMP_LSB]) << 3);
		return (float)fpTemperature * 0.0078125;
    10aa:	6a a1       	ldd	r22, Y+34	; 0x22
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	76 2f       	mov	r23, r22
    10b0:	66 27       	eor	r22, r22
    10b2:	77 0f       	add	r23, r23
    10b4:	77 0f       	add	r23, r23
    10b6:	77 0f       	add	r23, r23
    10b8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ba:	b8 e0       	ldi	r27, 0x08	; 8
    10bc:	8b 9f       	mul	r24, r27
    10be:	c0 01       	movw	r24, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	68 2b       	or	r22, r24
    10c4:	79 2b       	or	r23, r25
    10c6:	07 2e       	mov	r0, r23
    10c8:	00 0c       	add	r0, r0
    10ca:	88 0b       	sbc	r24, r24
    10cc:	99 0b       	sbc	r25, r25
    10ce:	70 d5       	rcall	.+2784   	; 0x1bb0 <__floatsisf>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	5c e3       	ldi	r21, 0x3C	; 60
    10d8:	f7 d5       	rcall	.+3054   	; 0x1cc8 <__mulsf3>
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <main+0x4a6>
	}
	return 200;
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	88 e4       	ldi	r24, 0x48	; 72
    10e2:	93 e4       	ldi	r25, 0x43	; 67
		int16_t t = static_cast<int16_t>(getTemp(ow_devices + ind));
    10e4:	32 d5       	rcall	.+2660   	; 0x1b4a <__fixsfsi>
    10e6:	2b 01       	movw	r4, r22
    10e8:	3c 01       	movw	r6, r24
		if (abs(t) < 127)
    10ea:	cb 01       	movw	r24, r22
    10ec:	82 58       	subi	r24, 0x82	; 130
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	0d 2d       	mov	r16, r13
    10f2:	10 e0       	ldi	r17, 0x00	; 0
    10f4:	8d 3f       	cpi	r24, 0xFD	; 253
    10f6:	91 05       	cpc	r25, r1
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <main+0x4be>
    10fa:	65 c0       	rjmp	.+202    	; 0x11c6 <main+0x588>
		{
			temperatures[i] = static_cast<int8_t>(t);
    10fc:	f8 01       	movw	r30, r16
    10fe:	ee 51       	subi	r30, 0x1E	; 30
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	40 82       	st	Z, r4
			if (t > temp_high_buf)
    1104:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <_ZL13temp_high_buf>
    1108:	02 2e       	mov	r0, r18
    110a:	00 0c       	add	r0, r0
    110c:	33 0b       	sbc	r19, r19
    110e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <_ZL8ow_alarm>
    1112:	24 15       	cp	r18, r4
    1114:	35 05       	cpc	r19, r5
    1116:	5c f5       	brge	.+86     	; 0x116e <main+0x530>
			{
				if (!(ow_alarm & BV8(i)))
    1118:	f7 01       	movw	r30, r14
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <main+0x4e2>
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	da 94       	dec	r13
    1122:	e2 f7       	brpl	.-8      	; 0x111c <main+0x4de>
    1124:	6f 01       	movw	r12, r30
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	8e 23       	and	r24, r30
    112a:	9f 23       	and	r25, r31
    112c:	89 2b       	or	r24, r25
    112e:	09 f0       	breq	.+2      	; 0x1132 <main+0x4f4>
    1130:	62 c0       	rjmp	.+196    	; 0x11f6 <main+0x5b8>
				{
					uart_puts("T:A:");
    1132:	89 e9       	ldi	r24, 0x99	; 153
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	00 db       	rcall	.-2560   	; 0x738 <_Z9uart_putsPKc>
					uart_putc(NumToASCII(i));
    1138:	8b 2d       	mov	r24, r11
    113a:	df da       	rcall	.-2626   	; 0x6fa <_Z9uart_putch>
					uart_putc(':');
    113c:	8a e3       	ldi	r24, 0x3A	; 58
    113e:	dd da       	rcall	.-2630   	; 0x6fa <_Z9uart_putch>
    1140:	4a e0       	ldi	r20, 0x0A	; 10
    1142:	be 01       	movw	r22, r28
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	c2 01       	movw	r24, r4
    114a:	22 d4       	rcall	.+2116   	; 0x1990 <__itoa_ncheck>
					uart_puts(itoa(t, buf, 10));
    114c:	f5 da       	rcall	.-2582   	; 0x738 <_Z9uart_putsPKc>
					uart_puts(line_feed);
    114e:	83 e9       	ldi	r24, 0x93	; 147
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	f2 da       	rcall	.-2588   	; 0x738 <_Z9uart_putsPKc>
					ow_alarm |= BV8(i);
    1154:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <_ZL8ow_alarm>
    1158:	c8 2a       	or	r12, r24
    115a:	c0 92 df 00 	sts	0x00DF, r12	; 0x8000df <_ZL8ow_alarm>
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false)) actuate(temp_mapping_buf[i], true);
    115e:	f8 01       	movw	r30, r16
    1160:	e6 51       	subi	r30, 0x16	; 22
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    1164:	80 81       	ld	r24, Z
    1166:	85 30       	cpi	r24, 0x05	; 5
    1168:	08 f0       	brcs	.+2      	; 0x116c <main+0x52e>
    116a:	45 c0       	rjmp	.+138    	; 0x11f6 <main+0x5b8>
    116c:	47 c2       	rjmp	.+1166   	; 0x15fc <main+0x9be>
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false)) actuate(temp_mapping_buf[i], true);
				}
			}
			else
			{
				if (ow_alarm & BV8(i))
    116e:	97 01       	movw	r18, r14
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <main+0x538>
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	da 94       	dec	r13
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <main+0x534>
    117a:	69 01       	movw	r12, r18
    117c:	dd 24       	eor	r13, r13
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	8c 21       	and	r24, r12
    1182:	9d 21       	and	r25, r13
    1184:	89 2b       	or	r24, r25
    1186:	b9 f1       	breq	.+110    	; 0x11f6 <main+0x5b8>
				{
					uart_puts("T:S:");
    1188:	8e e9       	ldi	r24, 0x9E	; 158
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	d5 da       	rcall	.-2646   	; 0x738 <_Z9uart_putsPKc>
					uart_putc(NumToASCII(i));
    118e:	8b 2d       	mov	r24, r11
    1190:	b4 da       	rcall	.-2712   	; 0x6fa <_Z9uart_putch>
					uart_putc(':');
    1192:	8a e3       	ldi	r24, 0x3A	; 58
    1194:	b2 da       	rcall	.-2716   	; 0x6fa <_Z9uart_putch>
    1196:	4a e0       	ldi	r20, 0x0A	; 10
    1198:	be 01       	movw	r22, r28
    119a:	6f 5f       	subi	r22, 0xFF	; 255
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	c2 01       	movw	r24, r4
    11a0:	f7 d3       	rcall	.+2030   	; 0x1990 <__itoa_ncheck>
					uart_puts(itoa(t, buf, 10));
    11a2:	ca da       	rcall	.-2668   	; 0x738 <_Z9uart_putsPKc>
					uart_puts(line_feed);
    11a4:	83 e9       	ldi	r24, 0x93	; 147
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	c7 da       	rcall	.-2674   	; 0x738 <_Z9uart_putsPKc>
					ow_alarm &= ~BV8(i);
    11aa:	c0 94       	com	r12
    11ac:	d0 94       	com	r13
    11ae:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <_ZL8ow_alarm>
    11b2:	c8 22       	and	r12, r24
    11b4:	c0 92 df 00 	sts	0x00DF, r12	; 0x8000df <_ZL8ow_alarm>
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false))
    11b8:	f8 01       	movw	r30, r16
    11ba:	e6 51       	subi	r30, 0x16	; 22
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    11c0:	85 30       	cpi	r24, 0x05	; 5
    11c2:	c8 f4       	brcc	.+50     	; 0x11f6 <main+0x5b8>
    11c4:	1e c2       	rjmp	.+1084   	; 0x1602 <main+0x9c4>
				}
			}
		}
		else
		{
			uart_puts_P("E:Temp. ");
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	9e e1       	ldi	r25, 0x1E	; 30
    11ca:	a8 da       	rcall	.-2736   	; 0x71c <_Z11uart_puts_pPKc>
    11cc:	4a e0       	ldi	r20, 0x0A	; 10
    11ce:	be 01       	movw	r22, r28
    11d0:	6f 5f       	subi	r22, 0xFF	; 255
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	c2 01       	movw	r24, r4
    11d6:	dc d3       	rcall	.+1976   	; 0x1990 <__itoa_ncheck>
			uart_puts(itoa(t, buf, 10));
    11d8:	af da       	rcall	.-2722   	; 0x738 <_Z9uart_putsPKc>
			uart_putc('@');
    11da:	80 e4       	ldi	r24, 0x40	; 64
    11dc:	8e da       	rcall	.-2788   	; 0x6fa <_Z9uart_putch>
			uart_puts_EP(&(ds_names[i]), sizeof(txt_in1));
    11de:	f8 01       	movw	r30, r16
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	e4 56       	subi	r30, 0x64	; 100
    11e6:	f1 4e       	sbci	r31, 0xE1	; 225
/************************************************************************/
/*                                                                      */
/************************************************************************/
void uart_puts_EP(const uint8_t* const* p, uint8_t sz)
{
	uart_puts_E((uint8_t*)pgm_read_word(p), sz);
    11e8:	85 91       	lpm	r24, Z+
    11ea:	94 91       	lpm	r25, Z
    11ec:	60 e1       	ldi	r22, 0x10	; 16
    11ee:	af da       	rcall	.-2722   	; 0x74e <_Z11uart_puts_EPKhh>
			uart_puts(line_feed);
    11f0:	83 e9       	ldi	r24, 0x93	; 147
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a1 da       	rcall	.-2750   	; 0x738 <_Z9uart_putsPKc>
    11f6:	b3 94       	inc	r11
    11f8:	38 e0       	ldi	r19, 0x08	; 8
    11fa:	a3 0e       	add	r10, r19
    11fc:	24 cf       	rjmp	.-440    	; 0x1046 <main+0x408>
		}
	}
	requestTemperatures();
    11fe:	1a dd       	rcall	.-1484   	; 0xc34 <_Z19requestTemperaturesv>
	{
		wdt_reset();
		poll();
		wdt_reset();
		processOWDevices();
		wdt_reset();
    1200:	a8 95       	wdr
		c = uart_getc();
    1202:	f0 da       	rcall	.-2592   	; 0x7e4 <_Z9uart_getcv>
    1204:	fc 01       	movw	r30, r24
		if (c != UART_NO_DATA)
    1206:	e1 15       	cp	r30, r1
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	f8 07       	cpc	r31, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <main+0x5d2>
    120e:	8b c1       	rjmp	.+790    	; 0x1526 <main+0x8e8>
		{
			last_comm_time = time_cnt;
    1210:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <_ZL8time_cnt.lto_priv.36>
    1214:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <_ZL8time_cnt.lto_priv.36+0x1>
    1218:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <_ZL14last_comm_time+0x1>
    121c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <_ZL14last_comm_time>
    1220:	af e3       	ldi	r26, 0x3F	; 63
    1222:	bf e1       	ldi	r27, 0x1F	; 31
    1224:	11 97       	sbiw	r26, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <main+0x5e6>
    1228:	00 c0       	rjmp	.+0      	; 0x122a <main+0x5ec>
    122a:	00 00       	nop
#pragma endregion Helpers

void cmd(char first_letter)
{
	char buf[32];
	switch (first_letter)
    122c:	8e 2f       	mov	r24, r30
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	fc 01       	movw	r30, r24
    1232:	e1 54       	subi	r30, 0x41	; 65
    1234:	f1 09       	sbc	r31, r1
    1236:	e6 31       	cpi	r30, 0x16	; 22
    1238:	f1 05       	cpc	r31, r1
    123a:	08 f0       	brcs	.+2      	; 0x123e <main+0x600>
    123c:	72 c1       	rjmp	.+740    	; 0x1522 <main+0x8e4>
    123e:	ed 5e       	subi	r30, 0xED	; 237
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	09 94       	ijmp
	{
		case 'F':
			uart_puts("F:");
    1244:	83 ea       	ldi	r24, 0xA3	; 163
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	77 da       	rcall	.-2834   	; 0x738 <_Z9uart_putsPKc>
			if (static_cast<char>(cmd_helper(buf, arraySize(buf))) == '1')	//cmd_helper returns UART_NO_DATA == 0x0100 --> 0x00 == '\0' only
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	d8 d7       	rcall	.+4016   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
    1250:	81 33       	cpi	r24, 0x31	; 49
    1252:	59 f4       	brne	.+22     	; 0x126a <main+0x62c>
			{
				eeprom_write_byte(&is_first_run, 0);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	86 e0       	ldi	r24, 0x06	; 6
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	05 d4       	rcall	.+2058   	; 0x1a66 <eeprom_write_byte>
				uart_puts(ok);
    125c:	80 e9       	ldi	r24, 0x90	; 144
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	6b da       	rcall	.-2858   	; 0x738 <_Z9uart_putsPKc>
				uart_puts(line_feed);
    1262:	83 e9       	ldi	r24, 0x93	; 147
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	68 da       	rcall	.-2864   	; 0x738 <_Z9uart_putsPKc>
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <main+0x638>
				soft_reset();	//Makes all the code below unreachable without else
				__builtin_unreachable();
			}
			uart_puts("False");
    126a:	86 ea       	ldi	r24, 0xA6	; 166
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	55 c1       	rjmp	.+682    	; 0x151a <main+0x8dc>
			break;
		case 'A':
			uart_puts_P("A:Resetting...\r\n");
    1270:	89 e3       	ldi	r24, 0x39	; 57
    1272:	9e e1       	ldi	r25, 0x1E	; 30
    1274:	53 da       	rcall	.-2906   	; 0x71c <_Z11uart_puts_pPKc>
			soft_reset();
    1276:	d5 da       	rcall	.-2646   	; 0x822 <_Z10soft_resetv>
			__builtin_unreachable();
			break;
		case 'P': //Show presence
			uart_puts("P:");
    1278:	86 e9       	ldi	r24, 0x96	; 150
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	5d da       	rcall	.-2886   	; 0x738 <_Z9uart_putsPKc>
			//flushSerial(); -?
			uart_puts_E(dev_name, arraySize(dev_name));
    127e:	61 e1       	ldi	r22, 0x11	; 17
    1280:	85 ef       	ldi	r24, 0xF5	; 245
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	64 da       	rcall	.-2872   	; 0x74e <_Z11uart_puts_EPKhh>
    1286:	4a c1       	rjmp	.+660    	; 0x151c <main+0x8de>
			break;
		case 'H':
		{
			uart_puts("H:");
    1288:	8c ea       	ldi	r24, 0xAC	; 172
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	55 da       	rcall	.-2902   	; 0x738 <_Z9uart_putsPKc>
    128e:	05 e8       	ldi	r16, 0x85	; 133
    1290:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i = 0; i < sizeof(DEVICE_DESC); i += sizeof(txt_in1)) uart_puts_E(dev_desc + i, sizeof(txt_in1));
    1292:	60 e1       	ldi	r22, 0x10	; 16
    1294:	c8 01       	movw	r24, r16
    1296:	5b da       	rcall	.-2890   	; 0x74e <_Z11uart_puts_EPKhh>
    1298:	00 5f       	subi	r16, 0xF0	; 240
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	05 3f       	cpi	r16, 0xF5	; 245
    12a0:	1b 07       	cpc	r17, r27
    12a2:	b9 f7       	brne	.-18     	; 0x1292 <main+0x654>
    12a4:	3b c1       	rjmp	.+630    	; 0x151c <main+0x8de>
			break;
		}
		case 'L':	//Signal label. L:{I/O/T}:#[#]:"<=16"\r[\n]; L:{A=E}[:{I/O/T}:#[#]][\r[\n]]
		{
			uart_puts("L:");
    12a6:	8f ea       	ldi	r24, 0xAF	; 175
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	46 da       	rcall	.-2932   	; 0x738 <_Z9uart_putsPKc>
    12ac:	ef e9       	ldi	r30, 0x9F	; 159
    12ae:	ff e0       	ldi	r31, 0x0F	; 15
    12b0:	31 97       	sbiw	r30, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <main+0x672>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <main+0x678>
    12b6:	00 00       	nop
			_delay_ms(1);
			if (arg_check_helper(uart_getc())) break;
    12b8:	95 da       	rcall	.-2774   	; 0x7e4 <_Z9uart_getcv>
}

//Returns true if parameter c is not an argument separator character
bool arg_check_helper(unsigned int c)
{
	if (static_cast<char>(c) != ':')
    12ba:	8a 33       	cpi	r24, 0x3A	; 58
    12bc:	99 f4       	brne	.+38     	; 0x12e4 <main+0x6a6>
    12be:	b3 c1       	rjmp	.+870    	; 0x1626 <main+0x9e8>
    12c0:	8f e9       	ldi	r24, 0x9F	; 159
    12c2:	9f e0       	ldi	r25, 0x0F	; 15
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <main+0x686>
    12c8:	00 c0       	rjmp	.+0      	; 0x12ca <main+0x68c>
    12ca:	00 00       	nop
					*p = '\0';
					uart_puts(buf);
					break;
				}
				_delay_ms(1);
				a = static_cast<char>(uart_getc());		//Get name of specified signal
    12cc:	8b da       	rcall	.-2794   	; 0x7e4 <_Z9uart_getcv>
    12ce:	18 2f       	mov	r17, r24
    12d0:	af e9       	ldi	r26, 0x9F	; 159
    12d2:	bf e0       	ldi	r27, 0x0F	; 15
    12d4:	11 97       	sbiw	r26, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <main+0x696>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <main+0x69c>
    12da:	00 00       	nop
				_delay_ms(1);
				if (arg_check_helper(uart_getc())) break;
    12dc:	83 da       	rcall	.-2810   	; 0x7e4 <_Z9uart_getcv>
}

//Returns true if parameter c is not an argument separator character
bool arg_check_helper(unsigned int c)
{
	if (static_cast<char>(c) != ':')
    12de:	8a 33       	cpi	r24, 0x3A	; 58
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <main+0x6a6>
    12e2:	c8 c1       	rjmp	.+912    	; 0x1674 <main+0xa36>
	{
		reportError(PSTR_L("Missing argument"));
    12e4:	8a e4       	ldi	r24, 0x4A	; 74
    12e6:	9e e1       	ldi	r25, 0x1E	; 30
    12e8:	f4 c0       	rjmp	.+488    	; 0x14d2 <main+0x894>
			uart_puts(ok);
			break;
		}
		case 'I': //Input inversion
		{
			uart_puts("I:");
    12ea:	82 eb       	ldi	r24, 0xB2	; 178
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	24 da       	rcall	.-3000   	; 0x738 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	85 d7       	rcall	.+3850   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
			if (c == UART_NO_DATA) break;
    12f6:	81 15       	cp	r24, r1
    12f8:	a1 e0       	ldi	r26, 0x01	; 1
    12fa:	9a 07       	cpc	r25, r26
    12fc:	09 f4       	brne	.+2      	; 0x1300 <main+0x6c2>
    12fe:	0e c1       	rjmp	.+540    	; 0x151c <main+0x8de>
			char a = (*buf == ':') ? *(buf + 1) : *buf;
    1300:	49 81       	ldd	r20, Y+1	; 0x01
    1302:	4a 33       	cpi	r20, 0x3A	; 58
    1304:	09 f4       	brne	.+2      	; 0x1308 <main+0x6ca>
    1306:	4a 81       	ldd	r20, Y+2	; 0x02
    1308:	50 e0       	ldi	r21, 0x00	; 0
			if (static_cast<char>(c) == 'O')
    130a:	8f 34       	cpi	r24, 0x4F	; 79
    130c:	71 f4       	brne	.+28     	; 0x132a <main+0x6ec>
			{
				if (cmd_helper_2(&output_inv_buf, buf, arraySize(buf), a, arraySize(output_pins))) break;
    130e:	25 e0       	ldi	r18, 0x05	; 5
    1310:	be 01       	movw	r22, r28
    1312:	6f 5f       	subi	r22, 0xFF	; 255
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	80 e4       	ldi	r24, 0x40	; 64
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	7d d8       	rcall	.-3846   	; 0x416 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>
    131c:	81 11       	cpse	r24, r1
    131e:	fe c0       	rjmp	.+508    	; 0x151c <main+0x8de>
				EEPROM_WRITE_INPUTS(outputs_inverted, output_inv_buf); //Buffer is never changed outside of this routine
    1320:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <_ZL14output_inv_buf.lto_priv.27>
    1324:	84 e8       	ldi	r24, 0x84	; 132
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	f5 c0       	rjmp	.+490    	; 0x1514 <main+0x8d6>
			}
			else
			{
				if (cmd_helper_2(&input_inv_buf, buf, arraySize(buf), a, arraySize(input_pins))) break;
    132a:	27 e0       	ldi	r18, 0x07	; 7
    132c:	be 01       	movw	r22, r28
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8b ef       	ldi	r24, 0xFB	; 251
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	6f d8       	rcall	.-3874   	; 0x416 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>
    1338:	81 11       	cpse	r24, r1
    133a:	f0 c0       	rjmp	.+480    	; 0x151c <main+0x8de>
				EEPROM_WRITE_INPUTS(inputs_inverted, input_inv_buf); //Buffer is never changed outside of this routine
    133c:	60 91 fb 00 	lds	r22, 0x00FB	; 0x8000fb <_ZL13input_inv_buf>
    1340:	83 e8       	ldi	r24, 0x83	; 131
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	e7 c0       	rjmp	.+462    	; 0x1514 <main+0x8d6>
			uart_puts(ok);
			break;
		}
		case 'V': //Manual output override
		{
			uart_puts("V:");
    1346:	85 eb       	ldi	r24, 0xB5	; 181
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	f6 d9       	rcall	.-3092   	; 0x738 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
    134c:	ce 01       	movw	r24, r28
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	57 d7       	rcall	.+3758   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
			if (c == UART_NO_DATA) break;
    1352:	81 15       	cp	r24, r1
    1354:	b1 e0       	ldi	r27, 0x01	; 1
    1356:	9b 07       	cpc	r25, r27
    1358:	09 f4       	brne	.+2      	; 0x135c <main+0x71e>
    135a:	e0 c0       	rjmp	.+448    	; 0x151c <main+0x8de>
			if (cmd_helper_2(&override_comapre_buf, buf, arraySize(buf), c, arraySize(output_pins))) break;
    135c:	25 e0       	ldi	r18, 0x05	; 5
    135e:	ac 01       	movw	r20, r24
    1360:	be 01       	movw	r22, r28
    1362:	6f 5f       	subi	r22, 0xFF	; 255
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	8a ef       	ldi	r24, 0xFA	; 250
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	55 d8       	rcall	.-3926   	; 0x416 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>
    136c:	81 11       	cpse	r24, r1
    136e:	d6 c0       	rjmp	.+428    	; 0x151c <main+0x8de>
			EEPROM_WRITE_OUTPUTS(manual_override, override_comapre_buf); //Buffer is never changed outside of this routine
    1370:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <_ZL20override_comapre_buf>
    1374:	82 e8       	ldi	r24, 0x82	; 130
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	cd c0       	rjmp	.+410    	; 0x1514 <main+0x8d6>
			uart_puts(ok);
			break;
		}
		case 'N': //Normal input state
		{
			uart_puts("N:");
    137a:	88 eb       	ldi	r24, 0xB8	; 184
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	dc d9       	rcall	.-3144   	; 0x738 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
    1380:	ce 01       	movw	r24, r28
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	3d d7       	rcall	.+3706   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
			if (c == UART_NO_DATA) break;
    1386:	81 15       	cp	r24, r1
    1388:	e1 e0       	ldi	r30, 0x01	; 1
    138a:	9e 07       	cpc	r25, r30
    138c:	09 f4       	brne	.+2      	; 0x1390 <main+0x752>
    138e:	c6 c0       	rjmp	.+396    	; 0x151c <main+0x8de>
			if (cmd_helper_2(&input_compare_buf, buf, arraySize(buf), c, arraySize(input_pins))) break;
    1390:	27 e0       	ldi	r18, 0x07	; 7
    1392:	ac 01       	movw	r20, r24
    1394:	be 01       	movw	r22, r28
    1396:	6f 5f       	subi	r22, 0xFF	; 255
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	89 ef       	ldi	r24, 0xF9	; 249
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	3b d8       	rcall	.-3978   	; 0x416 <_Z12cmd_helper_2IhEbPT_Pchjh.constprop.0>
    13a0:	81 11       	cpse	r24, r1
    13a2:	bc c0       	rjmp	.+376    	; 0x151c <main+0x8de>
			EEPROM_WRITE_INPUTS(input_normal, input_compare_buf); //Buffer is never changed outside of this routine
    13a4:	60 91 f9 00 	lds	r22, 0x00F9	; 0x8000f9 <_ZL17input_compare_buf>
    13a8:	81 e8       	ldi	r24, 0x81	; 129
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	b3 c0       	rjmp	.+358    	; 0x1514 <main+0x8d6>
			uart_puts(ok);
			break;
		}
		case 'M': //Map output to input
		{
			uart_puts("M:");
    13ae:	8b eb       	ldi	r24, 0xBB	; 187
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	c2 d9       	rcall	.-3196   	; 0x738 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	23 d7       	rcall	.+3654   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
			if (c == UART_NO_DATA) break;
    13ba:	81 15       	cp	r24, r1
    13bc:	f1 e0       	ldi	r31, 0x01	; 1
    13be:	9f 07       	cpc	r25, r31
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <main+0x786>
    13c2:	ac c0       	rjmp	.+344    	; 0x151c <main+0x8de>
			if (cmd_helper_3(mapping_compare_buf, arraySize(mapping_compare_buf), buf, arraySize(buf), c, auto_on_mapping)) break;
    13c4:	0a e7       	ldi	r16, 0x7A	; 122
    13c6:	10 e0       	ldi	r17, 0x00	; 0
    13c8:	9c 01       	movw	r18, r24
    13ca:	ae 01       	movw	r20, r28
    13cc:	4f 5f       	subi	r20, 0xFF	; 255
    13ce:	5f 4f       	sbci	r21, 0xFF	; 255
    13d0:	67 e0       	ldi	r22, 0x07	; 7
    13d2:	82 ef       	ldi	r24, 0xF2	; 242
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <main+0x7c2>
			uart_puts(ok);
			break;
		}
		case 'G':
		{
			uart_puts("G:");
    13d8:	8e eb       	ldi	r24, 0xBE	; 190
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	ad d9       	rcall	.-3238   	; 0x738 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
    13de:	ce 01       	movw	r24, r28
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	0e d7       	rcall	.+3612   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
			if (c == UART_NO_DATA) break;
    13e4:	81 15       	cp	r24, r1
    13e6:	21 e0       	ldi	r18, 0x01	; 1
    13e8:	92 07       	cpc	r25, r18
    13ea:	09 f4       	brne	.+2      	; 0x13ee <main+0x7b0>
    13ec:	97 c0       	rjmp	.+302    	; 0x151c <main+0x8de>
			if (cmd_helper_3(temp_mapping_buf, arraySize(temp_mapping_buf), buf, arraySize(buf), c, temp_auto_mapping)) break;
    13ee:	02 e7       	ldi	r16, 0x72	; 114
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	9c 01       	movw	r18, r24
    13f4:	ae 01       	movw	r20, r28
    13f6:	4f 5f       	subi	r20, 0xFF	; 255
    13f8:	5f 4f       	sbci	r21, 0xFF	; 255
    13fa:	68 e0       	ldi	r22, 0x08	; 8
    13fc:	8a ee       	ldi	r24, 0xEA	; 234
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	5a d7       	rcall	.+3764   	; 0x22b6 <__TEXT_REGION_LENGTH__+0x2b6>
    1402:	81 11       	cpse	r24, r1
    1404:	8b c0       	rjmp	.+278    	; 0x151c <main+0x8de>
    1406:	87 c0       	rjmp	.+270    	; 0x1516 <main+0x8d8>
			uart_puts(ok);
			break;
		}
		case 'R': //Read
		{
			uart_puts("R:"); //Header is common for all modes
    1408:	81 ec       	ldi	r24, 0xC1	; 193
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	95 d9       	rcall	.-3286   	; 0x738 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
    140e:	ce 01       	movw	r24, r28
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	f6 d6       	rcall	.+3564   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
    1414:	8c 01       	movw	r16, r24
			if (c == UART_NO_DATA) break;
    1416:	81 15       	cp	r24, r1
    1418:	91 40       	sbci	r25, 0x01	; 1
    141a:	09 f4       	brne	.+2      	; 0x141e <main+0x7e0>
    141c:	7f c0       	rjmp	.+254    	; 0x151c <main+0x8de>
			if (*buf == ':') strrmv(buf, 1);
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	8a 33       	cpi	r24, 0x3A	; 58
    1422:	19 f4       	brne	.+6      	; 0x142a <main+0x7ec>
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	88 d6       	rcall	.+3344   	; 0x213a <__TEXT_REGION_LENGTH__+0x13a>
	while (str < end) if (!isNumeric(*str++)) return false;
	return true;
}
bool isNumeric(const char* str, uint8_t max_len)
{
	return isNumeric(str, 0_ui8, strnlen(str, max_len));
    142a:	60 e2       	ldi	r22, 0x20	; 32
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	a3 d2       	rcall	.+1350   	; 0x197a <strnlen>
#include <stdlib.h>

bool isNumeric(const char* str, uint8_t start, uint8_t len)
{
	str += start;
	const char* end = str + len;
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	4c 0f       	add	r20, r28
    143a:	5d 1f       	adc	r21, r29
    143c:	48 0f       	add	r20, r24
    143e:	51 1d       	adc	r21, r1
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	fc 01       	movw	r30, r24
	while (str < end) if (!isNumeric(*str++)) return false;
    1446:	84 17       	cp	r24, r20
    1448:	95 07       	cpc	r25, r21
    144a:	08 f0       	brcs	.+2      	; 0x144e <main+0x810>
    144c:	b8 c1       	rjmp	.+880    	; 0x17be <main+0xb80>
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	20 81       	ld	r18, Z
    1452:	20 53       	subi	r18, 0x30	; 48
    1454:	2a 30       	cpi	r18, 0x0A	; 10
    1456:	b0 f3       	brcs	.-20     	; 0x1444 <main+0x806>
			if (!isNumeric(buf, arraySize(buf)))
			{
				reportError(PSTR_L("Out of range"));
    1458:	8a e1       	ldi	r24, 0x1A	; 26
    145a:	9e e1       	ldi	r25, 0x1E	; 30
    145c:	3a c0       	rjmp	.+116    	; 0x14d2 <main+0x894>
			break;
		}
		case 'O': //Turn output on
		{
			//Detect explicit on/off flag
			uart_puts("O:");
    145e:	84 ec       	ldi	r24, 0xC4	; 196
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	6a d9       	rcall	.-3372   	; 0x738 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, arraySize(buf));
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	cb d6       	rcall	.+3478   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
			if (c == UART_NO_DATA) break; //Error-handling is inside of the helper routine
    146a:	81 15       	cp	r24, r1
    146c:	a1 e0       	ldi	r26, 0x01	; 1
    146e:	9a 07       	cpc	r25, r26
    1470:	09 f4       	brne	.+2      	; 0x1474 <main+0x836>
    1472:	54 c0       	rjmp	.+168    	; 0x151c <main+0x8de>
			if (static_cast<char>(c) == 'E')
    1474:	85 34       	cpi	r24, 0x45	; 69
    1476:	51 f4       	brne	.+20     	; 0x148c <main+0x84e>
			{
				intToBit(EEPROM_READ_OUTPUTS(output_last), buf);
    1478:	81 e7       	ldi	r24, 0x71	; 113
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	cc d2       	rcall	.+1432   	; 0x1a16 <eeprom_read_byte>
    147e:	be 01       	movw	r22, r28
    1480:	6f 5f       	subi	r22, 0xFF	; 255
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
			else
			{
				intToBit(input_state_buf, buf);
				uart_puts(buf);
				uart_putc(':');
				intToBit(output_compare_buf, buf);
    1484:	84 d6       	rcall	.+3336   	; 0x218e <__TEXT_REGION_LENGTH__+0x18e>
				uart_puts(buf);
    1486:	ce 01       	movw	r24, r28
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	47 c0       	rjmp	.+142    	; 0x151a <main+0x8dc>
			{
				intToBit(EEPROM_READ_OUTPUTS(output_last), buf);
				uart_puts(buf);
				break;
			}
			if (*buf == ':') strrmv(buf, 1);
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	8a 33       	cpi	r24, 0x3A	; 58
    1490:	19 f4       	brne	.+6      	; 0x1498 <main+0x85a>
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	51 d6       	rcall	.+3234   	; 0x213a <__TEXT_REGION_LENGTH__+0x13a>
			//Parse index:state
			uint8_t l = strnlen(buf, sizeof(buf));
    1498:	60 e2       	ldi	r22, 0x20	; 32
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	ce 01       	movw	r24, r28
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	6c d2       	rcall	.+1240   	; 0x197a <strnlen>
    14a2:	fe 01       	movw	r30, r28
    14a4:	31 96       	adiw	r30, 0x01	; 1
{
	return arraySearch(arr, val, len, 0);
} // arraySearch
template<typename T> uint8_t arraySearch(const T* arr, T val, uint8_t len, uint8_t start)
{
	for (uint8_t i = start; i < len; ++i) if (arr[i] == val) return i;
    14a6:	00 e0       	ldi	r16, 0x00	; 0
    14a8:	08 17       	cp	r16, r24
    14aa:	88 f4       	brcc	.+34     	; 0x14ce <main+0x890>
    14ac:	91 91       	ld	r25, Z+
    14ae:	9a 33       	cpi	r25, 0x3A	; 58
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <main+0x878>
    14b2:	0f 5f       	subi	r16, 0xFF	; 255
    14b4:	f9 cf       	rjmp	.-14     	; 0x14a8 <main+0x86a>
			uint8_t i = arraySearch(buf, ':', l);
			if (i < l)
			{
				l = decodeInt(buf, 0, i);	//index goes first
    14b6:	40 2f       	mov	r20, r16
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	81 db       	rcall	.-2302   	; 0xbc2 <_Z9decodeIntPKchh>
    14c0:	18 2f       	mov	r17, r24
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    14c2:	85 30       	cpi	r24, 0x05	; 5
    14c4:	08 f4       	brcc	.+2      	; 0x14c8 <main+0x88a>
    14c6:	aa c1       	rjmp	.+852    	; 0x181c <main+0xbde>
	{
		if (msg) reportError(PSTR_L("Illegal index"));
    14c8:	8b e5       	ldi	r24, 0x5B	; 91
    14ca:	9e e1       	ldi	r25, 0x1E	; 30
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <main+0x894>
				l = decodeInt(buf, 0, i);	//index goes first
				if (check_index_helper(l, arraySize(output_pins))) break;
			}
			else
			{
				reportError(PSTR_L("Missing argument"));
    14ce:	89 e0       	ldi	r24, 0x09	; 9
    14d0:	9e e1       	ldi	r25, 0x1E	; 30
    14d2:	88 d6       	rcall	.+3344   	; 0x21e4 <__TEXT_REGION_LENGTH__+0x1e4>
    14d4:	23 c0       	rjmp	.+70     	; 0x151c <main+0x8de>
			uart_puts(ok);
			break;
		}
		case 'T':
		{
			uart_puts("T:");
    14d6:	87 ec       	ldi	r24, 0xC7	; 199
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	2e d9       	rcall	.-3492   	; 0x738 <_Z9uart_putsPKc>
			unsigned int c = cmd_helper(buf, sizeof(buf));
    14dc:	ce 01       	movw	r24, r28
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	8f d6       	rcall	.+3358   	; 0x2200 <__TEXT_REGION_LENGTH__+0x200>
			if (c == UART_NO_DATA) break;
    14e2:	81 15       	cp	r24, r1
    14e4:	b1 e0       	ldi	r27, 0x01	; 1
    14e6:	9b 07       	cpc	r25, r27
    14e8:	c9 f0       	breq	.+50     	; 0x151c <main+0x8de>
			if (static_cast<char>(c) == 'A')
    14ea:	81 34       	cpi	r24, 0x41	; 65
    14ec:	59 f4       	brne	.+22     	; 0x1504 <main+0x8c6>
    14ee:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <_ZL13temp_high_buf>
    14f2:	4a e0       	ldi	r20, 0x0A	; 10
    14f4:	be 01       	movw	r22, r28
    14f6:	6f 5f       	subi	r22, 0xFF	; 255
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	08 2e       	mov	r0, r24
    14fc:	00 0c       	add	r0, r0
    14fe:	99 0b       	sbc	r25, r25
    1500:	47 d2       	rcall	.+1166   	; 0x1990 <__itoa_ncheck>
    1502:	c1 cf       	rjmp	.-126    	; 0x1486 <main+0x848>
				itoa(temp_high_buf, buf, 10);
				uart_puts(buf);
			}
			else
			{
				temp_high_buf = decodeInt(buf);
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	02 d6       	rcall	.+3076   	; 0x210e <__TEXT_REGION_LENGTH__+0x10e>
    150a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <_ZL13temp_high_buf>
				eeprom_update_byte(&temp_high, *reinterpret_cast<uint8_t*>(&temp_high_buf));
    150e:	68 2f       	mov	r22, r24
    1510:	80 e7       	ldi	r24, 0x70	; 112
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	97 d2       	rcall	.+1326   	; 0x1a44 <eeprom_update_byte>
				uart_puts(ok);
    1516:	80 e9       	ldi	r24, 0x90	; 144
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e d9       	rcall	.-3556   	; 0x738 <_Z9uart_putsPKc>
			break;
		}
		default:
		return;
	}
	uart_puts(line_feed);
    151c:	83 e9       	ldi	r24, 0x93	; 147
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0b d9       	rcall	.-3562   	; 0x738 <_Z9uart_putsPKc>
		if (c != UART_NO_DATA)
		{
			last_comm_time = time_cnt;
			_delay_ms(2);
			cmd(static_cast<char>(c));
			wdt_reset();
    1522:	a8 95       	wdr
    1524:	28 c0       	rjmp	.+80     	; 0x1576 <main+0x938>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    1526:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_ZL12pc_reset_buf.lto_priv.25>
    152a:	85 30       	cpi	r24, 0x05	; 5
    152c:	20 f5       	brcc	.+72     	; 0x1576 <main+0x938>
}

void checkPCDowntime()
{
	if (check_index_helper(pc_reset_buf, arraySize(output_pins), false)) return;
	if ((time_cnt - last_comm_time) > PC_COMM_INTERVAL)
    152e:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <_ZL8time_cnt.lto_priv.36>
    1532:	30 91 d3 00 	lds	r19, 0x00D3	; 0x8000d3 <_ZL8time_cnt.lto_priv.36+0x1>
    1536:	40 91 fc 00 	lds	r20, 0x00FC	; 0x8000fc <_ZL14last_comm_time>
    153a:	50 91 fd 00 	lds	r21, 0x00FD	; 0x8000fd <_ZL14last_comm_time+0x1>
    153e:	24 1b       	sub	r18, r20
    1540:	35 0b       	sbc	r19, r21
    1542:	25 39       	cpi	r18, 0x95	; 149
    1544:	36 4d       	sbci	r19, 0xD6	; 214
    1546:	b8 f0       	brcs	.+46     	; 0x1576 <main+0x938>
	{
		last_comm_time = time_cnt;
    1548:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <_ZL8time_cnt.lto_priv.36>
    154c:	30 91 d3 00 	lds	r19, 0x00D3	; 0x8000d3 <_ZL8time_cnt.lto_priv.36+0x1>
    1550:	30 93 fd 00 	sts	0x00FD, r19	; 0x8000fd <_ZL14last_comm_time+0x1>
    1554:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <_ZL14last_comm_time>
		actuate(pc_reset_buf, true);
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	21 d8       	rcall	.-4030   	; 0x59e <_Z7actuatehb>
    155c:	ef ef       	ldi	r30, 0xFF	; 255
    155e:	f1 ee       	ldi	r31, 0xE1	; 225
    1560:	24 e0       	ldi	r18, 0x04	; 4
    1562:	e1 50       	subi	r30, 0x01	; 1
    1564:	f0 40       	sbci	r31, 0x00	; 0
    1566:	20 40       	sbci	r18, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <main+0x924>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <main+0x92e>
    156c:	00 00       	nop
		_delay_ms(PC_RESET_PULSE_TIME);
		actuate(pc_reset_buf, false);
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_ZL12pc_reset_buf.lto_priv.25>
    1574:	14 d8       	rcall	.-4056   	; 0x59e <_Z7actuatehb>
    1576:	3f ef       	ldi	r19, 0xFF	; 255
    1578:	83 ec       	ldi	r24, 0xC3	; 195
    157a:	99 e0       	ldi	r25, 0x09	; 9
    157c:	31 50       	subi	r19, 0x01	; 1
    157e:	80 40       	sbci	r24, 0x00	; 0
    1580:	90 40       	sbci	r25, 0x00	; 0
    1582:	e1 f7       	brne	.-8      	; 0x157c <main+0x93e>
    1584:	00 c0       	rjmp	.+0      	; 0x1586 <main+0x948>
    1586:	00 00       	nop
    1588:	db cc       	rjmp	.-1610   	; 0xf40 <main+0x302>
			search_result = true;
		}
	}

	// if no device found then OWreset counters so next 'search' will be like a first
	if (!search_result || !ROM_NO[0]) {
    158a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <_ZL6ROM_NO>
    158e:	88 23       	and	r24, r24
    1590:	09 f4       	brne	.+2      	; 0x1594 <main+0x956>
    1592:	3e cc       	rjmp	.-1924   	; 0xe10 <main+0x1d2>
    1594:	d6 01       	movw	r26, r12
    1596:	e4 ed       	ldi	r30, 0xD4	; 212
    1598:	f0 e0       	ldi	r31, 0x00	; 0
		LastDiscrepancy = 0;
		LastDeviceFlag = false;
		LastFamilyDiscrepancy = 0;
		search_result = false;
		} else {
		for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    159a:	81 91       	ld	r24, Z+
    159c:	8d 93       	st	X+, r24
    159e:	ae 16       	cp	r10, r30
    15a0:	bf 06       	cpc	r11, r31
    15a2:	d9 f7       	brne	.-10     	; 0x159a <main+0x95c>
uint8_t searchForDevices(uint8_t* addressArray) {
	OWreset_search();
	uint8_t cnt = 0;
	while (OWsearch(addressArray)) 
	{
		addressArray += 8;
    15a4:	a8 e0       	ldi	r26, 0x08	; 8
    15a6:	ca 0e       	add	r12, r26
    15a8:	d1 1c       	adc	r13, r1
		++cnt;
    15aa:	93 94       	inc	r9
    15ac:	2a cc       	rjmp	.-1964   	; 0xe02 <main+0x1c4>
    15ae:	40 91 e1 00 	lds	r20, 0x00E1	; 0x8000e1 <_ZL15input_state_buf>
    15b2:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <_ZL17input_compare_buf>
    15b6:	49 27       	eor	r20, r25
    15b8:	50 e0       	ldi	r21, 0x00	; 0
		if (active || !(override_comapre_buf & BVO(mapping_compare_buf[pin_index])))
		{
			for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
			{
				if (( pin_index != i ) && ( mapping_compare_buf[i] == mapping_compare_buf[pin_index] )
				&& ( (input_state_buf ^ input_compare_buf) & BVI(i) )) return;
    15ba:	e2 ef       	ldi	r30, 0xF2	; 242
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (active || !(override_comapre_buf & BVO(mapping_compare_buf[pin_index])))
		{
			for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
			{
				if (( pin_index != i ) && ( mapping_compare_buf[i] == mapping_compare_buf[pin_index] )
    15c2:	42 16       	cp	r4, r18
    15c4:	79 f0       	breq	.+30     	; 0x15e4 <main+0x9a6>
    15c6:	90 81       	ld	r25, Z
    15c8:	89 13       	cpse	r24, r25
    15ca:	0c c0       	rjmp	.+24     	; 0x15e4 <main+0x9a6>
				&& ( (input_state_buf ^ input_compare_buf) & BVI(i) )) return;
    15cc:	b7 01       	movw	r22, r14
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <main+0x998>
    15d2:	66 0f       	add	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <main+0x994>
    15da:	64 23       	and	r22, r20
    15dc:	75 23       	and	r23, r21
    15de:	67 2b       	or	r22, r23
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <main+0x9a6>
    15e2:	22 cd       	rjmp	.-1468   	; 0x1028 <main+0x3ea>
    15e4:	2f 5f       	subi	r18, 0xFF	; 255
    15e6:	3f 4f       	sbci	r19, 0xFF	; 255
    15e8:	31 96       	adiw	r30, 0x01	; 1
	//Binded outputs
	if (!check_index_helper(mapping_compare_buf[pin_index], arraySize(output_pins), false))
	{
		if (active || !(override_comapre_buf & BVO(mapping_compare_buf[pin_index])))
		{
			for (uint8_t i = 0; i < arraySize(mapping_compare_buf); ++i)
    15ea:	27 30       	cpi	r18, 0x07	; 7
    15ec:	31 05       	cpc	r19, r1
    15ee:	49 f7       	brne	.-46     	; 0x15c2 <main+0x984>
			{
				if (( pin_index != i ) && ( mapping_compare_buf[i] == mapping_compare_buf[pin_index] )
				&& ( (input_state_buf ^ input_compare_buf) & BVI(i) )) return;
			}
			actuate(mapping_compare_buf[pin_index], active);
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	cd 28       	or	r12, r13
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <main+0x9ba>
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	d2 d7       	rcall	.+4004   	; 0x259e <__TEXT_REGION_LENGTH__+0x59e>
    15fa:	16 cd       	rjmp	.-1492   	; 0x1028 <main+0x3ea>
					uart_putc(NumToASCII(i));
					uart_putc(':');
					uart_puts(itoa(t, buf, 10));
					uart_puts(line_feed);
					ow_alarm |= BV8(i);
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false)) actuate(temp_mapping_buf[i], true);
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	cf d7       	rcall	.+3998   	; 0x259e <__TEXT_REGION_LENGTH__+0x59e>
    1600:	fa cd       	rjmp	.-1036   	; 0x11f6 <main+0x5b8>
					uart_puts(itoa(t, buf, 10));
					uart_puts(line_feed);
					ow_alarm &= ~BV8(i);
					if (!check_index_helper(temp_mapping_buf[i], arraySize(output_pins), false))
					{
						if (!(override_comapre_buf & BVO(temp_mapping_buf[i]))) actuate(temp_mapping_buf[i], false);
    1602:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <_ZL20override_comapre_buf>
    1606:	42 2f       	mov	r20, r18
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	97 01       	movw	r18, r14
    160c:	08 2e       	mov	r0, r24
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <main+0x9d6>
    1610:	22 0f       	add	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <main+0x9d2>
    1618:	24 23       	and	r18, r20
    161a:	35 23       	and	r19, r21
    161c:	23 2b       	or	r18, r19
    161e:	09 f0       	breq	.+2      	; 0x1622 <main+0x9e4>
    1620:	ea cd       	rjmp	.-1068   	; 0x11f6 <main+0x5b8>
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	ec cf       	rjmp	.-40     	; 0x15fe <main+0x9c0>
    1626:	ef e9       	ldi	r30, 0x9F	; 159
    1628:	ff e0       	ldi	r31, 0x0F	; 15
    162a:	31 97       	sbiw	r30, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <main+0x9ec>
    162e:	00 c0       	rjmp	.+0      	; 0x1630 <main+0x9f2>
    1630:	00 00       	nop
		{
			uart_puts("L:");
			_delay_ms(1);
			if (arg_check_helper(uart_getc())) break;
			_delay_ms(1);
			char a = static_cast<char>(uart_getc());
    1632:	d8 d8       	rcall	.-3664   	; 0x7e4 <_Z9uart_getcv>
    1634:	08 2f       	mov	r16, r24
    1636:	8f e9       	ldi	r24, 0x9F	; 159
    1638:	9f e0       	ldi	r25, 0x0F	; 15
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <main+0x9fc>
    163e:	00 c0       	rjmp	.+0      	; 0x1640 <main+0xa02>
    1640:	00 00       	nop
			_delay_ms(1);
			if (a == 'A')	//A: reading mode (EEPROM)
    1642:	01 34       	cpi	r16, 0x41	; 65
    1644:	91 f4       	brne	.+36     	; 0x166a <main+0xa2c>
			{
				if (static_cast<char>(uart_getc()) != ':')	//No arguments but E: get number of signals monitored
    1646:	ce d8       	rcall	.-3684   	; 0x7e4 <_Z9uart_getcv>
    1648:	8a 33       	cpi	r24, 0x3A	; 58
    164a:	09 f4       	brne	.+2      	; 0x164e <main+0xa10>
    164c:	39 ce       	rjmp	.-910    	; 0x12c0 <main+0x682>
				{
					flushSerial();
    164e:	ba d5       	rcall	.+2932   	; 0x21c4 <__TEXT_REGION_LENGTH__+0x1c4>

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
	*p++ = NumToASCII(n % 10_ui8);
    1650:	87 e3       	ldi	r24, 0x37	; 55
    1652:	89 83       	std	Y+1, r24	; 0x01
	*p++ = ',';
    1654:	8c e2       	ldi	r24, 0x2C	; 44
    1656:	8a 83       	std	Y+2, r24	; 0x02

//Useful for Listings and Mappings (comma separated integer[0..19] output), increments passed string pointer
void l_helper(char* &p, const uint8_t n)
{
	if (n > 9_ui8) *p++ = '1';
	*p++ = NumToASCII(n % 10_ui8);
    1658:	95 e3       	ldi	r25, 0x35	; 53
    165a:	9b 83       	std	Y+3, r25	; 0x03
	*p++ = ',';
    165c:	8c 83       	std	Y+4, r24	; 0x04
				{
					flushSerial();
					char* p = buf;
					l_helper(p, arraySize(input_pins));
					l_helper(p, arraySize(output_pins));
					*p++ = NumToASCII(ow_count);
    165e:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <_ZL8ow_count>
    1662:	80 5d       	subi	r24, 0xD0	; 208
    1664:	8d 83       	std	Y+5, r24	; 0x05
					*p = '\0';
    1666:	1e 82       	std	Y+6, r1	; 0x06
    1668:	0e cf       	rjmp	.-484    	; 0x1486 <main+0x848>
				if (static_cast<char>(uart_peek()) == '\n') uart_getc();
				eeprom_read_block((void*)buf, (void*)l_switch_helper(a, i), sizeof(txt_in1));
				uart_puts(buf);
				break;
			}
			if (arg_check_helper(uart_getc())) break;
    166a:	bc d8       	rcall	.-3720   	; 0x7e4 <_Z9uart_getcv>
}

//Returns true if parameter c is not an argument separator character
bool arg_check_helper(unsigned int c)
{
	if (static_cast<char>(c) != ':')
    166c:	8a 33       	cpi	r24, 0x3A	; 58
    166e:	09 f0       	breq	.+2      	; 0x1672 <main+0xa34>
    1670:	39 ce       	rjmp	.-910    	; 0x12e4 <main+0x6a6>
    1672:	3b c0       	rjmp	.+118    	; 0x16ea <main+0xaac>
				_delay_ms(1);
				a = static_cast<char>(uart_getc());		//Get name of specified signal
				_delay_ms(1);
				if (arg_check_helper(uart_getc())) break;
				uint8_t i;
				if (l_decode_helper(buf, i)) break;
    1674:	be 01       	movw	r22, r28
    1676:	6f 5d       	subi	r22, 0xDF	; 223
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	48 d7       	rcall	.+3728   	; 0x2510 <__TEXT_REGION_LENGTH__+0x510>
    1680:	81 11       	cpse	r24, r1
    1682:	4c cf       	rjmp	.-360    	; 0x151c <main+0x8de>
    1684:	ef e9       	ldi	r30, 0x9F	; 159
    1686:	ff e0       	ldi	r31, 0x0F	; 15
    1688:	31 97       	sbiw	r30, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <main+0xa4a>
    168c:	00 c0       	rjmp	.+0      	; 0x168e <main+0xa50>
    168e:	00 00       	nop
				_delay_ms(1);
				if (static_cast<char>(uart_peek()) == '\n') uart_getc();
    1690:	8f d8       	rcall	.-3810   	; 0x7b0 <_Z9uart_peekv>
    1692:	8a 30       	cpi	r24, 0x0A	; 10
    1694:	09 f4       	brne	.+2      	; 0x1698 <main+0xa5a>
    1696:	a6 d8       	rcall	.-3764   	; 0x7e4 <_Z9uart_getcv>
				eeprom_read_block((void*)buf, (void*)l_switch_helper(a, i), sizeof(txt_in1));
    1698:	e9 a1       	ldd	r30, Y+33	; 0x21
    169a:	f0 e0       	ldi	r31, 0x00	; 0
}

//Returns EEPROM pointers to the name of specified (type + index) I/O-entity
uint8_t* l_switch_helper(char a, uint8_t i)
{
	switch (a)
    169c:	1f 34       	cpi	r17, 0x4F	; 79
    169e:	51 f0       	breq	.+20     	; 0x16b4 <main+0xa76>
    16a0:	14 35       	cpi	r17, 0x54	; 84
    16a2:	91 f4       	brne	.+36     	; 0x16c8 <main+0xa8a>
	{
		case 'T':
		return pgm_read_EEM_P(ds_names[i]);
    16a4:	ee 0f       	add	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	e4 56       	subi	r30, 0x64	; 100
    16aa:	f1 4e       	sbci	r31, 0xE1	; 225
    16ac:	85 91       	lpm	r24, Z+
    16ae:	94 91       	lpm	r25, Z
    16b0:	bc 01       	movw	r22, r24
    16b2:	15 c0       	rjmp	.+42     	; 0x16de <main+0xaa0>
		case 'O':
		return output_pins[i].Text;
    16b4:	26 e0       	ldi	r18, 0x06	; 6
    16b6:	2e 9f       	mul	r18, r30
    16b8:	c0 01       	movw	r24, r0
    16ba:	2f 9f       	mul	r18, r31
    16bc:	90 0d       	add	r25, r0
    16be:	11 24       	eor	r1, r1
    16c0:	fc 01       	movw	r30, r24
    16c2:	e9 5b       	subi	r30, 0xB9	; 185
    16c4:	fe 4f       	sbci	r31, 0xFE	; 254
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <main+0xa9c>
		case 'I':
		default:
		return input_pins[i].Text;
    16c8:	26 e0       	ldi	r18, 0x06	; 6
    16ca:	2e 9f       	mul	r18, r30
    16cc:	c0 01       	movw	r24, r0
    16ce:	2f 9f       	mul	r18, r31
    16d0:	90 0d       	add	r25, r0
    16d2:	11 24       	eor	r1, r1
    16d4:	fc 01       	movw	r30, r24
    16d6:	eb 59       	subi	r30, 0x9B	; 155
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	63 81       	ldd	r22, Z+3	; 0x03
    16dc:	74 81       	ldd	r23, Z+4	; 0x04
				if (arg_check_helper(uart_getc())) break;
				uint8_t i;
				if (l_decode_helper(buf, i)) break;
				_delay_ms(1);
				if (static_cast<char>(uart_peek()) == '\n') uart_getc();
				eeprom_read_block((void*)buf, (void*)l_switch_helper(a, i), sizeof(txt_in1));
    16de:	40 e1       	ldi	r20, 0x10	; 16
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	ce 01       	movw	r24, r28
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	87 d1       	rcall	.+782    	; 0x19f6 <eeprom_read_block>
    16e8:	ce ce       	rjmp	.-612    	; 0x1486 <main+0x848>
				uart_puts(buf);
				break;
			}
			if (arg_check_helper(uart_getc())) break;
			uint8_t i;
			if (l_decode_helper(buf, i)) break;
    16ea:	be 01       	movw	r22, r28
    16ec:	6f 5d       	subi	r22, 0xDF	; 223
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	ce 01       	movw	r24, r28
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	0d d7       	rcall	.+3610   	; 0x2510 <__TEXT_REGION_LENGTH__+0x510>
    16f6:	81 11       	cpse	r24, r1
    16f8:	11 cf       	rjmp	.-478    	; 0x151c <main+0x8de>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    16fa:	89 a1       	ldd	r24, Y+33	; 0x21
    16fc:	80 31       	cpi	r24, 0x10	; 16
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <main+0xac4>
    1700:	e3 ce       	rjmp	.-570    	; 0x14c8 <main+0x88a>
    1702:	af e9       	ldi	r26, 0x9F	; 159
    1704:	bf e0       	ldi	r27, 0x0F	; 15
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <main+0xac8>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <main+0xace>
    170c:	00 00       	nop
			if (arg_check_helper(uart_getc())) break;
			uint8_t i;
			if (l_decode_helper(buf, i)) break;
			if (check_index_helper(i, sizeof(txt_in1))) break;
			_delay_ms(1);
			unsigned int c = uart_getc();
    170e:	6a d8       	rcall	.-3884   	; 0x7e4 <_Z9uart_getcv>
    1710:	fe 01       	movw	r30, r28
    1712:	31 96       	adiw	r30, 0x01	; 1
    1714:	6f 01       	movw	r12, r30
			uint8_t j = 0;
    1716:	10 e0       	ldi	r17, 0x00	; 0
			while ((static_cast<char>(c) != '\r') && (c != UART_NO_DATA))
    1718:	8d 30       	cpi	r24, 0x0D	; 13
    171a:	b1 f0       	breq	.+44     	; 0x1748 <main+0xb0a>
    171c:	81 15       	cp	r24, r1
    171e:	f1 e0       	ldi	r31, 0x01	; 1
    1720:	9f 07       	cpc	r25, r31
    1722:	91 f0       	breq	.+36     	; 0x1748 <main+0xb0a>
			{
				buf[j++] = static_cast<char>(c);
    1724:	1f 5f       	subi	r17, 0xFF	; 255
    1726:	d6 01       	movw	r26, r12
    1728:	8d 93       	st	X+, r24
    172a:	6d 01       	movw	r12, r26
				if (j == sizeof(txt_in1))
    172c:	10 31       	cpi	r17, 0x10	; 16
    172e:	21 f4       	brne	.+8      	; 0x1738 <main+0xafa>
				{
					reportError(PSTR_L("Too long argument"));
    1730:	87 e2       	ldi	r24, 0x27	; 39
    1732:	9e e1       	ldi	r25, 0x1E	; 30
    1734:	57 d5       	rcall	.+2734   	; 0x21e4 <__TEXT_REGION_LENGTH__+0x1e4>
    1736:	08 c0       	rjmp	.+16     	; 0x1748 <main+0xb0a>
    1738:	ef e9       	ldi	r30, 0x9F	; 159
    173a:	ff e0       	ldi	r31, 0x0F	; 15
    173c:	31 97       	sbiw	r30, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <main+0xafe>
    1740:	00 c0       	rjmp	.+0      	; 0x1742 <main+0xb04>
    1742:	00 00       	nop
					break;
				}
				_delay_ms(1);
				c = uart_getc();
    1744:	4f d8       	rcall	.-3938   	; 0x7e4 <_Z9uart_getcv>
    1746:	e8 cf       	rjmp	.-48     	; 0x1718 <main+0xada>
    1748:	8f e9       	ldi	r24, 0x9F	; 159
    174a:	9f e0       	ldi	r25, 0x0F	; 15
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <main+0xb0e>
    1750:	00 c0       	rjmp	.+0      	; 0x1752 <main+0xb14>
    1752:	00 00       	nop
			}
			_delay_ms(1);
			if (static_cast<char>(uart_peek()) == '\n') uart_getc();
    1754:	2d d8       	rcall	.-4006   	; 0x7b0 <_Z9uart_peekv>
    1756:	8a 30       	cpi	r24, 0x0A	; 10
    1758:	09 f4       	brne	.+2      	; 0x175c <main+0xb1e>
    175a:	44 d8       	rcall	.-3960   	; 0x7e4 <_Z9uart_getcv>
			buf[j++] = '\0';
    175c:	e1 e0       	ldi	r30, 0x01	; 1
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	ec 0f       	add	r30, r28
    1762:	fd 1f       	adc	r31, r29
    1764:	e1 0f       	add	r30, r17
    1766:	f1 1d       	adc	r31, r1
    1768:	10 82       	st	Z, r1
			eeprom_update_block((void*)buf, (void*)l_switch_helper(a, i), j);
    176a:	1f 5f       	subi	r17, 0xFF	; 255
    176c:	41 2f       	mov	r20, r17
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	e9 a1       	ldd	r30, Y+33	; 0x21
    1772:	f0 e0       	ldi	r31, 0x00	; 0
}

//Returns EEPROM pointers to the name of specified (type + index) I/O-entity
uint8_t* l_switch_helper(char a, uint8_t i)
{
	switch (a)
    1774:	0f 34       	cpi	r16, 0x4F	; 79
    1776:	51 f0       	breq	.+20     	; 0x178c <main+0xb4e>
    1778:	04 35       	cpi	r16, 0x54	; 84
    177a:	91 f4       	brne	.+36     	; 0x17a0 <main+0xb62>
	{
		case 'T':
		return pgm_read_EEM_P(ds_names[i]);
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	e4 56       	subi	r30, 0x64	; 100
    1782:	f1 4e       	sbci	r31, 0xE1	; 225
    1784:	85 91       	lpm	r24, Z+
    1786:	94 91       	lpm	r25, Z
    1788:	bc 01       	movw	r22, r24
    178a:	15 c0       	rjmp	.+42     	; 0x17b6 <main+0xb78>
		case 'O':
		return output_pins[i].Text;
    178c:	26 e0       	ldi	r18, 0x06	; 6
    178e:	2e 9f       	mul	r18, r30
    1790:	c0 01       	movw	r24, r0
    1792:	2f 9f       	mul	r18, r31
    1794:	90 0d       	add	r25, r0
    1796:	11 24       	eor	r1, r1
    1798:	fc 01       	movw	r30, r24
    179a:	e9 5b       	subi	r30, 0xB9	; 185
    179c:	fe 4f       	sbci	r31, 0xFE	; 254
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <main+0xb74>
		case 'I':
		default:
		return input_pins[i].Text;
    17a0:	26 e0       	ldi	r18, 0x06	; 6
    17a2:	2e 9f       	mul	r18, r30
    17a4:	c0 01       	movw	r24, r0
    17a6:	2f 9f       	mul	r18, r31
    17a8:	90 0d       	add	r25, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	fc 01       	movw	r30, r24
    17ae:	eb 59       	subi	r30, 0x9B	; 155
    17b0:	fe 4f       	sbci	r31, 0xFE	; 254
    17b2:	63 81       	ldd	r22, Z+3	; 0x03
    17b4:	74 81       	ldd	r23, Z+4	; 0x04
				c = uart_getc();
			}
			_delay_ms(1);
			if (static_cast<char>(uart_peek()) == '\n') uart_getc();
			buf[j++] = '\0';
			eeprom_update_block((void*)buf, (void*)l_switch_helper(a, i), j);
    17b6:	ce 01       	movw	r24, r28
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	35 d1       	rcall	.+618    	; 0x1a26 <eeprom_update_block>
    17bc:	ac ce       	rjmp	.-680    	; 0x1516 <main+0x8d8>
			if (!isNumeric(buf, arraySize(buf)))
			{
				reportError(PSTR_L("Out of range"));
				break;
			}
			if (static_cast<char>(c) == 'T')
    17be:	04 35       	cpi	r16, 0x54	; 84
    17c0:	e1 f4       	brne	.+56     	; 0x17fa <main+0xbbc>
			{
				int8_t n = decodeInt(buf);
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	a3 d4       	rcall	.+2374   	; 0x210e <__TEXT_REGION_LENGTH__+0x10e>
}

//Checks if index value is inside supported range.
bool check_index_helper(int8_t val, uint8_t size, bool msg)
{
	if ((val < 0) || (val >= size))
    17c8:	87 fd       	sbrc	r24, 7
    17ca:	7e ce       	rjmp	.-772    	; 0x14c8 <main+0x88a>
    17cc:	08 2e       	mov	r0, r24
    17ce:	00 0c       	add	r0, r0
    17d0:	99 0b       	sbc	r25, r25
    17d2:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <_ZL8ow_count>
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	82 17       	cp	r24, r18
    17da:	93 07       	cpc	r25, r19
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <main+0xba2>
    17de:	74 ce       	rjmp	.-792    	; 0x14c8 <main+0x88a>
			}
			if (static_cast<char>(c) == 'T')
			{
				int8_t n = decodeInt(buf);
				if (check_index_helper(n, ow_count)) break;
				uart_puts(itoa(temperatures[n], buf, 10));
    17e0:	fc 01       	movw	r30, r24
    17e2:	ee 51       	subi	r30, 0x1E	; 30
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	4a e0       	ldi	r20, 0x0A	; 10
    17ea:	be 01       	movw	r22, r28
    17ec:	6f 5f       	subi	r22, 0xFF	; 255
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	08 2e       	mov	r0, r24
    17f2:	00 0c       	add	r0, r0
    17f4:	99 0b       	sbc	r25, r25
    17f6:	cc d0       	rcall	.+408    	; 0x1990 <__itoa_ncheck>
    17f8:	90 ce       	rjmp	.-736    	; 0x151a <main+0x8dc>
			}
			else
			{
				intToBit(input_state_buf, buf);
    17fa:	be 01       	movw	r22, r28
    17fc:	6f 5f       	subi	r22, 0xFF	; 255
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <_ZL15input_state_buf>
    1804:	c4 d4       	rcall	.+2440   	; 0x218e <__TEXT_REGION_LENGTH__+0x18e>
				uart_puts(buf);
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	96 d7       	rcall	.+3884   	; 0x2738 <__TEXT_REGION_LENGTH__+0x738>
				uart_putc(':');
    180c:	8a e3       	ldi	r24, 0x3A	; 58
    180e:	75 d7       	rcall	.+3818   	; 0x26fa <__TEXT_REGION_LENGTH__+0x6fa>
				intToBit(output_compare_buf, buf);
    1810:	be 01       	movw	r22, r28
    1812:	6f 5f       	subi	r22, 0xFF	; 255
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
    1816:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZL18output_compare_buf.lto_priv.28>
    181a:	34 ce       	rjmp	.-920    	; 0x1484 <main+0x846>
			{
				reportError(PSTR_L("Missing argument"));
				break;
			}
			bool eep = false;
			switch (buf[i + 1])
    181c:	e2 e0       	ldi	r30, 0x02	; 2
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	ec 0f       	add	r30, r28
    1822:	fd 1f       	adc	r31, r29
    1824:	e0 0f       	add	r30, r16
    1826:	f1 1d       	adc	r31, r1
    1828:	80 81       	ld	r24, Z
    182a:	81 33       	cpi	r24, 0x31	; 49
    182c:	91 f1       	breq	.+100    	; 0x1892 <main+0xc54>
    182e:	60 f4       	brcc	.+24     	; 0x1848 <main+0xc0a>
    1830:	80 33       	cpi	r24, 0x30	; 48
    1832:	89 f1       	breq	.+98     	; 0x1896 <main+0xc58>
					eep = true;
				case '0':
					actuate(l, false); //Set determined state
				break;
				default:
					actuate(output_compare_buf ^ BVO(l)); //Toggle
    1834:	c7 01       	movw	r24, r14
    1836:	01 c0       	rjmp	.+2      	; 0x183a <main+0xbfc>
    1838:	88 0f       	add	r24, r24
    183a:	1a 95       	dec	r17
    183c:	ea f7       	brpl	.-6      	; 0x1838 <main+0xbfa>
    183e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <_ZL18output_compare_buf.lto_priv.28>
    1842:	89 27       	eor	r24, r25
    1844:	de d6       	rcall	.+3516   	; 0x2602 <__TEXT_REGION_LENGTH__+0x602>
    1846:	67 ce       	rjmp	.-818    	; 0x1516 <main+0x8d8>
			{
				reportError(PSTR_L("Missing argument"));
				break;
			}
			bool eep = false;
			switch (buf[i + 1])
    1848:	86 34       	cpi	r24, 0x46	; 70
    184a:	f1 f4       	brne	.+60     	; 0x1888 <main+0xc4a>
					eep = true;
				case '1':
					actuate(l, true); //Set determined state
				break;
				case 'F':
					eep = true;
    184c:	01 e0       	ldi	r16, 0x01	; 1
				case '0':
					actuate(l, false); //Set determined state
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	81 2f       	mov	r24, r17
    1852:	a5 d6       	rcall	.+3402   	; 0x259e <__TEXT_REGION_LENGTH__+0x59e>
				break;
				default:
					actuate(output_compare_buf ^ BVO(l)); //Toggle
				break;
			}
			if (eep)
    1854:	00 23       	and	r16, r16
    1856:	09 f4       	brne	.+2      	; 0x185a <main+0xc1c>
    1858:	5e ce       	rjmp	.-836    	; 0x1516 <main+0x8d8>
			{
				outputs_t temp = EEPROM_READ_OUTPUTS(output_last);
    185a:	81 e7       	ldi	r24, 0x71	; 113
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	db d0       	rcall	.+438    	; 0x1a16 <eeprom_read_byte>
				if (output_compare_buf & BVO(l))
    1860:	b7 01       	movw	r22, r14
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <main+0xc2a>
    1864:	66 0f       	add	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	1a 95       	dec	r17
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <main+0xc26>
    186c:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZL18output_compare_buf.lto_priv.28>
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	26 23       	and	r18, r22
    1874:	37 23       	and	r19, r23
    1876:	23 2b       	or	r18, r19
    1878:	11 f0       	breq	.+4      	; 0x187e <main+0xc40>
				{
					temp |= BVO(l);
    187a:	68 2b       	or	r22, r24
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <main+0xc44>
				}
				else
				{
					temp &= static_cast<outputs_t>(~BVO(l));
    187e:	60 95       	com	r22
    1880:	68 23       	and	r22, r24
				}
				EEPROM_WRITE_OUTPUTS(output_last, temp); //Save (only user-initiated output control is saved)
    1882:	81 e7       	ldi	r24, 0x71	; 113
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	46 ce       	rjmp	.-884    	; 0x1514 <main+0x8d6>
			{
				reportError(PSTR_L("Missing argument"));
				break;
			}
			bool eep = false;
			switch (buf[i + 1])
    1888:	8e 34       	cpi	r24, 0x4E	; 78
    188a:	a1 f6       	brne	.-88     	; 0x1834 <main+0xbf6>
			{
				case 'N':
					eep = true;
    188c:	01 e0       	ldi	r16, 0x01	; 1
				case '1':
					actuate(l, true); //Set determined state
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	df cf       	rjmp	.-66     	; 0x1850 <main+0xc12>
			else
			{
				reportError(PSTR_L("Missing argument"));
				break;
			}
			bool eep = false;
    1892:	00 e0       	ldi	r16, 0x00	; 0
    1894:	fc cf       	rjmp	.-8      	; 0x188e <main+0xc50>
    1896:	00 e0       	ldi	r16, 0x00	; 0
    1898:	da cf       	rjmp	.-76     	; 0x184e <main+0xc10>

0000189a <_GLOBAL__sub_I_is_first_run>:
#if ENABLE_EXTRA_FEATURES
, annot_t txt
#endif
) : ddrReg(&ddr_reg), bitMask(BV8(mask))
#if ENABLE_EXTRA_FEATURES
, Text(txt)
    189a:	e5 e6       	ldi	r30, 0x65	; 101
    189c:	f1 e0       	ldi	r31, 0x01	; 1
    189e:	84 e3       	ldi	r24, 0x34	; 52
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	62 83       	std	Z+2, r22	; 0x02
    18aa:	27 ec       	ldi	r18, 0xC7	; 199
    18ac:	31 e0       	ldi	r19, 0x01	; 1
    18ae:	34 83       	std	Z+4, r19	; 0x04
    18b0:	23 83       	std	Z+3, r18	; 0x03
    18b2:	97 83       	std	Z+7, r25	; 0x07
    18b4:	86 83       	std	Z+6, r24	; 0x06
    18b6:	22 e0       	ldi	r18, 0x02	; 2
    18b8:	20 87       	std	Z+8, r18	; 0x08
    18ba:	27 eb       	ldi	r18, 0xB7	; 183
    18bc:	31 e0       	ldi	r19, 0x01	; 1
    18be:	32 87       	std	Z+10, r19	; 0x0a
    18c0:	21 87       	std	Z+9, r18	; 0x09
    18c2:	95 87       	std	Z+13, r25	; 0x0d
    18c4:	84 87       	std	Z+12, r24	; 0x0c
    18c6:	54 e0       	ldi	r21, 0x04	; 4
    18c8:	56 87       	std	Z+14, r21	; 0x0e
    18ca:	27 ea       	ldi	r18, 0xA7	; 167
    18cc:	31 e0       	ldi	r19, 0x01	; 1
    18ce:	30 8b       	std	Z+16, r19	; 0x10
    18d0:	27 87       	std	Z+15, r18	; 0x0f
    18d2:	93 8b       	std	Z+19, r25	; 0x13
    18d4:	82 8b       	std	Z+18, r24	; 0x12
    18d6:	28 e0       	ldi	r18, 0x08	; 8
    18d8:	24 8b       	std	Z+20, r18	; 0x14
    18da:	27 e9       	ldi	r18, 0x97	; 151
    18dc:	31 e0       	ldi	r19, 0x01	; 1
    18de:	36 8b       	std	Z+22, r19	; 0x16
    18e0:	25 8b       	std	Z+21, r18	; 0x15
    18e2:	91 8f       	std	Z+25, r25	; 0x19
    18e4:	80 8f       	std	Z+24, r24	; 0x18
    18e6:	40 e1       	ldi	r20, 0x10	; 16
    18e8:	42 8f       	std	Z+26, r20	; 0x1a
    18ea:	27 e8       	ldi	r18, 0x87	; 135
    18ec:	31 e0       	ldi	r19, 0x01	; 1
    18ee:	34 8f       	std	Z+28, r19	; 0x1c
    18f0:	23 8f       	std	Z+27, r18	; 0x1b
    18f2:	97 8f       	std	Z+31, r25	; 0x1f
    18f4:	86 8f       	std	Z+30, r24	; 0x1e
    18f6:	20 e2       	ldi	r18, 0x20	; 32
    18f8:	20 a3       	std	Z+32, r18	; 0x20
    18fa:	87 e7       	ldi	r24, 0x77	; 119
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	92 a3       	std	Z+34, r25	; 0x22
    1900:	81 a3       	std	Z+33, r24	; 0x21
    1902:	81 e3       	ldi	r24, 0x31	; 49
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	95 a3       	std	Z+37, r25	; 0x25
    1908:	84 a3       	std	Z+36, r24	; 0x24
    190a:	26 a3       	std	Z+38, r18	; 0x26
    190c:	27 e6       	ldi	r18, 0x67	; 103
    190e:	31 e0       	ldi	r19, 0x01	; 1
    1910:	30 a7       	std	Z+40, r19	; 0x28
    1912:	27 a3       	std	Z+39, r18	; 0x27
    1914:	e7 e4       	ldi	r30, 0x47	; 71
    1916:	f1 e0       	ldi	r31, 0x01	; 1
    1918:	27 e3       	ldi	r18, 0x37	; 55
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	31 83       	std	Z+1, r19	; 0x01
    191e:	20 83       	st	Z, r18
    1920:	42 83       	std	Z+2, r20	; 0x02
    1922:	a7 e5       	ldi	r26, 0x57	; 87
    1924:	b1 e0       	ldi	r27, 0x01	; 1
    1926:	b4 83       	std	Z+4, r27	; 0x04
    1928:	a3 83       	std	Z+3, r26	; 0x03
    192a:	37 83       	std	Z+7, r19	; 0x07
    192c:	26 83       	std	Z+6, r18	; 0x06
    192e:	60 87       	std	Z+8, r22	; 0x08
    1930:	67 e4       	ldi	r22, 0x47	; 71
    1932:	71 e0       	ldi	r23, 0x01	; 1
    1934:	72 87       	std	Z+10, r23	; 0x0a
    1936:	61 87       	std	Z+9, r22	; 0x09
    1938:	95 87       	std	Z+13, r25	; 0x0d
    193a:	84 87       	std	Z+12, r24	; 0x0c
    193c:	60 e8       	ldi	r22, 0x80	; 128
    193e:	66 87       	std	Z+14, r22	; 0x0e
    1940:	67 e3       	ldi	r22, 0x37	; 55
    1942:	71 e0       	ldi	r23, 0x01	; 1
    1944:	70 8b       	std	Z+16, r23	; 0x10
    1946:	67 87       	std	Z+15, r22	; 0x0f
    1948:	93 8b       	std	Z+19, r25	; 0x13
    194a:	82 8b       	std	Z+18, r24	; 0x12
    194c:	60 e4       	ldi	r22, 0x40	; 64
    194e:	64 8b       	std	Z+20, r22	; 0x14
    1950:	67 e2       	ldi	r22, 0x27	; 39
    1952:	71 e0       	ldi	r23, 0x01	; 1
    1954:	76 8b       	std	Z+22, r23	; 0x16
    1956:	65 8b       	std	Z+21, r22	; 0x15
    1958:	91 8f       	std	Z+25, r25	; 0x19
    195a:	80 8f       	std	Z+24, r24	; 0x18
    195c:	42 8f       	std	Z+26, r20	; 0x1a
    195e:	87 e1       	ldi	r24, 0x17	; 23
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	94 8f       	std	Z+28, r25	; 0x1c
    1964:	83 8f       	std	Z+27, r24	; 0x1b
    1966:	e1 e4       	ldi	r30, 0x41	; 65
    1968:	f1 e0       	ldi	r31, 0x01	; 1
    196a:	31 83       	std	Z+1, r19	; 0x01
    196c:	20 83       	st	Z, r18
    196e:	52 83       	std	Z+2, r21	; 0x02
    1970:	87 e0       	ldi	r24, 0x07	; 7
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	94 83       	std	Z+4, r25	; 0x04
    1976:	83 83       	std	Z+3, r24	; 0x03
    1978:	08 95       	ret

0000197a <strnlen>:
    197a:	fc 01       	movw	r30, r24
    197c:	61 50       	subi	r22, 0x01	; 1
    197e:	70 40       	sbci	r23, 0x00	; 0
    1980:	01 90       	ld	r0, Z+
    1982:	01 10       	cpse	r0, r1
    1984:	d8 f7       	brcc	.-10     	; 0x197c <strnlen+0x2>
    1986:	80 95       	com	r24
    1988:	90 95       	com	r25
    198a:	8e 0f       	add	r24, r30
    198c:	9f 1f       	adc	r25, r31
    198e:	08 95       	ret

00001990 <__itoa_ncheck>:
    1990:	bb 27       	eor	r27, r27
    1992:	4a 30       	cpi	r20, 0x0A	; 10
    1994:	31 f4       	brne	.+12     	; 0x19a2 <__itoa_ncheck+0x12>
    1996:	99 23       	and	r25, r25
    1998:	22 f4       	brpl	.+8      	; 0x19a2 <__itoa_ncheck+0x12>
    199a:	bd e2       	ldi	r27, 0x2D	; 45
    199c:	90 95       	com	r25
    199e:	81 95       	neg	r24
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <__utoa_common>

000019a4 <__utoa_ncheck>:
    19a4:	bb 27       	eor	r27, r27

000019a6 <__utoa_common>:
    19a6:	fb 01       	movw	r30, r22
    19a8:	55 27       	eor	r21, r21
    19aa:	aa 27       	eor	r26, r26
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	aa 1f       	adc	r26, r26
    19b2:	a4 17       	cp	r26, r20
    19b4:	10 f0       	brcs	.+4      	; 0x19ba <__utoa_common+0x14>
    19b6:	a4 1b       	sub	r26, r20
    19b8:	83 95       	inc	r24
    19ba:	50 51       	subi	r21, 0x10	; 16
    19bc:	b9 f7       	brne	.-18     	; 0x19ac <__utoa_common+0x6>
    19be:	a0 5d       	subi	r26, 0xD0	; 208
    19c0:	aa 33       	cpi	r26, 0x3A	; 58
    19c2:	08 f0       	brcs	.+2      	; 0x19c6 <__utoa_common+0x20>
    19c4:	a9 5d       	subi	r26, 0xD9	; 217
    19c6:	a1 93       	st	Z+, r26
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	79 f7       	brne	.-34     	; 0x19aa <__utoa_common+0x4>
    19cc:	b1 11       	cpse	r27, r1
    19ce:	b1 93       	st	Z+, r27
    19d0:	11 92       	st	Z+, r1
    19d2:	cb 01       	movw	r24, r22
    19d4:	00 c0       	rjmp	.+0      	; 0x19d6 <strrev>

000019d6 <strrev>:
    19d6:	dc 01       	movw	r26, r24
    19d8:	fc 01       	movw	r30, r24
    19da:	67 2f       	mov	r22, r23
    19dc:	71 91       	ld	r23, Z+
    19de:	77 23       	and	r23, r23
    19e0:	e1 f7       	brne	.-8      	; 0x19da <strrev+0x4>
    19e2:	32 97       	sbiw	r30, 0x02	; 2
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <strrev+0x18>
    19e6:	7c 91       	ld	r23, X
    19e8:	6d 93       	st	X+, r22
    19ea:	70 83       	st	Z, r23
    19ec:	62 91       	ld	r22, -Z
    19ee:	ae 17       	cp	r26, r30
    19f0:	bf 07       	cpc	r27, r31
    19f2:	c8 f3       	brcs	.-14     	; 0x19e6 <strrev+0x10>
    19f4:	08 95       	ret

000019f6 <eeprom_read_block>:
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22

000019fa <eeprom_read_blraw>:
    19fa:	fc 01       	movw	r30, r24
    19fc:	e1 99       	sbic	0x1c, 1	; 28
    19fe:	fe cf       	rjmp	.-4      	; 0x19fc <eeprom_read_blraw+0x2>
    1a00:	06 c0       	rjmp	.+12     	; 0x1a0e <eeprom_read_blraw+0x14>
    1a02:	ff bb       	out	0x1f, r31	; 31
    1a04:	ee bb       	out	0x1e, r30	; 30
    1a06:	e0 9a       	sbi	0x1c, 0	; 28
    1a08:	31 96       	adiw	r30, 0x01	; 1
    1a0a:	0d b2       	in	r0, 0x1d	; 29
    1a0c:	0d 92       	st	X+, r0
    1a0e:	41 50       	subi	r20, 0x01	; 1
    1a10:	50 40       	sbci	r21, 0x00	; 0
    1a12:	b8 f7       	brcc	.-18     	; 0x1a02 <eeprom_read_blraw+0x8>
    1a14:	08 95       	ret

00001a16 <eeprom_read_byte>:
    1a16:	e1 99       	sbic	0x1c, 1	; 28
    1a18:	fe cf       	rjmp	.-4      	; 0x1a16 <eeprom_read_byte>
    1a1a:	9f bb       	out	0x1f, r25	; 31
    1a1c:	8e bb       	out	0x1e, r24	; 30
    1a1e:	e0 9a       	sbi	0x1c, 0	; 28
    1a20:	99 27       	eor	r25, r25
    1a22:	8d b3       	in	r24, 0x1d	; 29
    1a24:	08 95       	ret

00001a26 <eeprom_update_block>:
    1a26:	dc 01       	movw	r26, r24
    1a28:	a4 0f       	add	r26, r20
    1a2a:	b5 1f       	adc	r27, r21
    1a2c:	41 50       	subi	r20, 0x01	; 1
    1a2e:	50 40       	sbci	r21, 0x00	; 0
    1a30:	40 f0       	brcs	.+16     	; 0x1a42 <eeprom_update_block+0x1c>
    1a32:	cb 01       	movw	r24, r22
    1a34:	84 0f       	add	r24, r20
    1a36:	95 1f       	adc	r25, r21
    1a38:	2e 91       	ld	r18, -X
    1a3a:	05 d0       	rcall	.+10     	; 0x1a46 <eeprom_update_r18>
    1a3c:	41 50       	subi	r20, 0x01	; 1
    1a3e:	50 40       	sbci	r21, 0x00	; 0
    1a40:	d8 f7       	brcc	.-10     	; 0x1a38 <eeprom_update_block+0x12>
    1a42:	08 95       	ret

00001a44 <eeprom_update_byte>:
    1a44:	26 2f       	mov	r18, r22

00001a46 <eeprom_update_r18>:
    1a46:	e1 99       	sbic	0x1c, 1	; 28
    1a48:	fe cf       	rjmp	.-4      	; 0x1a46 <eeprom_update_r18>
    1a4a:	9f bb       	out	0x1f, r25	; 31
    1a4c:	8e bb       	out	0x1e, r24	; 30
    1a4e:	e0 9a       	sbi	0x1c, 0	; 28
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	0d b2       	in	r0, 0x1d	; 29
    1a54:	02 16       	cp	r0, r18
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <eeprom_update_r18+0x1e>
    1a58:	2d bb       	out	0x1d, r18	; 29
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	e2 9a       	sbi	0x1c, 2	; 28
    1a60:	e1 9a       	sbi	0x1c, 1	; 28
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	08 95       	ret

00001a66 <eeprom_write_byte>:
    1a66:	26 2f       	mov	r18, r22

00001a68 <eeprom_write_r18>:
    1a68:	e1 99       	sbic	0x1c, 1	; 28
    1a6a:	fe cf       	rjmp	.-4      	; 0x1a68 <eeprom_write_r18>
    1a6c:	9f bb       	out	0x1f, r25	; 31
    1a6e:	8e bb       	out	0x1e, r24	; 30
    1a70:	2d bb       	out	0x1d, r18	; 29
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	e2 9a       	sbi	0x1c, 2	; 28
    1a78:	e1 9a       	sbi	0x1c, 1	; 28
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	08 95       	ret

00001a80 <__subsf3>:
    1a80:	50 58       	subi	r21, 0x80	; 128

00001a82 <__addsf3>:
    1a82:	bb 27       	eor	r27, r27
    1a84:	aa 27       	eor	r26, r26
    1a86:	0e d0       	rcall	.+28     	; 0x1aa4 <__addsf3x>
    1a88:	e5 c0       	rjmp	.+458    	; 0x1c54 <__fp_round>
    1a8a:	d6 d0       	rcall	.+428    	; 0x1c38 <__fp_pscA>
    1a8c:	30 f0       	brcs	.+12     	; 0x1a9a <__addsf3+0x18>
    1a8e:	db d0       	rcall	.+438    	; 0x1c46 <__fp_pscB>
    1a90:	20 f0       	brcs	.+8      	; 0x1a9a <__addsf3+0x18>
    1a92:	31 f4       	brne	.+12     	; 0x1aa0 <__addsf3+0x1e>
    1a94:	9f 3f       	cpi	r25, 0xFF	; 255
    1a96:	11 f4       	brne	.+4      	; 0x1a9c <__addsf3+0x1a>
    1a98:	1e f4       	brtc	.+6      	; 0x1aa0 <__addsf3+0x1e>
    1a9a:	cb c0       	rjmp	.+406    	; 0x1c32 <__fp_nan>
    1a9c:	0e f4       	brtc	.+2      	; 0x1aa0 <__addsf3+0x1e>
    1a9e:	e0 95       	com	r30
    1aa0:	e7 fb       	bst	r30, 7
    1aa2:	c1 c0       	rjmp	.+386    	; 0x1c26 <__fp_inf>

00001aa4 <__addsf3x>:
    1aa4:	e9 2f       	mov	r30, r25
    1aa6:	e7 d0       	rcall	.+462    	; 0x1c76 <__fp_split3>
    1aa8:	80 f3       	brcs	.-32     	; 0x1a8a <__addsf3+0x8>
    1aaa:	ba 17       	cp	r27, r26
    1aac:	62 07       	cpc	r22, r18
    1aae:	73 07       	cpc	r23, r19
    1ab0:	84 07       	cpc	r24, r20
    1ab2:	95 07       	cpc	r25, r21
    1ab4:	18 f0       	brcs	.+6      	; 0x1abc <__addsf3x+0x18>
    1ab6:	71 f4       	brne	.+28     	; 0x1ad4 <__addsf3x+0x30>
    1ab8:	9e f5       	brtc	.+102    	; 0x1b20 <__addsf3x+0x7c>
    1aba:	ff c0       	rjmp	.+510    	; 0x1cba <__fp_zero>
    1abc:	0e f4       	brtc	.+2      	; 0x1ac0 <__addsf3x+0x1c>
    1abe:	e0 95       	com	r30
    1ac0:	0b 2e       	mov	r0, r27
    1ac2:	ba 2f       	mov	r27, r26
    1ac4:	a0 2d       	mov	r26, r0
    1ac6:	0b 01       	movw	r0, r22
    1ac8:	b9 01       	movw	r22, r18
    1aca:	90 01       	movw	r18, r0
    1acc:	0c 01       	movw	r0, r24
    1ace:	ca 01       	movw	r24, r20
    1ad0:	a0 01       	movw	r20, r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	ff 27       	eor	r31, r31
    1ad6:	59 1b       	sub	r21, r25
    1ad8:	99 f0       	breq	.+38     	; 0x1b00 <__addsf3x+0x5c>
    1ada:	59 3f       	cpi	r21, 0xF9	; 249
    1adc:	50 f4       	brcc	.+20     	; 0x1af2 <__addsf3x+0x4e>
    1ade:	50 3e       	cpi	r21, 0xE0	; 224
    1ae0:	68 f1       	brcs	.+90     	; 0x1b3c <__addsf3x+0x98>
    1ae2:	1a 16       	cp	r1, r26
    1ae4:	f0 40       	sbci	r31, 0x00	; 0
    1ae6:	a2 2f       	mov	r26, r18
    1ae8:	23 2f       	mov	r18, r19
    1aea:	34 2f       	mov	r19, r20
    1aec:	44 27       	eor	r20, r20
    1aee:	58 5f       	subi	r21, 0xF8	; 248
    1af0:	f3 cf       	rjmp	.-26     	; 0x1ad8 <__addsf3x+0x34>
    1af2:	46 95       	lsr	r20
    1af4:	37 95       	ror	r19
    1af6:	27 95       	ror	r18
    1af8:	a7 95       	ror	r26
    1afa:	f0 40       	sbci	r31, 0x00	; 0
    1afc:	53 95       	inc	r21
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__addsf3x+0x4e>
    1b00:	7e f4       	brtc	.+30     	; 0x1b20 <__addsf3x+0x7c>
    1b02:	1f 16       	cp	r1, r31
    1b04:	ba 0b       	sbc	r27, r26
    1b06:	62 0b       	sbc	r22, r18
    1b08:	73 0b       	sbc	r23, r19
    1b0a:	84 0b       	sbc	r24, r20
    1b0c:	ba f0       	brmi	.+46     	; 0x1b3c <__addsf3x+0x98>
    1b0e:	91 50       	subi	r25, 0x01	; 1
    1b10:	a1 f0       	breq	.+40     	; 0x1b3a <__addsf3x+0x96>
    1b12:	ff 0f       	add	r31, r31
    1b14:	bb 1f       	adc	r27, r27
    1b16:	66 1f       	adc	r22, r22
    1b18:	77 1f       	adc	r23, r23
    1b1a:	88 1f       	adc	r24, r24
    1b1c:	c2 f7       	brpl	.-16     	; 0x1b0e <__addsf3x+0x6a>
    1b1e:	0e c0       	rjmp	.+28     	; 0x1b3c <__addsf3x+0x98>
    1b20:	ba 0f       	add	r27, r26
    1b22:	62 1f       	adc	r22, r18
    1b24:	73 1f       	adc	r23, r19
    1b26:	84 1f       	adc	r24, r20
    1b28:	48 f4       	brcc	.+18     	; 0x1b3c <__addsf3x+0x98>
    1b2a:	87 95       	ror	r24
    1b2c:	77 95       	ror	r23
    1b2e:	67 95       	ror	r22
    1b30:	b7 95       	ror	r27
    1b32:	f7 95       	ror	r31
    1b34:	9e 3f       	cpi	r25, 0xFE	; 254
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <__addsf3x+0x96>
    1b38:	b3 cf       	rjmp	.-154    	; 0x1aa0 <__addsf3+0x1e>
    1b3a:	93 95       	inc	r25
    1b3c:	88 0f       	add	r24, r24
    1b3e:	08 f0       	brcs	.+2      	; 0x1b42 <__addsf3x+0x9e>
    1b40:	99 27       	eor	r25, r25
    1b42:	ee 0f       	add	r30, r30
    1b44:	97 95       	ror	r25
    1b46:	87 95       	ror	r24
    1b48:	08 95       	ret

00001b4a <__fixsfsi>:
    1b4a:	04 d0       	rcall	.+8      	; 0x1b54 <__fixunssfsi>
    1b4c:	68 94       	set
    1b4e:	b1 11       	cpse	r27, r1
    1b50:	b5 c0       	rjmp	.+362    	; 0x1cbc <__fp_szero>
    1b52:	08 95       	ret

00001b54 <__fixunssfsi>:
    1b54:	98 d0       	rcall	.+304    	; 0x1c86 <__fp_splitA>
    1b56:	88 f0       	brcs	.+34     	; 0x1b7a <__fixunssfsi+0x26>
    1b58:	9f 57       	subi	r25, 0x7F	; 127
    1b5a:	90 f0       	brcs	.+36     	; 0x1b80 <__fixunssfsi+0x2c>
    1b5c:	b9 2f       	mov	r27, r25
    1b5e:	99 27       	eor	r25, r25
    1b60:	b7 51       	subi	r27, 0x17	; 23
    1b62:	a0 f0       	brcs	.+40     	; 0x1b8c <__fixunssfsi+0x38>
    1b64:	d1 f0       	breq	.+52     	; 0x1b9a <__fixunssfsi+0x46>
    1b66:	66 0f       	add	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	1a f0       	brmi	.+6      	; 0x1b76 <__fixunssfsi+0x22>
    1b70:	ba 95       	dec	r27
    1b72:	c9 f7       	brne	.-14     	; 0x1b66 <__fixunssfsi+0x12>
    1b74:	12 c0       	rjmp	.+36     	; 0x1b9a <__fixunssfsi+0x46>
    1b76:	b1 30       	cpi	r27, 0x01	; 1
    1b78:	81 f0       	breq	.+32     	; 0x1b9a <__fixunssfsi+0x46>
    1b7a:	9f d0       	rcall	.+318    	; 0x1cba <__fp_zero>
    1b7c:	b1 e0       	ldi	r27, 0x01	; 1
    1b7e:	08 95       	ret
    1b80:	9c c0       	rjmp	.+312    	; 0x1cba <__fp_zero>
    1b82:	67 2f       	mov	r22, r23
    1b84:	78 2f       	mov	r23, r24
    1b86:	88 27       	eor	r24, r24
    1b88:	b8 5f       	subi	r27, 0xF8	; 248
    1b8a:	39 f0       	breq	.+14     	; 0x1b9a <__fixunssfsi+0x46>
    1b8c:	b9 3f       	cpi	r27, 0xF9	; 249
    1b8e:	cc f3       	brlt	.-14     	; 0x1b82 <__fixunssfsi+0x2e>
    1b90:	86 95       	lsr	r24
    1b92:	77 95       	ror	r23
    1b94:	67 95       	ror	r22
    1b96:	b3 95       	inc	r27
    1b98:	d9 f7       	brne	.-10     	; 0x1b90 <__fixunssfsi+0x3c>
    1b9a:	3e f4       	brtc	.+14     	; 0x1baa <__fixunssfsi+0x56>
    1b9c:	90 95       	com	r25
    1b9e:	80 95       	com	r24
    1ba0:	70 95       	com	r23
    1ba2:	61 95       	neg	r22
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	08 95       	ret

00001bac <__floatunsisf>:
    1bac:	e8 94       	clt
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <__floatsisf+0x12>

00001bb0 <__floatsisf>:
    1bb0:	97 fb       	bst	r25, 7
    1bb2:	3e f4       	brtc	.+14     	; 0x1bc2 <__floatsisf+0x12>
    1bb4:	90 95       	com	r25
    1bb6:	80 95       	com	r24
    1bb8:	70 95       	com	r23
    1bba:	61 95       	neg	r22
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	99 23       	and	r25, r25
    1bc4:	a9 f0       	breq	.+42     	; 0x1bf0 <__floatsisf+0x40>
    1bc6:	f9 2f       	mov	r31, r25
    1bc8:	96 e9       	ldi	r25, 0x96	; 150
    1bca:	bb 27       	eor	r27, r27
    1bcc:	93 95       	inc	r25
    1bce:	f6 95       	lsr	r31
    1bd0:	87 95       	ror	r24
    1bd2:	77 95       	ror	r23
    1bd4:	67 95       	ror	r22
    1bd6:	b7 95       	ror	r27
    1bd8:	f1 11       	cpse	r31, r1
    1bda:	f8 cf       	rjmp	.-16     	; 0x1bcc <__floatsisf+0x1c>
    1bdc:	fa f4       	brpl	.+62     	; 0x1c1c <__floatsisf+0x6c>
    1bde:	bb 0f       	add	r27, r27
    1be0:	11 f4       	brne	.+4      	; 0x1be6 <__floatsisf+0x36>
    1be2:	60 ff       	sbrs	r22, 0
    1be4:	1b c0       	rjmp	.+54     	; 0x1c1c <__floatsisf+0x6c>
    1be6:	6f 5f       	subi	r22, 0xFF	; 255
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	8f 4f       	sbci	r24, 0xFF	; 255
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	16 c0       	rjmp	.+44     	; 0x1c1c <__floatsisf+0x6c>
    1bf0:	88 23       	and	r24, r24
    1bf2:	11 f0       	breq	.+4      	; 0x1bf8 <__floatsisf+0x48>
    1bf4:	96 e9       	ldi	r25, 0x96	; 150
    1bf6:	11 c0       	rjmp	.+34     	; 0x1c1a <__floatsisf+0x6a>
    1bf8:	77 23       	and	r23, r23
    1bfa:	21 f0       	breq	.+8      	; 0x1c04 <__floatsisf+0x54>
    1bfc:	9e e8       	ldi	r25, 0x8E	; 142
    1bfe:	87 2f       	mov	r24, r23
    1c00:	76 2f       	mov	r23, r22
    1c02:	05 c0       	rjmp	.+10     	; 0x1c0e <__floatsisf+0x5e>
    1c04:	66 23       	and	r22, r22
    1c06:	71 f0       	breq	.+28     	; 0x1c24 <__floatsisf+0x74>
    1c08:	96 e8       	ldi	r25, 0x86	; 134
    1c0a:	86 2f       	mov	r24, r22
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	2a f0       	brmi	.+10     	; 0x1c1c <__floatsisf+0x6c>
    1c12:	9a 95       	dec	r25
    1c14:	66 0f       	add	r22, r22
    1c16:	77 1f       	adc	r23, r23
    1c18:	88 1f       	adc	r24, r24
    1c1a:	da f7       	brpl	.-10     	; 0x1c12 <__floatsisf+0x62>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	96 95       	lsr	r25
    1c20:	87 95       	ror	r24
    1c22:	97 f9       	bld	r25, 7
    1c24:	08 95       	ret

00001c26 <__fp_inf>:
    1c26:	97 f9       	bld	r25, 7
    1c28:	9f 67       	ori	r25, 0x7F	; 127
    1c2a:	80 e8       	ldi	r24, 0x80	; 128
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	08 95       	ret

00001c32 <__fp_nan>:
    1c32:	9f ef       	ldi	r25, 0xFF	; 255
    1c34:	80 ec       	ldi	r24, 0xC0	; 192
    1c36:	08 95       	ret

00001c38 <__fp_pscA>:
    1c38:	00 24       	eor	r0, r0
    1c3a:	0a 94       	dec	r0
    1c3c:	16 16       	cp	r1, r22
    1c3e:	17 06       	cpc	r1, r23
    1c40:	18 06       	cpc	r1, r24
    1c42:	09 06       	cpc	r0, r25
    1c44:	08 95       	ret

00001c46 <__fp_pscB>:
    1c46:	00 24       	eor	r0, r0
    1c48:	0a 94       	dec	r0
    1c4a:	12 16       	cp	r1, r18
    1c4c:	13 06       	cpc	r1, r19
    1c4e:	14 06       	cpc	r1, r20
    1c50:	05 06       	cpc	r0, r21
    1c52:	08 95       	ret

00001c54 <__fp_round>:
    1c54:	09 2e       	mov	r0, r25
    1c56:	03 94       	inc	r0
    1c58:	00 0c       	add	r0, r0
    1c5a:	11 f4       	brne	.+4      	; 0x1c60 <__fp_round+0xc>
    1c5c:	88 23       	and	r24, r24
    1c5e:	52 f0       	brmi	.+20     	; 0x1c74 <__fp_round+0x20>
    1c60:	bb 0f       	add	r27, r27
    1c62:	40 f4       	brcc	.+16     	; 0x1c74 <__fp_round+0x20>
    1c64:	bf 2b       	or	r27, r31
    1c66:	11 f4       	brne	.+4      	; 0x1c6c <__fp_round+0x18>
    1c68:	60 ff       	sbrs	r22, 0
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <__fp_round+0x20>
    1c6c:	6f 5f       	subi	r22, 0xFF	; 255
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	8f 4f       	sbci	r24, 0xFF	; 255
    1c72:	9f 4f       	sbci	r25, 0xFF	; 255
    1c74:	08 95       	ret

00001c76 <__fp_split3>:
    1c76:	57 fd       	sbrc	r21, 7
    1c78:	90 58       	subi	r25, 0x80	; 128
    1c7a:	44 0f       	add	r20, r20
    1c7c:	55 1f       	adc	r21, r21
    1c7e:	59 f0       	breq	.+22     	; 0x1c96 <__fp_splitA+0x10>
    1c80:	5f 3f       	cpi	r21, 0xFF	; 255
    1c82:	71 f0       	breq	.+28     	; 0x1ca0 <__fp_splitA+0x1a>
    1c84:	47 95       	ror	r20

00001c86 <__fp_splitA>:
    1c86:	88 0f       	add	r24, r24
    1c88:	97 fb       	bst	r25, 7
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <__fp_splitA+0x20>
    1c8e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c90:	79 f0       	breq	.+30     	; 0x1cb0 <__fp_splitA+0x2a>
    1c92:	87 95       	ror	r24
    1c94:	08 95       	ret
    1c96:	12 16       	cp	r1, r18
    1c98:	13 06       	cpc	r1, r19
    1c9a:	14 06       	cpc	r1, r20
    1c9c:	55 1f       	adc	r21, r21
    1c9e:	f2 cf       	rjmp	.-28     	; 0x1c84 <__fp_split3+0xe>
    1ca0:	46 95       	lsr	r20
    1ca2:	f1 df       	rcall	.-30     	; 0x1c86 <__fp_splitA>
    1ca4:	08 c0       	rjmp	.+16     	; 0x1cb6 <__fp_splitA+0x30>
    1ca6:	16 16       	cp	r1, r22
    1ca8:	17 06       	cpc	r1, r23
    1caa:	18 06       	cpc	r1, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	f1 cf       	rjmp	.-30     	; 0x1c92 <__fp_splitA+0xc>
    1cb0:	86 95       	lsr	r24
    1cb2:	71 05       	cpc	r23, r1
    1cb4:	61 05       	cpc	r22, r1
    1cb6:	08 94       	sec
    1cb8:	08 95       	ret

00001cba <__fp_zero>:
    1cba:	e8 94       	clt

00001cbc <__fp_szero>:
    1cbc:	bb 27       	eor	r27, r27
    1cbe:	66 27       	eor	r22, r22
    1cc0:	77 27       	eor	r23, r23
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	97 f9       	bld	r25, 7
    1cc6:	08 95       	ret

00001cc8 <__mulsf3>:
    1cc8:	0b d0       	rcall	.+22     	; 0x1ce0 <__mulsf3x>
    1cca:	c4 cf       	rjmp	.-120    	; 0x1c54 <__fp_round>
    1ccc:	b5 df       	rcall	.-150    	; 0x1c38 <__fp_pscA>
    1cce:	28 f0       	brcs	.+10     	; 0x1cda <__mulsf3+0x12>
    1cd0:	ba df       	rcall	.-140    	; 0x1c46 <__fp_pscB>
    1cd2:	18 f0       	brcs	.+6      	; 0x1cda <__mulsf3+0x12>
    1cd4:	95 23       	and	r25, r21
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <__mulsf3+0x12>
    1cd8:	a6 cf       	rjmp	.-180    	; 0x1c26 <__fp_inf>
    1cda:	ab cf       	rjmp	.-170    	; 0x1c32 <__fp_nan>
    1cdc:	11 24       	eor	r1, r1
    1cde:	ee cf       	rjmp	.-36     	; 0x1cbc <__fp_szero>

00001ce0 <__mulsf3x>:
    1ce0:	ca df       	rcall	.-108    	; 0x1c76 <__fp_split3>
    1ce2:	a0 f3       	brcs	.-24     	; 0x1ccc <__mulsf3+0x4>

00001ce4 <__mulsf3_pse>:
    1ce4:	95 9f       	mul	r25, r21
    1ce6:	d1 f3       	breq	.-12     	; 0x1cdc <__mulsf3+0x14>
    1ce8:	95 0f       	add	r25, r21
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	55 1f       	adc	r21, r21
    1cee:	62 9f       	mul	r22, r18
    1cf0:	f0 01       	movw	r30, r0
    1cf2:	72 9f       	mul	r23, r18
    1cf4:	bb 27       	eor	r27, r27
    1cf6:	f0 0d       	add	r31, r0
    1cf8:	b1 1d       	adc	r27, r1
    1cfa:	63 9f       	mul	r22, r19
    1cfc:	aa 27       	eor	r26, r26
    1cfe:	f0 0d       	add	r31, r0
    1d00:	b1 1d       	adc	r27, r1
    1d02:	aa 1f       	adc	r26, r26
    1d04:	64 9f       	mul	r22, r20
    1d06:	66 27       	eor	r22, r22
    1d08:	b0 0d       	add	r27, r0
    1d0a:	a1 1d       	adc	r26, r1
    1d0c:	66 1f       	adc	r22, r22
    1d0e:	82 9f       	mul	r24, r18
    1d10:	22 27       	eor	r18, r18
    1d12:	b0 0d       	add	r27, r0
    1d14:	a1 1d       	adc	r26, r1
    1d16:	62 1f       	adc	r22, r18
    1d18:	73 9f       	mul	r23, r19
    1d1a:	b0 0d       	add	r27, r0
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	62 1f       	adc	r22, r18
    1d20:	83 9f       	mul	r24, r19
    1d22:	a0 0d       	add	r26, r0
    1d24:	61 1d       	adc	r22, r1
    1d26:	22 1f       	adc	r18, r18
    1d28:	74 9f       	mul	r23, r20
    1d2a:	33 27       	eor	r19, r19
    1d2c:	a0 0d       	add	r26, r0
    1d2e:	61 1d       	adc	r22, r1
    1d30:	23 1f       	adc	r18, r19
    1d32:	84 9f       	mul	r24, r20
    1d34:	60 0d       	add	r22, r0
    1d36:	21 1d       	adc	r18, r1
    1d38:	82 2f       	mov	r24, r18
    1d3a:	76 2f       	mov	r23, r22
    1d3c:	6a 2f       	mov	r22, r26
    1d3e:	11 24       	eor	r1, r1
    1d40:	9f 57       	subi	r25, 0x7F	; 127
    1d42:	50 40       	sbci	r21, 0x00	; 0
    1d44:	8a f0       	brmi	.+34     	; 0x1d68 <__mulsf3_pse+0x84>
    1d46:	e1 f0       	breq	.+56     	; 0x1d80 <__mulsf3_pse+0x9c>
    1d48:	88 23       	and	r24, r24
    1d4a:	4a f0       	brmi	.+18     	; 0x1d5e <__mulsf3_pse+0x7a>
    1d4c:	ee 0f       	add	r30, r30
    1d4e:	ff 1f       	adc	r31, r31
    1d50:	bb 1f       	adc	r27, r27
    1d52:	66 1f       	adc	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	91 50       	subi	r25, 0x01	; 1
    1d5a:	50 40       	sbci	r21, 0x00	; 0
    1d5c:	a9 f7       	brne	.-22     	; 0x1d48 <__mulsf3_pse+0x64>
    1d5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d60:	51 05       	cpc	r21, r1
    1d62:	70 f0       	brcs	.+28     	; 0x1d80 <__mulsf3_pse+0x9c>
    1d64:	60 cf       	rjmp	.-320    	; 0x1c26 <__fp_inf>
    1d66:	aa cf       	rjmp	.-172    	; 0x1cbc <__fp_szero>
    1d68:	5f 3f       	cpi	r21, 0xFF	; 255
    1d6a:	ec f3       	brlt	.-6      	; 0x1d66 <__mulsf3_pse+0x82>
    1d6c:	98 3e       	cpi	r25, 0xE8	; 232
    1d6e:	dc f3       	brlt	.-10     	; 0x1d66 <__mulsf3_pse+0x82>
    1d70:	86 95       	lsr	r24
    1d72:	77 95       	ror	r23
    1d74:	67 95       	ror	r22
    1d76:	b7 95       	ror	r27
    1d78:	f7 95       	ror	r31
    1d7a:	e7 95       	ror	r30
    1d7c:	9f 5f       	subi	r25, 0xFF	; 255
    1d7e:	c1 f7       	brne	.-16     	; 0x1d70 <__mulsf3_pse+0x8c>
    1d80:	fe 2b       	or	r31, r30
    1d82:	88 0f       	add	r24, r24
    1d84:	91 1d       	adc	r25, r1
    1d86:	96 95       	lsr	r25
    1d88:	87 95       	ror	r24
    1d8a:	97 f9       	bld	r25, 7
    1d8c:	08 95       	ret

00001d8e <__udivmodqi4>:
    1d8e:	99 1b       	sub	r25, r25
    1d90:	79 e0       	ldi	r23, 0x09	; 9
    1d92:	04 c0       	rjmp	.+8      	; 0x1d9c <__udivmodqi4_ep>

00001d94 <__udivmodqi4_loop>:
    1d94:	99 1f       	adc	r25, r25
    1d96:	96 17       	cp	r25, r22
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <__udivmodqi4_ep>
    1d9a:	96 1b       	sub	r25, r22

00001d9c <__udivmodqi4_ep>:
    1d9c:	88 1f       	adc	r24, r24
    1d9e:	7a 95       	dec	r23
    1da0:	c9 f7       	brne	.-14     	; 0x1d94 <__udivmodqi4_loop>
    1da2:	80 95       	com	r24
    1da4:	08 95       	ret

00001da6 <__divmodhi4>:
    1da6:	97 fb       	bst	r25, 7
    1da8:	07 2e       	mov	r0, r23
    1daa:	16 f4       	brtc	.+4      	; 0x1db0 <__divmodhi4+0xa>
    1dac:	00 94       	com	r0
    1dae:	06 d0       	rcall	.+12     	; 0x1dbc <__divmodhi4_neg1>
    1db0:	77 fd       	sbrc	r23, 7
    1db2:	08 d0       	rcall	.+16     	; 0x1dc4 <__divmodhi4_neg2>
    1db4:	0b d0       	rcall	.+22     	; 0x1dcc <__udivmodhi4>
    1db6:	07 fc       	sbrc	r0, 7
    1db8:	05 d0       	rcall	.+10     	; 0x1dc4 <__divmodhi4_neg2>
    1dba:	3e f4       	brtc	.+14     	; 0x1dca <__divmodhi4_exit>

00001dbc <__divmodhi4_neg1>:
    1dbc:	90 95       	com	r25
    1dbe:	81 95       	neg	r24
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	08 95       	ret

00001dc4 <__divmodhi4_neg2>:
    1dc4:	70 95       	com	r23
    1dc6:	61 95       	neg	r22
    1dc8:	7f 4f       	sbci	r23, 0xFF	; 255

00001dca <__divmodhi4_exit>:
    1dca:	08 95       	ret

00001dcc <__udivmodhi4>:
    1dcc:	aa 1b       	sub	r26, r26
    1dce:	bb 1b       	sub	r27, r27
    1dd0:	51 e1       	ldi	r21, 0x11	; 17
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <__udivmodhi4_ep>

00001dd4 <__udivmodhi4_loop>:
    1dd4:	aa 1f       	adc	r26, r26
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	a6 17       	cp	r26, r22
    1dda:	b7 07       	cpc	r27, r23
    1ddc:	10 f0       	brcs	.+4      	; 0x1de2 <__udivmodhi4_ep>
    1dde:	a6 1b       	sub	r26, r22
    1de0:	b7 0b       	sbc	r27, r23

00001de2 <__udivmodhi4_ep>:
    1de2:	88 1f       	adc	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	5a 95       	dec	r21
    1de8:	a9 f7       	brne	.-22     	; 0x1dd4 <__udivmodhi4_loop>
    1dea:	80 95       	com	r24
    1dec:	90 95       	com	r25
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	08 95       	ret

00001df4 <__tablejump2__>:
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	05 90       	lpm	r0, Z+
    1dfa:	f4 91       	lpm	r31, Z
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	09 94       	ijmp

00001e00 <_exit>:
    1e00:	45 3a       	cpi	r20, 0xA5	; 165
    1e02:	54 65       	ori	r21, 0x54	; 84
    1e04:	6d 70       	andi	r22, 0x0D	; 13
    1e06:	2e 20       	and	r2, r14
	...

00001e09 <_ZZ3cmdcE3__c_2>:
    1e09:	4d 69 73 73 69 6e 67 20 61 72 67 75 6d 65 6e 74     Missing argument
	...

00001e1a <_ZZ3cmdcE3__c_1>:
    1e1a:	4f 75 74 20 6f 66 20 72 61 6e 67 65 00              Out of range.

00001e27 <_ZZ3cmdcE3__c_0>:
    1e27:	54 6f 6f 20 6c 6f 6e 67 20 61 72 67 75 6d 65 6e     Too long argumen
    1e37:	74 00                                               t.

00001e39 <_ZZ3cmdcE3__c>:
    1e39:	41 3a 52 65 73 65 74 74 69 6e 67 2e 2e 2e 0d 0a     A:Resetting.....
	...

00001e4a <_ZZ16arg_check_helperjE3__c.lto_priv.31>:
    1e4a:	4d 69 73 73 69 6e 67 20 61 72 67 75 6d 65 6e 74     Missing argument
	...

00001e5b <_ZZ18check_index_helperahbE3__c.lto_priv.29>:
    1e5b:	49 6c 6c 65 67 61 6c 20 69 6e 64 65 78 00           Illegal index.

00001e69 <_ZZ12cmd_helper_3PahPchjPhE3__c>:
    1e69:	4e 6f 20 61 72 67 75 6d 65 6e 74 00                 No argument.

00001e75 <_ZZ10cmd_helperPchE3__c_1>:
    1e75:	4e 6f 20 43 52 4c 46 20 6f 72 20 4e 55 4c 4c 00     No CRLF or NULL.

00001e85 <_ZZ10cmd_helperPchE3__c_0>:
    1e85:	49 6e 70 75 74 20 74 6f 6f 20 6c 6f 6e 67 00        Input too long.

00001e94 <_ZZ10cmd_helperPchE3__c>:
    1e94:	4e 6f 20 64 61 74 61 00                             No data.

00001e9c <_ZL8ds_names>:
    1e9c:	60 00 50 00 40 00 30 00 20 00 10 00 00 00 07 01     `.P.@.0. .......
    1eac:	f8 94                                               ..

00001eae <__stop_program>:
    1eae:	ff cf       	rjmp	.-2      	; 0x1eae <__stop_program>
